"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1486],{9126:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-2677bbf8",path:"/tools/http.html",title:"HTTP",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"HTTPS",slug:"https",children:[{level:3,title:"CA 数字证书",slug:"ca-数字证书",children:[]}]},{level:2,title:"5 层网络协议模型",slug:"_5-层网络协议模型",children:[]},{level:2,title:"TCP 的三次握手",slug:"tcp-的三次握手",children:[]},{level:2,title:"URI、URL、URN",slug:"uri、url、urn",children:[]},{level:2,title:"HTTP 报文",slug:"http-报文",children:[]},{level:2,title:"curl 指令的简单应用",slug:"curl-指令的简单应用",children:[]},{level:2,title:"跨域",slug:"跨域",children:[{level:3,title:"Access-Control-Allow-Origin",slug:"access-control-allow-origin",children:[]},{level:3,title:"JSONP",slug:"jsonp",children:[]}]},{level:2,title:"CORS 跨域限制及预请求校验",slug:"cors-跨域限制及预请求校验",children:[{level:3,title:"预请求 OPTIONS",slug:"预请求-options",children:[]},{level:3,title:"Access-Control-Max-Age",slug:"access-control-max-age",children:[]}]},{level:2,title:"Cache-Control 缓存",slug:"cache-control-缓存",children:[{level:3,title:"可缓存性",slug:"可缓存性",children:[]},{level:3,title:"到期",slug:"到期",children:[]},{level:3,title:"重新验证*",slug:"重新验证",children:[]},{level:3,title:"其他",slug:"其他",children:[]}]},{level:2,title:"no-cache 资源验证",slug:"no-cache-资源验证",children:[{level:3,title:"Last-Modified",slug:"last-modified",children:[]},{level:3,title:"ETag / If-None-Match",slug:"etag-if-none-match",children:[]}]},{level:2,title:"cookie 和 session",slug:"cookie-和-session",children:[{level:3,title:"cookie",slug:"cookie",children:[]},{level:3,title:"session",slug:"session",children:[]}]},{level:2,title:"HTTP 长连接",slug:"http-长连接",children:[]},{level:2,title:"数据协商",slug:"数据协商",children:[{level:3,title:"Accept (客户端)",slug:"accept-客户端",children:[]},{level:3,title:"Content (服务端)",slug:"content-服务端",children:[]}]},{level:2,title:"Redirect 重定向",slug:"redirect-重定向",children:[]},{level:2,title:"CSP",slug:"csp",children:[{level:3,title:"Content-security-Policy",slug:"content-security-policy",children:[]},{level:3,title:"限制方式",slug:"限制方式",children:[]},{level:3,title:"限制页面内表单的提交",slug:"限制页面内表单的提交",children:[]},{level:3,title:"report uri",slug:"report-uri",children:[]},{level:3,title:"Meta 设置 CSP",slug:"meta-设置-csp",children:[]}]}],filePathRelative:"tools/http.md",git:{updatedTime:1661359081e3,contributors:[{name:"Jerry Chen",email:"caffreygo@163.com",commits:7},{name:"Jinrui Chen",email:"jinrui@kooboo.cn",commits:1}]}}},7242:(n,s,a)=>{a.r(s),a.d(s,{default:()=>v});var t=a(6252);const e=(0,t.uE)('<h1 id="http" tabindex="-1"><a class="header-anchor" href="#http" aria-hidden="true">#</a> HTTP</h1><p><code>HTTP</code> (HyperText Transfer Protocol)，即<strong>超文本运输协议</strong>，是实现网络通信的一种规范。</p><p>传输的数据并不是计算机底层中的二进制包，而是完整的、有意义的数据，如 HTML 文件、图片文件、查询结果等超文本，能够被上层应用识别。</p><p>在实际应用中，<code>HTTP</code>常被用于在<code>Web</code>浏览器和网站服务器之间传递信息，以<strong>明文</strong>方式发送内容，不提供任何方式的数据加密。</p><div class="custom-container tip"><p class="custom-container-title">HTTP 的特点</p><ul><li>支持客户/服务器模式。</li><li>简单快速：客户向服务器请求服务时，只需传送<strong>请求方法</strong>和<strong>路径</strong>。由于 HTTP 协议简单，使得 HTTP 服务器的程序规模小，因而通信速度很快。</li><li>灵活：HTTP 允许传输任意类型的数据对象。正在传输的类型由 Content-Type 加以标记。</li><li>无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</li><li>无状态：HTTP 协议无法根据之前的状态进行本次的请求处理。</li></ul></div><details class="custom-container details"><summary>HTTP 发展史</summary><ul><li>HTTP/0.9：只有一个命令 GET；没有 HEADER 等描述数据的信息；服务器发送完毕，就关闭 TCP 连接</li><li>HTTP/1.0：增加了很多的命令（POST、PUT、HEAD...）；增加 status code 和 header；多字符集支持、多部分发送、权限、缓存等</li><li>HTTP/1.1：持久连接（ TCP 连接保持，让多个 HTTP 连接使用）；pipeline (服务端对于多个 HTTP 只能串行处理，后面响应较快的请求会被阻塞)；增加 host 和其他一些命令（同一个物理服务器下允许多种服务 node、java...）</li><li>HTTP/2：所有数据以二进制传输（数据帧）；同一个连接里面发送多个请求不再需要按照顺序来；头信息压缩以及推送等提高效率的功能（推送：用户请求 HTML 的同时，把所需的 css、js 资源同时主动推送给客户端，无需等待 HTML 的解析，达到资源并行获取的效果）</li></ul></details><h2 id="https" tabindex="-1"><a class="header-anchor" href="#https" aria-hidden="true">#</a> HTTPS</h2><blockquote><p>HTTP + SSL / TLS = HTTPS</p></blockquote><p><code>HTTP</code> 传递信息是以<strong>明文</strong>的形式发送内容，这并不安全。而 <code>HTTPS</code> 出现正是为了解决 <code>HTTP</code> 不安全的特性。</p><p>SSL (Secure Sockets Layer 安全套接字协议)，及其继任者 TLS（Transport Layer Security 传输层安全）是为网络通信提供安全及数据完整性的一种安全协议。</p><div class="custom-container tip"><p class="custom-container-title">实现</p><ul><li>对称加密：采用协商的密钥对数据加密</li><li>非对称加密：实现身份认证和密钥协商</li><li>摘要算法：验证信息的完整性（hash函数、散列函数）</li><li>数字签名：身份验证（数字证书 =&gt; 摘要算法+服务器加密）</li></ul></div>',11),p=(0,t.Uk)("🌐 "),o={href:"https://segmentfault.com/a/1190000021559557",target:"_blank",rel:"noopener noreferrer"},c=(0,t.Uk)("SSL/TLS的工作原理(opens new window)"),l=(0,t.uE)('<h3 id="ca-数字证书" tabindex="-1"><a class="header-anchor" href="#ca-数字证书" aria-hidden="true">#</a> CA 数字证书</h3><p><img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/http/CA.png" alt=""> 在建立 http 连接时，服务器不直接向客户停供公钥，而是发送包含公钥的<strong>数字证书</strong>以及通过摘要算法然后进行私钥加密的<strong>数字签名</strong>。 客户拿到数字签名之后，通过公钥解密数字签名拿到数字证书的摘要，然后使用相同的摘要算法处理数字证书，如果两份摘要是一致的，且数字证书是有效的，则证明该公钥是未被篡改的、完整的。</p><h2 id="_5-层网络协议模型" tabindex="-1"><a class="header-anchor" href="#_5-层网络协议模型" aria-hidden="true">#</a> 5 层网络协议模型</h2><ol><li><p>应用层（HTTP、FTP、TFTP、DNS、SMTP...）：为应用软件提供了很多服务，构建于 TCP 协议之上，屏蔽网络传输的相关细节。</p></li><li><p>传输层（TCP、UDP）：向用户提供可靠的端到端(End-to-End)服务，在网络层建立了双方的连接后，定义了两端如何去传输数据，传输数据的方式，数据的分包分片、组装等等实现。</p><p>传输层向高层屏蔽了下层数据通信的细节。</p></li><li><p>网络层（ARP、IP、ICMP...）：为数据在节点之间传输创建逻辑链路（比如定义本机如何寻找访问服务器地址的逻辑关系）。</p></li><li><p>数据链路层：在通信的实体间建立数据链路连接（物理连接之后，需要软件服务来创建一个电路的连接，使双方能够传输数据 0/1。</p></li><li><p>物理层：定义物理设备如何传输数据。</p></li></ol><h2 id="tcp-的三次握手" tabindex="-1"><a class="header-anchor" href="#tcp-的三次握手" aria-hidden="true">#</a> TCP 的三次握手</h2><details class="custom-container details"><summary>TCP 与 UDP</summary><ul><li>TCP 是<strong>面向连接</strong>的协议，建立连接3次握手、断开连接四次挥手，UDP是面向无连接，数据传输前后不连接连接，发送端只负责将数据发送到网络，接收端从消息队列读取。</li><li>TCP 提供<strong>可靠的</strong>服务，传输过程采用流量控制、编号与确认、计时器等手段确保数据无差错，不丢失。UDP 则尽可能传递数据，但不保证传递交付给对方。</li><li>TCP <strong>面向字节流</strong>，将应用层报文看成一串无结构的字节流，分解为多个TCP报文段传输后，在目的站重新装配。UDP协议面向报文，不拆分应用层报文，只保留报文边界，一次发送一个报文，接收方去除报文首部后，原封不动将报文交给上层应用。</li><li>TCP 只能点对点<strong>全双工通信</strong>。UDP 支持一对一、一对多、多对一和多对多的交互通信。</li></ul></details><div class="custom-container tip"><p class="custom-container-title">✅ 三次握手</p><p>主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备</p><ol><li><p>第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN(c)，此时客户端处于 <strong>SYN_SENT</strong> 状态</p><p><code>[SYN] Seq=0 Win=64240 Len=0 MSS=1460 WS=256 SACK_PERM=1</code> （Seq = X）</p></li><li><p>第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，为了确认客户端的 SYN，将客户端的 ISN+1作为ACK的值，此时服务器处于 <strong>SYN_RCVD</strong> 的状态</p><p><code>[SYN ACK] Seq=0 Ack=1 Win=14600 Len=0 MSS=1412 SACK_PERM=1 WS=128</code> （<strong>ACK=X+1</strong> Seq=Y）</p></li><li><p>第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，值为服务器的ISN+1。此时客户端处于 ESTABLISHED 状态。服务器收到 ACK 报文之后，也处于 <strong>ESTABLISHED</strong> 状态，此时，双方已建立起了连接。</p><p><code>[ACK] Seq=1 Ack=1 Win=66304 Len=0</code>（<strong>ACK=Y+1</strong> Seq=Z）</p></li></ol></div><img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/http/img2.jpg" alt="三次握手" style="zoom:80%;"><h2 id="uri、url、urn" tabindex="-1"><a class="header-anchor" href="#uri、url、urn" aria-hidden="true">#</a> URI、URL、URN</h2><ul><li><p>URI：<code>Universal Resource Identifier</code> 统一资源标志符。用来标识互联网上的信息资源，包括了 URL 和 URN</p></li><li><p>URL：<code>Universal Resource Locator</code> 统一资源定位器，唯一地标识一个资源在 Internet 上的位置。不管用什么方法表示，只要能定位一个资源，就叫 URL。（</p><p><code>&lt;方案&gt;:&lt;方案描述部分&gt;</code></p><p><code>http://user:pass@host.com:80/path?query=string#hash</code></p><p><code>&lt;方案&gt;://&lt;用户名&gt;:&lt;密码&gt;@&lt;主机&gt;:&lt;端口&gt;/&lt;url路径&gt;</code></p></li><li><p>URN：<code>Universal Resource Name</code> 永久统一资源定位符。它命名资源但不指定如何定位资源，比如：只告诉你一个人的姓名，不告诉你这个人在哪。例如：telnet、mailto、news 和 isbn URI 等都是 URN。</p></li></ul><blockquote><p>URI 指的是一个资源，URL 用<strong>地址</strong>定位一个资源，URN 用<strong>名称</strong>定位一个资源</p></blockquote><h2 id="http-报文" tabindex="-1"><a class="header-anchor" href="#http-报文" aria-hidden="true">#</a> HTTP 报文</h2><p><img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/http/img3.jpg" alt=""></p><ul><li><p>请求的起始行：method + path + version</p></li><li><p>响应的起始行：version + status code + status text</p></li></ul><blockquote><p>http 方法：用来定义对资源的操作；http code：定义服务器对请求的<strong>处理结果</strong></p><p>header 与 body 之间有一个空行</p></blockquote><h2 id="curl-指令的简单应用" tabindex="-1"><a class="header-anchor" href="#curl-指令的简单应用" aria-hidden="true">#</a> curl 指令的简单应用</h2><p>curl 它的功能非常强大，命令行参数多达几十种。如果熟练的话，完全可以取代 Postman 这一类的图形界面工具。</p><p><img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/http/curlV.png" alt="1574690272753"></p><p>不带有任何参数时，curl 就是发出 GET 请求。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">curl</span> https://www.example.com\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>上面命令向<code>www.example.com</code>发出 GET 请求，服务器返回的内容会在命令行输出。</p><p><code>-v</code> 参数输出通信的整个过程，用于调试。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">curl</span> -v https://www.example.com<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>--trace</code>参数也可以用于调试，还会输出原始的二进制数据。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">curl</span> --trace - https://www.example.com\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="跨域" tabindex="-1"><a class="header-anchor" href="#跨域" aria-hidden="true">#</a> 跨域</h2><h3 id="access-control-allow-origin" tabindex="-1"><a class="header-anchor" href="#access-control-allow-origin" aria-hidden="true">#</a> Access-Control-Allow-Origin</h3><p><img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/http/img4.png" alt="跨域实例"></p><p>在 8888 端口下返回 test.html 文件，在 test 中访问 8887 端口</p><p>跨域会导致浏览器拦截 response：<code>Access to XMLHttpRequest at &#39;http://localhost:8887/&#39; from origin &#39;http://localhost:8888&#39; has been blocked by CORS policy: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token string">&#39;Access-Control-Allow-Origin&#39;</span><span class="token operator">:</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>*</code> 表示允许任何服务都接受，可以设置特地域名</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token string">&#39;Access-Control-Allow-Origin&#39;</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:8888&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="jsonp" tabindex="-1"><a class="header-anchor" href="#jsonp" aria-hidden="true">#</a> JSONP</h3><p>原理：浏览器允许 link script 和 img 标签加载数据，不需要设置允许跨域 Access-Control-Allow-Origin</p><p><img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/http/img5.png" alt="JSONP"></p><h2 id="cors-跨域限制及预请求校验" tabindex="-1"><a class="header-anchor" href="#cors-跨域限制及预请求校验" aria-hidden="true">#</a> CORS 跨域限制及预请求校验</h2><div class="custom-container tip"><p class="custom-container-title">限制</p><p>保持 Access-Control-Allow-Origin 允许之下，仍然是有限制的（返回 200 但是浏览器不允许）</p><ul><li>允许方法: GET、HEAD、POST</li><li>允许的<code>Content-Type</code>：text/plain、multipart/form-data、application/x-www-form-urlencoded</li><li>其他限制：<strong>请求头限制</strong>、XMLHttpRequestUpload 对象均没有注册任何事件监听器、请求中没有使用 ReadableStream 对象</li></ul></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;http://localhost:8887/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    method<span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>\n    headers<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string">&#39;X-Test-Cors&#39;</span><span class="token operator">:</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// X-Test-Cor 自定义的请求头默认不允许</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="预请求-options" tabindex="-1"><a class="header-anchor" href="#预请求-options" aria-hidden="true">#</a> 预请求 OPTIONS</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token string">&#39;Access-Control-Allow-Origin&#39;</span><span class="token operator">:</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;Access-Control-Allow-Headers&#39;</span><span class="token operator">:</span> <span class="token string">&#39;X-Test-Cors&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;Access-Control-Allow-Methods&#39;</span><span class="token operator">:</span> <span class="token string">&#39;POST,PUT,Delete&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;Access-Control-Max-Age&#39;</span><span class="token operator">:</span> <span class="token string">&#39;1000&#39;</span><span class="token punctuation">,</span>  <span class="token comment">// 1000s 之内不再需要发送 OPTIONS 预请求</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>通过服务端设置允许的请求头来保证这个跨域请求的进行，在查看 Network 时会看到有两条请求记录：</p><ol><li>OPTIONS：验证服务端是否允许此请求头的跨域</li><li>POST</li></ol><h3 id="access-control-max-age" tabindex="-1"><a class="header-anchor" href="#access-control-max-age" aria-hidden="true">#</a> Access-Control-Max-Age</h3><p>表示跨域请求的参数事件内在第一次预请求之后的时间内不需要再发送 OPTIONS 预请求（second）</p><h2 id="cache-control-缓存" tabindex="-1"><a class="header-anchor" href="#cache-control-缓存" aria-hidden="true">#</a> Cache-Control 缓存</h2><blockquote><p>这个请求头只是一个希望你按照的这个规则来，你可以不遵守</p></blockquote><p><img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/http/cache.png" alt="跨域实例"></p><h3 id="可缓存性" tabindex="-1"><a class="header-anchor" href="#可缓存性" aria-hidden="true">#</a> 可缓存性</h3><p><code>&#39;Cache-Control&#39;: &#39;max-age=200, public&#39;</code></p><ul><li>public: 代表 http 经过的任何地方，客户端、浏览器、包括代理的中间服务器都可以进行缓存</li><li>private: 只有发起请求的浏览器可以进行和缓存</li><li>no-cache: 可以缓存的，但是每次访问缓存之前需要发送一个请求验证是否可以使用缓存的数据</li></ul><h3 id="到期" tabindex="-1"><a class="header-anchor" href="#到期" aria-hidden="true">#</a> 到期</h3><h4 id="max-age-s" tabindex="-1"><a class="header-anchor" href="#max-age-s" aria-hidden="true">#</a> max-age (s)</h4><p>指这个缓存什么时候到期，之后需要重新发起请求而不能读取缓存的内容。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>response<span class="token punctuation">.</span><span class="token function">writeHeader</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/javascript&#39;</span><span class="token punctuation">,</span>\n  <span class="token comment">// 请求后的200s内再请求可使用缓存数据</span>\n  <span class="token string">&#39;Cache-Control&#39;</span><span class="token operator">:</span> <span class="token string">&#39;max-age=200&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="s-maxage-s" tabindex="-1"><a class="header-anchor" href="#s-maxage-s" aria-hidden="true">#</a> s-maxage(s)</h4><p>在浏览器中会读取 max-age, 但是在代理服务器中如果同时存在 max-age 和 s-maxage, 会读取 s-maxage。</p><h4 id="max-stale-s" tabindex="-1"><a class="header-anchor" href="#max-stale-s" aria-hidden="true">#</a> max-stale(s)</h4><p>发起请求的一方主动带的一个请求头，即使 max-age 已经过期，超出 max-age 时间的响应消息如果还在 max-stale 有效期之内，还能读取缓存的内容，而不需要重新发起请求。</p><h3 id="重新验证" tabindex="-1"><a class="header-anchor" href="#重新验证" aria-hidden="true">#</a> 重新验证*</h3><h4 id="must-revalidate" tabindex="-1"><a class="header-anchor" href="#must-revalidate" aria-hidden="true">#</a> must-revalidate</h4><p>缓存如果过期必须从原服务端发送请求验证这个缓存是否真的过期，来重新获取数据，而不能读取本地缓存</p><h4 id="proxy-revalidate" tabindex="-1"><a class="header-anchor" href="#proxy-revalidate" aria-hidden="true">#</a> proxy-revalidate</h4><p>在代理服务器中需要重新验证</p><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><h4 id="no-store" tabindex="-1"><a class="header-anchor" href="#no-store" aria-hidden="true">#</a> no-store</h4><p><code>&#39;Cache-Control&#39;: &#39;max-age=200000, no-store&#39;</code></p><p>客户端和代理服务器都不可以使用缓存数据，必须重新发送请求。</p><h4 id="no-transform" tabindex="-1"><a class="header-anchor" href="#no-transform" aria-hidden="true">#</a> no-transform</h4><p>代理服务器不能改动数据，例如压缩等等操作</p><h2 id="no-cache-资源验证" tabindex="-1"><a class="header-anchor" href="#no-cache-资源验证" aria-hidden="true">#</a> no-cache 资源验证</h2><p>如果只是设置 <code>&#39;Cache-Control&#39;: &#39;max-age=200000&#39;</code>，浏览器不需要通过服务端的验证即可读取缓存（Size：from memory）</p><h3 id="last-modified" tabindex="-1"><a class="header-anchor" href="#last-modified" aria-hidden="true">#</a> Last-Modified</h3><p>对比上次修改的时间，验证资源是否需要更新。配合 <code>If-Modified-Since</code> 或者 <code>If-Unmodifiled-Since</code> 使用。</p><p>服务端设置 Last-Modified，下次浏览器请求会带上 If-Modified-Since，以此判断资源是否修改过，然后确认要不要读取缓存的数据还是重新发起请求。</p><h3 id="etag-if-none-match" tabindex="-1"><a class="header-anchor" href="#etag-if-none-match" aria-hidden="true">#</a> ETag / If-None-Match</h3><p>数据签名，对比资源的签名判断是否使用缓存。</p><p>资源修改后就更新 Etag，配合例如对内容进行一个 hash 计算，判断两者是否一样，配合 <code>If-Match</code> 和 <code>If-None-Match</code> 使用。</p><blockquote><p>这里的 <code>max-age</code> 的时间虽然很长，浏览器可以缓存。但设置了 <code>no-cache</code>，浏览器还是需要通过服务端的验证才能使用缓存</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>response<span class="token punctuation">.</span><span class="token function">writeHeader</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/javascript&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;Cache-Control&#39;</span><span class="token operator">:</span> <span class="token string">&#39;max-age=200000，no-cache&#39;</span><span class="token punctuation">,</span> <span class="token comment">// no-cache</span>\n  <span class="token string">&#39;Last-Modified&#39;</span><span class="token operator">:</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">,</span>  <span class="token comment">// updated</span>\n  <span class="token string">&#39;ETag&#39;</span><span class="token operator">:</span> <span class="token string">&#39;777&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Request Headers：</span>\n<span class="token comment">// If-Modified-Since: 123</span>\n<span class="token comment">// If-None-Match：777</span>\n<span class="token keyword">const</span> etag <span class="token operator">=</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;If-None-Match&#39;</span><span class="token punctuation">]</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>etag <span class="token operator">===</span> <span class="token string">&#39;777&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 304 Not Modified 读取缓存数据</span>\n  response<span class="token punctuation">.</span><span class="token function">writeHeader</span><span class="token punctuation">(</span><span class="token number">304</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token string">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/javascript&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;Cache-Control&#39;</span><span class="token operator">:</span> <span class="token string">&#39;max-age=200000，no-cache&#39;</span><span class="token punctuation">,</span> <span class="token comment">// no-cache</span>\n    <span class="token string">&#39;Last-Modified&#39;</span><span class="token operator">:</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;ETag&#39;</span><span class="token operator">:</span> <span class="token string">&#39;777&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><blockquote><p>当请求返回 304（Not-Modified）时，此时使用本地缓存的数据，在 respond 里面的内容实际上是缓存的数据</p><p>Chrome 可以 Disable cache，浏览器就不会发送缓存相关的请求头</p><p>Response Headers =&gt; ETag；Request Headers =&gt; If-None-Match</p></blockquote><h2 id="cookie-和-session" tabindex="-1"><a class="header-anchor" href="#cookie-和-session" aria-hidden="true">#</a> cookie 和 session</h2><h3 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie" aria-hidden="true">#</a> cookie</h3><div class="custom-container tip"><p class="custom-container-title">cookie</p><ul><li>node 里面通过 Set-Cookie 设置</li><li>下次同域请求的 head 里面会自动带上这个数据</li><li>键值对，可以设置多个 key=value</li></ul><p><code>&#39;Set-Cookie&#39;:&#39;id=123&#39;</code></p><p><code>&#39;Set-Cookie&#39;:[&#39;id=123&#39;,&#39;abc=456]</code></p></div><ul><li>max-age 和 expires 设置过期时间</li><li>Secure 只在 https 的时候发送</li><li>HttpOnly 无法通过 document.cookie 访问</li></ul><blockquote><p>所以当 Response Headers 里有 <code>Set-Cookie</code> 字段(一个或多个)的时候，浏览器就会把 cookie 写入到浏览器</p><p>下次请求的时候 Requeset Headers 会有 <code>Cookie</code> 字段带上浏览器的 cookie 到服务端</p></blockquote><p><em>cookie 的过期时间是在浏览器关闭之后失效，在没有设置过期时间的情况下</em></p><ol><li>过期之后下次请求 Request Headers 的 Cookie 便不会带上这个 key=value</li><li>max-age 指有效时间是多长，expires 指到这个时间点过期。max-age 会方便一些。</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// cookie 如果过期，浏览器请求就不会带上这个 cookie</span>\nresponse<span class="token punctuation">.</span><span class="token function">writeHeader</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/javascript&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;Set-Cookie&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;id=123;max-age=10&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;abc=456;HttpOnly&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="cookie-domain" tabindex="-1"><a class="header-anchor" href="#cookie-domain" aria-hidden="true">#</a> cookie domain</h4><p>cookie 在当前域下写入在其他域是无法访问的</p><p>但是如果在 test.com 里面设置了 cookie ，二级域名下 a.test.com/b.test.com 都可以访问。</p><blockquote><p>Response Headers: <code>&#39;Set-Cookie&#39;: [&#39;abc=456;domain=text.com&#39;, &#39;id=123&#39;]</code></p></blockquote><h3 id="session" tabindex="-1"><a class="header-anchor" href="#session" aria-hidden="true">#</a> session</h3><p>cookie 不等于 session，session 的实现方式有很多种，cookie 只是其中一种。</p><blockquote><p>例如通过对不同用户设置不同的唯一的 cookie 的 key=value 值，来<strong>定位用户的数据</strong></p></blockquote><p>🚀 只要能保证定位到用户的信息数据，那么它就是一种 session 的实现方案。那么通过请求头携带能够解析到用户信息的字段也算是 session 的一种实现。</p><h2 id="http-长连接" tabindex="-1"><a class="header-anchor" href="#http-长连接" aria-hidden="true">#</a> HTTP 长连接</h2><p>http 的创建过程中需要创建一个 TCP 连接，长连接可以保持 TCP 的连接不关闭，减少三次握手导致的开销。</p><blockquote><p>chrome 下可以最多保持 6 个 TCP 的并发，那么 http 长连接可以在此 6 个 TCP 连接内传输</p><p>http 连接是否复用 tcp 连接由 Connection 声明。当然，在请求地址是同域的前提下</p></blockquote><p>现代浏览器下和框架下一般都是长连接 <code>Connection: keep-alive</code> (close)</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>response<span class="token punctuation">.</span><span class="token function">writeHeader</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;......&#39;</span><span class="token punctuation">,</span>\n  <span class="token comment">// 每个http请求都要创建一个TCP连接</span>\n  Connection<span class="token operator">:</span> <span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>HTTP2：信道复用，tcp 内可以并发 http 请求，不再是1.1里面可能阻塞的串行请求。</p></blockquote><h2 id="数据协商" tabindex="-1"><a class="header-anchor" href="#数据协商" aria-hidden="true">#</a> 数据协商</h2><h3 id="accept-客户端" tabindex="-1"><a class="header-anchor" href="#accept-客户端" aria-hidden="true">#</a> Accept (客户端)</h3><ul><li><p><code>Accept</code>：想要的数据类型 <code>Accept: */*</code></p></li><li><p><code>Accept-Encoding</code>：客户端接受的数据编码方式，限制服务端的数据压缩方法 <code>Accept-Encoding: gzip, deflate, br</code></p><p>服务端使用 gzip 文件可以减少传输的网络带宽消耗，浏览器接收到后再进行解压缩。</p></li><li><p><code>Accept-Language</code>：判断返回的语言 <code>Accept-Language: en,zh;q=0.9,zh-CN;q=0.8</code> （q 越大表示权重越大 )</p></li><li><p><code>User-Agent</code>：表示<strong>系统和浏览器</strong>的一些相关的信息</p><p><code>User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</code></p></li></ul><h3 id="content-服务端" tabindex="-1"><a class="header-anchor" href="#content-服务端" aria-hidden="true">#</a> Content (服务端)</h3><h4 id="content-type" tabindex="-1"><a class="header-anchor" href="#content-type" aria-hidden="true">#</a> Content-Type</h4><p><code>Content-Type</code>：服务端返回的数据格式 (type/subtype)</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Response Headers，让浏览器不预测返回的数据类型</span>\n<span class="token string">&#39;X-Content-Type-Options&#39;</span><span class="token operator">:</span> <span class="token string">&#39;nosniff&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>旧版本 IE 浏览器在响应数据未返回 Content-Type 的时候，会预测返回的数据类型进行处理，例如把文本当脚本处理，这可能导致安全信息被泄露。</p><p>现代浏览器基本上没这个问题了。</p></blockquote><p>✅ 发送请求也可以带 <code>Content-Type</code>，有时候客户端需要告诉服务端发送的数据类型，让服务端进行处理。</p><h4 id="✅-enctype" tabindex="-1"><a class="header-anchor" href="#✅-enctype" aria-hidden="true">#</a> ✅ enctype</h4><p>form 的 <code>enctype</code> 只能接受三种：<code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code> 和 <code>text/plain</code></p>',114),i=(0,t._)("div",{class:"language-html ext-html line-numbers-mode"},[(0,t._)("pre",{class:"language-html"},[(0,t._)("code",null,[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("form")]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"action"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("/form"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"method"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("POST"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"enctype"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("application/x-www-form-urlencoded"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("input")]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"name"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("name"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"type"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("text"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"/>")]),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("input")]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"name"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("password"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"type"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("password"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"/>")]),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("input")]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"type"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("submit"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"/>")]),(0,t.Uk)("\n"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("form")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br")])],-1),r=(0,t._)("div",{class:"language-html ext-html line-numbers-mode"},[(0,t._)("pre",{class:"language-html"},[(0,t._)("code",null,[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("form")]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"action"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("/form"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"method"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("POST"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"enctype"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("multipart/form-data"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("input")]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"name"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("name"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"type"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("text"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"/>")]),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("input")]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"name"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("password"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"type"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("password"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"/>")]),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("input")]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"type"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("file"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"name"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("file"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"/>")]),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("input")]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"type"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("submit"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"/>")]),(0,t.Uk)("\n"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("form")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br")])],-1),u=(0,t.uE)('<div class="custom-container tip"><p class="custom-container-title">提示</p><blockquote><p>GET 请求只支持 ASCII 字符集，因此，如果我们要发送更大<strong>字符集的内容</strong>，我们应使用 <strong>POST</strong> 请求。</p></blockquote><p>✅ 默认情况下是 <code>application/x-www-urlencoded</code>，当表单使用 POST 请求时，数据会被以 <code>x-www-urlencoded</code> 方式编码到 Body 中来传送</p><p>✅ 而如果 GET 请求，则是附在 url 链接后面来发送（query）</p><p>✅ 如果要发送大量的二进制数据（non-ASCII），<code>&quot;application/x-www-form-urlencoded&quot;</code> 显然是低效的，因为它需要用 3 个字符来表示一个 <code>non-ASCII</code> 的字符。因此，这种情况下，应该使用 <code>&quot;multipart/form-data&quot;</code> 格式。</p></div><h4 id="application-x-www-urlencoded" tabindex="-1"><a class="header-anchor" href="#application-x-www-urlencoded" aria-hidden="true">#</a> application/x-www-urlencoded</h4><p>我们在通过 HTTP 向服务器发送 POST 请求提交数据，都是通过 form 表单形式提交的</p><p><code>application/x-www-form-urlencoded</code>，意味着消息内容会经过 <strong>URL 格式编码</strong>，就像在 GET 请 求时 URL 里的 QueryString 那样，<code>txt1=hello&amp;txt2=world</code></p>',4),k=(0,t._)("div",{class:"language-html ext-html line-numbers-mode"},[(0,t._)("pre",{class:"language-html"},[(0,t._)("code",null,[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("form")]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"method"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("post"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"action"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("http://w.sohu.com"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("input")]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"type"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("text"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"name"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("txt1"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"/>")]),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("input")]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"type"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("text"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"name"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("txt2"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"/>")]),(0,t.Uk)("\n"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("form")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br")])],-1),d=(0,t._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,t._)("pre",{class:"language-bash"},[(0,t._)("code",null,[(0,t.Uk)("POST / HTTP/1.1\nContent-Type:application/x-www-form-urlencoded\nAccept-Encoding: gzip, deflate\nHost: w.sohu.com\nContent-Length: "),(0,t._)("span",{class:"token number"},"21"),(0,t.Uk)("\nConnection: Keep-Alive\nCache-Control: no-cache\n\n"),(0,t._)("span",{class:"token assign-left variable"},"txt1"),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)("hello"),(0,t._)("span",{class:"token operator"},"&"),(0,t._)("span",{class:"token assign-left variable"},"txt2"),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)("world\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br")])],-1),m=(0,t.uE)('<p>对于普通的 HTML Form POST 请求，它会在头信息里使用 <code>Content-Length</code> 注明内容长度。 ​请求头信息每行一条，空行之后便是 Body，即“内容”（entity）。内容的格式是在头信息中的 Content-Type 指定的</p><h4 id="multipart-form-data" tabindex="-1"><a class="header-anchor" href="#multipart-form-data" aria-hidden="true">#</a> multipart/form-data</h4><div class="custom-container tip"><p class="custom-container-title">multipart/form-data</p><p>文件不能作为字符串进行传输，应该以二进制进行传输。如果还是使用<code>application/x-www-form-urlencoded</code>拼接字符串的形式就无法把文件正常发送给服务端。</p><p><code>boundary</code> 用来分割提交表单每项的每一个部分</p></div>',3),b=(0,t._)("div",{class:"language-html ext-html line-numbers-mode"},[(0,t._)("pre",{class:"language-html"},[(0,t._)("code",null,[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("FORM")]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"method"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("POST"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"id"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("form"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"action"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("/form"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"enctype"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("multipart/form-data"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("INPUT")]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"type"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("text"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"name"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("city"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"value"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("Santa colo"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"/>")]),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("INPUT")]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"type"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("text"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"name"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("desc"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"/>")]),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("INPUT")]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"type"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("file"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"name"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("pic"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"/>")]),(0,t.Uk)("\n"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("FORM")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br")])],-1),h=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"var"),(0,t.Uk)(" form "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" document"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"getElementById"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},'"form"'),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nform"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"addEventListener"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'submit'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"function"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"e"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  e"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"preventDefault"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"var"),(0,t.Uk)(" formData "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t._)("span",{class:"token class-name"},"FormData"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("form"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token function"},"fetch"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'/form'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    method"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'POST'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    body"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(" formData\n  "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br")])],-1),_=(0,t._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,t._)("pre",{class:"language-bash"},[(0,t._)("code",null,[(0,t.Uk)("POST /t2/upload.do HTTP/1.1\nUser-Agent: SOHUWapRebot\nAccept-Language: zh-cn,zh"),(0,t._)("span",{class:"token punctuation"},";"),(0,t._)("span",{class:"token assign-left variable"},"q"),(0,t._)("span",{class:"token operator"},"="),(0,t._)("span",{class:"token number"},"0.5"),(0,t.Uk)("\nAccept-Charset: GBK,utf-8"),(0,t._)("span",{class:"token punctuation"},";"),(0,t._)("span",{class:"token assign-left variable"},"q"),(0,t._)("span",{class:"token operator"},"="),(0,t._)("span",{class:"token number"},"0.7"),(0,t.Uk)(",*"),(0,t._)("span",{class:"token punctuation"},";"),(0,t._)("span",{class:"token assign-left variable"},"q"),(0,t._)("span",{class:"token operator"},"="),(0,t._)("span",{class:"token number"},"0.7"),(0,t.Uk)("\nConnection: keep-alive\nContent-Length: "),(0,t._)("span",{class:"token number"},"60408"),(0,t.Uk)("\nContent-Type:multipart/form-data"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)(),(0,t._)("span",{class:"token assign-left variable"},"boundary"),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)("ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC\nHost: w.sohu.com\n\n--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC\nContent-Disposition: form-data"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)(),(0,t._)("span",{class:"token assign-left variable"},"name"),(0,t._)("span",{class:"token operator"},"="),(0,t._)("span",{class:"token string"},'"city"'),(0,t.Uk)("\n\nSanta colo\n--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC\nContent-Disposition: form-data"),(0,t._)("span",{class:"token punctuation"},";"),(0,t._)("span",{class:"token assign-left variable"},"name"),(0,t._)("span",{class:"token operator"},"="),(0,t._)("span",{class:"token string"},'"desc"'),(0,t.Uk)("\nContent-Type: text/plain"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)(),(0,t._)("span",{class:"token assign-left variable"},"charset"),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)("UTF-8\nContent-Transfer-Encoding: 8bit\n\n"),(0,t._)("span",{class:"token punctuation"},".."),(0,t.Uk)(".\n--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC\nContent-Disposition: form-data"),(0,t._)("span",{class:"token punctuation"},";"),(0,t._)("span",{class:"token assign-left variable"},"name"),(0,t._)("span",{class:"token operator"},"="),(0,t._)("span",{class:"token string"},'"pic"'),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)(),(0,t._)("span",{class:"token assign-left variable"},"filename"),(0,t._)("span",{class:"token operator"},"="),(0,t._)("span",{class:"token string"},'"photo.jpg"'),(0,t.Uk)("\nContent-Type: application/octet-stream\nContent-Transfer-Encoding: binary\n\n"),(0,t._)("span",{class:"token punctuation"},".."),(0,t.Uk)(". binary data of the jpg "),(0,t._)("span",{class:"token punctuation"},".."),(0,t.Uk)(".\n--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC--\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"19"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"20"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"21"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"22"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"23"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"24"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"25"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"26"),(0,t._)("br")])],-1),g=(0,t.uE)('<blockquote><ul><li>从上面的 <code>multipart/form-data</code> 格式发送的请求的样式来看，它包含了多个 Parts，每个 Part 都包含头信息部分，Part 头信息中必须包含一个 <code>Content-Disposition</code> 头，其他的头信息则为可选项， 比如 <code>Content-Type</code> 等。</li><li>当为文件类型的时候，会有 filename 等补充内容。</li><li>每个部分使用 <code>--boundary</code> 分割开来，最后一行使用 <code>--boundary--</code> 结尾。</li></ul></blockquote><h2 id="redirect-重定向" tabindex="-1"><a class="header-anchor" href="#redirect-重定向" aria-hidden="true">#</a> Redirect 重定向</h2><ul><li><p>临时跳转 302：将请求重定向到新的地址，指定<code>Location </code> 字段表示临时的新地址。</p></li><li><p>永久跳转 301：永久定向到一个新的路由。</p></li></ul><blockquote><p>302 需要先到旧地址再到新地址，301 则让浏览器下次直接访问新地址</p><p>注意：301 会导致浏览器后续一直访问缓存数据，无法控制缓存</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>resquest<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    Location<span class="token operator">:</span> <span class="token string">&#39;/new&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// redirect 就不需要返回内容了</span>\n  response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>resquest<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">&#39;/new&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token string">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/html&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;div&gt;this is content&lt;/div&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="csp" tabindex="-1"><a class="header-anchor" href="#csp" aria-hidden="true">#</a> CSP</h2><h3 id="content-security-policy" tabindex="-1"><a class="header-anchor" href="#content-security-policy" aria-hidden="true">#</a> Content-security-Policy</h3><div class="custom-container tip"><p class="custom-container-title">内容安全策略：限制资源获取；报告资源获取越权</p><ul><li>当网页中可能出现一些不安全的引用的时候，可以主动把这些不安全的东西屏蔽掉。</li><li>可以通过服务端响应头限制，也可以使用 meta 标签在前端进行限制。</li><li>report-uri 只能通过响应头设置，meta 设置无效</li></ul></div><h3 id="限制方式" tabindex="-1"><a class="header-anchor" href="#限制方式" aria-hidden="true">#</a> 限制方式</h3><p>default-src 限制全局、connect-src、img-src、manifest-src、style-src、script-src、frame-src、media-src、font-src...</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/html&#39;</span><span class="token punctuation">,</span>\n  <span class="token comment">// 只能通过 http 的方式加载，此时 inline script 无法加载</span>\n  <span class="token string">&#39;Content-Srcurity-Policy&#39;</span><span class="token operator">:</span> <span class="token string">&#39;default-src http: https:&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nresponse<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/html&#39;</span><span class="token punctuation">,</span>\n  <span class="token comment">// 不能引入外链的脚本，只能使用本域下的 script</span>\n  <span class="token string">&#39;Content-Srcurity-Policy&#39;</span><span class="token operator">:</span> <span class="token string">&quot;default-src &#39;self&#39;&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nresponse<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/html&#39;</span><span class="token punctuation">,</span>\n  <span class="token comment">// 不能引入外链的脚本，允许特定域名内的数据加载</span>\n  <span class="token string">&#39;Content-Srcurity-Policy&#39;</span><span class="token operator">:</span> <span class="token string">&quot;default-src &#39;self&#39; https://source.com/&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="限制页面内表单的提交" tabindex="-1"><a class="header-anchor" href="#限制页面内表单的提交" aria-hidden="true">#</a> 限制页面内表单的提交</h3><p>在返回包含 form 的 HTML 页面数据时，在响应头添加 CSP 的限制。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/html&#39;</span><span class="token punctuation">,</span>\n  <span class="token comment">// 表单只能提交到当前域</span>\n  <span class="token string">&#39;Content-Srcurity-Policy&#39;</span><span class="token operator">:</span> <span class="token string">&quot;default-src &#39;self&#39;;form-action &#39;self&#39;&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="report-uri" tabindex="-1"><a class="header-anchor" href="#report-uri" aria-hidden="true">#</a> report uri</h3><p>在遇到限制之后可以向 <code>/report</code> 地址发送一个 <code>csp-report</code> 的报告</p><p>✅ <code>Content-Srcurity-Policy-Report-Only</code> 会做识别限制进行上报，仍然会加载数据</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/html&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;Content-Srcurity-Policy&#39;</span><span class="token operator">:</span> <span class="token string">&quot;img-src &#39;self&#39;; report-uri /report&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="meta-设置-csp" tabindex="-1"><a class="header-anchor" href="#meta-设置-csp" aria-hidden="true">#</a> Meta 设置 CSP</h3><h4 id="限制所有" tabindex="-1"><a class="header-anchor" href="#限制所有" aria-hidden="true">#</a> 限制所有</h4><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span>\n      <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Content-Security-Policy<span class="token punctuation">&quot;</span></span>\n      <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>default-src <span class="token punctuation">&#39;</span>self<span class="token punctuation">&#39;</span> form-action <span class="token punctuation">&#39;</span>self<span class="token punctuation">&#39;</span><span class="token punctuation">&quot;</span></span>\n      <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="限制-ajax-请求" tabindex="-1"><a class="header-anchor" href="#限制-ajax-请求" aria-hidden="true">#</a> 限制 ajax 请求</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/html&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;Content-Srcurity-Policy&#39;</span><span class="token operator">:</span> <span class="token string">&quot;connect-src &#39;self&#39;&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>或</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span>\n      <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Content-Security-Policy<span class="token punctuation">&quot;</span></span>\n      <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>connect <span class="token punctuation">&#39;</span>self<span class="token punctuation">&#39;</span><span class="token punctuation">&quot;</span></span>\n      <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',25),v={render:function(n,s){const a=(0,t.up)("OutboundLink"),v=(0,t.up)("CodeGroupItem"),f=(0,t.up)("CodeGroup");return(0,t.wg)(),(0,t.iD)(t.HY,null,[e,(0,t._)("p",null,[p,(0,t._)("a",o,[c,(0,t.Wm)(a)])]),l,(0,t.Wm)(f,null,{default:(0,t.w5)((()=>[(0,t.Wm)(v,{title:"application/x-www-form-urlencoded"},{default:(0,t.w5)((()=>[i])),_:1}),(0,t.Wm)(v,{title:"multipart/form-data"},{default:(0,t.w5)((()=>[r])),_:1})])),_:1}),u,(0,t.Wm)(f,null,{default:(0,t.w5)((()=>[(0,t.Wm)(v,{title:"Form"},{default:(0,t.w5)((()=>[k])),_:1}),(0,t.Wm)(v,{title:"Request Body"},{default:(0,t.w5)((()=>[d])),_:1})])),_:1}),m,(0,t.Wm)(f,null,{default:(0,t.w5)((()=>[(0,t.Wm)(v,{title:"Form"},{default:(0,t.w5)((()=>[b])),_:1}),(0,t.Wm)(v,{title:"fetch 请求"},{default:(0,t.w5)((()=>[h])),_:1}),(0,t.Wm)(v,{title:"Request Body"},{default:(0,t.w5)((()=>[_])),_:1})])),_:1}),g],64)}}}}]);