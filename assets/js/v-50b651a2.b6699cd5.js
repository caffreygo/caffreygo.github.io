"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4749],{4147:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-50b651a2",path:"/note/manual.html",title:"手写常用方法",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"数据类型判断",slug:"数据类型判断",children:[]},{level:2,title:"继承",slug:"继承",children:[{level:3,title:"原型链继承",slug:"原型链继承",children:[]},{level:3,title:"借用构造函数实现继承",slug:"借用构造函数实现继承",children:[]},{level:3,title:"组合继承",slug:"组合继承",children:[]},{level:3,title:"寄生式组合继承 ✅",slug:"寄生式组合继承-✅",children:[]},{level:3,title:"class 实现继承",slug:"class-实现继承",children:[]}]},{level:2,title:"函数柯里化",slug:"函数柯里化",children:[]},{level:2,title:"数组去重",slug:"数组去重",children:[{level:3,title:"双层for循环",slug:"双层for循环",children:[]},{level:3,title:"Array.filter() 加 indexOf",slug:"array-filter-加-indexof",children:[]},{level:3,title:"ES6 中的 Set 去重",slug:"es6-中的-set-去重",children:[]},{level:3,title:"Object 键值对",slug:"object-键值对",children:[]}]},{level:2,title:"数组扁平化",slug:"数组扁平化",children:[]},{level:2,title:"深浅拷贝",slug:"深浅拷贝",children:[{level:3,title:"浅拷贝",slug:"浅拷贝",children:[]},{level:3,title:"深拷贝",slug:"深拷贝",children:[]}]},{level:2,title:"事件总线(发布订阅)",slug:"事件总线-发布订阅",children:[{level:3,title:"观察者模式",slug:"观察者模式",children:[]},{level:3,title:"发布订阅",slug:"发布订阅",children:[]}]},{level:2,title:"解析 URL 参数为对象",slug:"解析-url-参数为对象",children:[]},{level:2,title:"字符串模板",slug:"字符串模板",children:[]},{level:2,title:"图片懒加载",slug:"图片懒加载",children:[]},{level:2,title:"函数防抖",slug:"函数防抖",children:[{level:3,title:"简单版",slug:"简单版",children:[]},{level:3,title:"最终版",slug:"最终版",children:[]}]},{level:2,title:"函数节流",slug:"函数节流",children:[]},{level:2,title:"手写 new 方法",slug:"手写-new-方法",children:[]},{level:2,title:"手写 instanceof",slug:"手写-instanceof",children:[]},{level:2,title:"手写 call 方法",slug:"手写-call-方法",children:[]},{level:2,title:"手写 bind 方法",slug:"手写-bind-方法",children:[]},{level:2,title:"手写元素拖拽",slug:"手写元素拖拽",children:[]}],filePathRelative:"note/manual.md",git:{updatedTime:1668480226e3,contributors:[{name:"Jerry Chen",email:"caffreygo@163.com",commits:9},{name:"Jinrui Chen",email:"jinrui@kooboo.cn",commits:9}]}}},4212:(n,s,a)=>{a.r(s),a.d(s,{default:()=>P});var p=a(6252);const t=(0,p.uE)('<h1 id="手写常用方法" tabindex="-1"><a class="header-anchor" href="#手写常用方法" aria-hidden="true">#</a> 手写常用方法</h1><h2 id="数据类型判断" tabindex="-1"><a class="header-anchor" href="#数据类型判断" aria-hidden="true">#</a> 数据类型判断</h2><p>🔥 typeof 可以正确识别：Undefined、Boolean、Number、String、Symbol、Function 等类型的数据，但是对于其他的都会认为是 object，比如 Null、Date 等，所以通过 typeof 来判断数据类型会不准确。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">typeof</span> <span class="token keyword">undefined</span>  <span class="token comment">// &#39;undefined&#39;</span>\n<span class="token keyword">typeof</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// &#39;symbol&#39;</span>\n<span class="token keyword">typeof</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// &#39;function&#39;</span>\n<span class="token keyword">typeof</span> <span class="token keyword">null</span>  <span class="token comment">// &#39;object&#39;</span>\n<span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// &#39;object&#39;</span>\n\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// &#39;[object Number]&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>🚀 实现一个类型判断方法：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">typeOf</span><span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">typeOf</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// &#39;String&#39;</span>\n<span class="token function">typeOf</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// &#39;Symbol&#39;</span>\n<span class="token function">typeOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// &#39;Function&#39;</span>\n<span class="token function">typeOf</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// &#39;Object&#39;</span>\n<span class="token function">typeOf</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token comment">// &#39;Null&#39;</span>\n<span class="token function">typeOf</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>  <span class="token comment">// &#39;Undefined&#39;</span>\n<span class="token function">typeOf</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// &#39;Date&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h2>',7),e=(0,p.Uk)("🌐 "),o={href:"https://www.ijerrychen.com/javascript/prototype.html",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("原型和原型链 (opens new window)"),l=(0,p.uE)('<h3 id="原型链继承" tabindex="-1"><a class="header-anchor" href="#原型链继承" aria-hidden="true">#</a> 原型链继承</h3><blockquote><p>通过构造函数的prototype指向原型对象</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;yellow&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;white&#39;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getColors</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">Doctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token class-name">Doctor</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ----------Testing----------</span>\n<span class="token keyword">const</span> doc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Doctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndoc<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;blue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> doc1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Doctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [&#39;yellow&#39;, &#39;white&#39;, &#39;black&#39;]</span>\ndoc <span class="token keyword">instanceof</span><span class="token punctuation">(</span>Doctor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>\ndoc <span class="token keyword">instanceof</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">原型链继承：</p><ul><li>🚨 原型中包含的引用类型属性将被所有实例共享；</li><li>🚨 子类在实例化的时候不能给父类构造函数传参；</li></ul></div><h3 id="借用构造函数实现继承" tabindex="-1"><a class="header-anchor" href="#借用构造函数实现继承" aria-hidden="true">#</a> 借用构造函数实现继承</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">Lawyer</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 为Lawyer实例对象添加Person的属性</span>\n    <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">Lawyer</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ----------Testing----------</span>\n<span class="token keyword">const</span> ll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lawyer</span><span class="token punctuation">(</span><span class="token string">&quot;Michael&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">借用构造函数实现继承：</p><ul><li><p>🎉 由于每次实例化子类都重新创建了一次属性，所以不再存在引用类型共享的问题</p></li><li><p>🎉 通过<code>call</code>方法调用父类构造器，允许在实例化的时候往父类传参</p></li><li><p>🚨 子类实例每次都要创建一次方法，内存开销大</p></li></ul></div><p><img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/manual/constructor.png" alt=""></p><h3 id="组合继承" tabindex="-1"><a class="header-anchor" href="#组合继承" aria-hidden="true">#</a> 组合继承</h3><p>🚀 组合继承结合了原型链和盗用构造函数，将两者的优点集中了起来。基本的思路是使用原型链继承原型上的属性和方法，而通过盗用构造函数继承实例属性。这样既可以把方法定义在原型上以实现重用，又可以让每个实例都有自己的属性。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;black&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;white&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 子类实例上声明父类实例的属性</span>\n    <span class="token function">Animal</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 原型继承，获得父类原型对象方法的访问能力</span>\n<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Dog<span class="token punctuation">;</span>\n\n<span class="token comment">// ----------Testing----------</span>\n<span class="token keyword">let</span> dog1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&#39;奶昔&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndog1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;brown&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// { name: &quot;哈赤&quot;, colors: [&quot;black&quot;, &quot;white&quot;, &quot;brown&quot;], age: 1 }</span>\n\n<span class="token keyword">let</span> dog2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&#39;哈赤&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// { name: &quot;哈赤&quot;, colors: [&quot;black&quot;, &quot;white&quot;], age: 1 }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p><img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/manual/composition.png" alt=""></p><h3 id="寄生式组合继承-✅" tabindex="-1"><a class="header-anchor" href="#寄生式组合继承-✅" aria-hidden="true">#</a> 寄生式组合继承 ✅</h3><p>🔥 组合继承已经相对完善了，但还是存在问题，它的问题就是调用了 2 次父类构造函数，第一次是在 new Animal()，第二次是在 Animal.call() 这里。</p><p>🚀 所以解决方案就是不直接调用父类构造函数给子类原型赋值，而是通过创建空函数 F 获取父类原型的副本，区别如下：</p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> Dog.prototype =  new Animal()\n</span><span class="token prefix deleted">-</span><span class="token line"> Dog.prototype.constructor = Dog\n</span></span>\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> function F() {}\n</span><span class="token prefix inserted">+</span><span class="token line"> F.prototype = Animal.prototype\n</span><span class="token prefix inserted">+</span><span class="token line"> let f = new F()\n</span><span class="token prefix inserted">+</span><span class="token line"> f.constructor = Dog\n</span><span class="token prefix inserted">+</span><span class="token line"> Dog.prototype = f\n</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>稍微封装下上面添加的代码后：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span><span class="token parameter">child<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> prototype <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>\n    prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> child\n    child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> prototype\n<span class="token punctuation">}</span>\n<span class="token function">inheritPrototype</span><span class="token punctuation">(</span>Dog<span class="token punctuation">,</span> Animal<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>🎉 其实这就是<code>Object.create</code>方法的实现，可以基于组合继承的代码改成最简单的寄生式组合继承：</p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> Dog.prototype =  new Animal()\n</span><span class="token prefix deleted">-</span><span class="token line"> Dog.prototype.constructor = Dog\n</span></span>\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> Dog.prototype =  Object.create(Animal.prototype)\n</span><span class="token prefix inserted">+</span><span class="token line"> Dog.prototype.constructor = Dog\n</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>最终代码</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;black&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;white&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 子类实例上声明父类实例的属性</span>\n    <span class="token function">Animal</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 原型继承，获得父类原型对象方法的访问能力</span>\n<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>；\n<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Dog<span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> dog1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&#39;奶昔&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndog1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;brown&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/manual/parasiticCombination.png" alt=""></p><h3 id="class-实现继承" tabindex="-1"><a class="header-anchor" href="#class-实现继承" aria-hidden="true">#</a> class 实现继承</h3>',24),u=(0,p.Uk)("🌐 "),i={href:"https://www.ijerrychen.com/javascript/class.html#%E5%B1%9E%E6%80%A7%E7%BB%A7%E6%89%BF",target:"_blank",rel:"noopener noreferrer"},k=(0,p.Uk)("ES6 class的继承原理 (opens new window)"),r=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n    <span class="token punctuation">}</span>\n    <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/manual/class.png" alt=""></p><h2 id="函数柯里化" tabindex="-1"><a class="header-anchor" href="#函数柯里化" aria-hidden="true">#</a> 函数柯里化</h2><div class="custom-container tip"><p class="custom-container-title">柯里化</p><ul><li>柯里化（Currying）是一种关于函数的高阶技术。它不仅被用于 JavaScript，还被用于其他编程语言。</li><li>柯里化是一种函数的转换，它是指将一个函数从可调用的 <code>f(a, b, c)</code> 转换为可调用的 <code>f(a)(b)(c)</code>。</li><li>柯里化不会调用函数。它只是对函数进行转换。</li></ul></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 高级柯里化实现</span>\n<span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">curried</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 闭包内保存着 args</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> fn<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>subArgs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// args 需要更新</span>\n            <span class="token keyword">return</span> <span class="token function">curried</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>subArgs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> hello <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>plus<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 8</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 8</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 8</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><blockquote><p>✅ <strong>只允许确定参数长度的函数</strong></p><p>柯里化要求函数具有固定数量的参数。</p><p>使用 rest 参数的函数，例如 <code>f(...args)</code>，不能以这种方式进行柯里化。</p><p>✅ <strong>比柯里化多一点</strong></p><p>根据定义，柯里化应该将 <code>sum(a, b, c)</code> 转换为 <code>sum(a)(b)(c)</code>。</p><p>但是，如前所述，JavaScript 中大多数的柯里化实现都是高级版的：它们使得函数可以被多参数变体调用。</p></blockquote><h2 id="数组去重" tabindex="-1"><a class="header-anchor" href="#数组去重" aria-hidden="true">#</a> 数组去重</h2><h3 id="双层for循环" tabindex="-1"><a class="header-anchor" href="#双层for循环" aria-hidden="true">#</a> 双层for循环</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">distinct</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token comment">// splice 会改变数组长度，所以要将数组长度 len 和下标 j 减一</span>\n        len<span class="token operator">--</span>\n        j<span class="token operator">--</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> arr\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>分析：双重 for 循环是比较笨拙的方法，它实现的原理很简单：先定义一个包含原始数组第一个元素的数组，然后遍历原始数组，将原始数组中的每个元素与新数组中的每个元素进行比对，如果不重复则添加到新数组中，最后返回新数组；因为它的时间复杂度是<code>O(n^2)</code>，如果数组长度很大，<code>效率会很低</code></p><h3 id="array-filter-加-indexof" tabindex="-1"><a class="header-anchor" href="#array-filter-加-indexof" aria-hidden="true">#</a> Array.filter() 加 indexOf</h3><p>ES5 利用indexOf方法返回寻第一个匹配下标的特性</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">unique2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="es6-中的-set-去重" tabindex="-1"><a class="header-anchor" href="#es6-中的-set-去重" aria-hidden="true">#</a> ES6 中的 Set 去重</h3>',14),b=(0,p.Uk)("🌐 "),m={href:"https://www.ijerrychen.com/javascript/set.html",target:"_blank",rel:"noopener noreferrer"},d=(0,p.Uk)("ES6 Set (opens new window)"),_=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">unique1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="object-键值对" tabindex="-1"><a class="header-anchor" href="#object-键值对" aria-hidden="true">#</a> Object 键值对</h3><blockquote><p>时间复杂度最小，但是空间复杂度较大</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">distinct</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword">return</span> array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> item <span class="token operator">+</span> item<span class="token punctuation">)</span>\n      <span class="token operator">?</span> <span class="token boolean">false</span>\n      <span class="token operator">:</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token keyword">typeof</span> item <span class="token operator">+</span> item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这种方法是利用一个空的 Object 对象，我们把数组的值存成 Object 的 key 值，比如 <code>Object[value1] = true</code>，在判断另一个值的时候，如果 Object[value2]存在的话，就说明该值是重复的,但是最后请注意这里<code>obj[typeof item + item] = true</code>没有直接使用<code>obj[item]</code>,是因为 因为 123 和 &#39;123&#39; 是不同的，直接使用前面的方法会判断为同一个值，因为<code>对象的键值只能是字符串</code>，所以我们可以使用 <code>typeof item + item</code> 拼成字符串作为 key 值来避免这个问题。</p><h2 id="数组扁平化" tabindex="-1"><a class="header-anchor" href="#数组扁平化" aria-hidden="true">#</a> 数组扁平化</h2><p>🔖 数组扁平化就是将 [1, [2, [3]]] 这种多层的数组拍平成一层 [1, 2, 3]。<code>Array.prototype.flat</code> 可以直接将多层数组拍平成一层：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [1, 2, 3] 参数2表示铺平的层级</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>ES5 实现：递归即可</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> item <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">flat</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>\n            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n\n<span class="token comment">// ----------Testing----------</span>\n<span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// [1, 2, 3, 4, 5]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>ES6 实现</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// [].concat(1,2,3,[4,5])   [1, 2, 3, 4, 5]</span>\n<span class="token comment">// concat的参数是以逗号分分隔的任何数据类型，一维数组会直接被解构推入到新数组当中</span>\n<span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token operator">=&gt;</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> arr\n<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// ----------Testing----------</span>\n<span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// [1, 2, 3, 4, 5]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="深浅拷贝" tabindex="-1"><a class="header-anchor" href="#深浅拷贝" aria-hidden="true">#</a> 深浅拷贝</h2><h3 id="浅拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝" aria-hidden="true">#</a> 浅拷贝</h3>',14),f=(0,p._)("p",null,"只处理第一层数据，对对象类型数据进行拷贝",-1),g=(0,p.Uk)("🌐 "),y={href:"https://www.ijerrychen.com/javascript/object.html#%E6%A3%80%E6%B5%8B%E5%B1%9E%E6%80%A7",target:"_blank",rel:"noopener noreferrer"},w=(0,p.Uk)("hasOwnProperty (opens new window)"),U=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">shallowCopy</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span>\n    \n    <span class="token keyword">let</span> newObj <span class="token operator">=</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> newObj\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝" aria-hidden="true">#</a> 深拷贝</h3><p>基础版：只考虑普通对象属性，不考虑内置对象和函数。(递归浅拷贝)</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> newObj <span class="token operator">=</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">?</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> newObj<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>复杂版深拷贝：基于简单版的基础上，还考虑了内置对象比如 Date、RegExp 等对象和函数以及解决了循环引用的问题。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isObject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> target <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> target<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 获取当前值的构造函数：获取它的类型</span>\n    <span class="token keyword">let</span> constructor <span class="token operator">=</span> target<span class="token punctuation">.</span>constructor<span class="token punctuation">;</span>\n    <span class="token comment">// 检测当前对象target是否与正则、日期格式对象匹配</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(RegExp|Date)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 创建一个新的特殊对象(正则类/日期类)的实例</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">constructor</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>  \n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 为循环引用的对象做标记</span>\n        <span class="token keyword">const</span> cloneTarget <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> prop <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                cloneTarget<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> cloneTarget<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> target<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="事件总线-发布订阅" tabindex="-1"><a class="header-anchor" href="#事件总线-发布订阅" aria-hidden="true">#</a> 事件总线(发布订阅)</h2><h3 id="观察者模式" tabindex="-1"><a class="header-anchor" href="#观察者模式" aria-hidden="true">#</a> 观察者模式</h3><p>一个对象（观察者）订阅另一个对象（主题），当主题被激活的时候，触发观察者里面的事件。（观察者自身维护着事件）</p><blockquote><p>大白话解释：当去你去医院打吊瓶（某些地方叫打点滴，就是这么严谨）的时候，医生要观察吊瓶的改变，当快打完的时候，就要通知医生来取针。这里医生就是观察者（Obeserver），吊瓶就是被观察者/主题。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>  <span class="token comment">// 被观察者</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>obs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 会有多个观察者</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">addObs</span><span class="token punctuation">(</span><span class="token parameter">ob</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>obs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ob<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 改变状态的方法</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state\n    <span class="token comment">// 通知观察者执行动作</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>obs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ob</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n      ob<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token comment">// 让观察者自身去做更新</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Obeserver</span><span class="token punctuation">{</span>  <span class="token comment">// 观察者</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">subject</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 这里观察者也有可能观察多个</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>subject<span class="token punctuation">.</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 收到通知 :</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>subject<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 的 带瓶打完啦！</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 收到通知 :</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>subject<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 的 带瓶量: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>subject<span class="token punctuation">.</span>state<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">！</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n  <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> zhiliao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> hushi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obeserver</span><span class="token punctuation">(</span><span class="token string">&quot;护士&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> yisheng <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obeserver</span><span class="token punctuation">(</span><span class="token string">&quot;医生&quot;</span><span class="token punctuation">)</span>\n\nzhiliao<span class="token punctuation">.</span><span class="token function">addObs</span><span class="token punctuation">(</span>hushi<span class="token punctuation">)</span>  <span class="token comment">// 把观察者放到被观察这的里面去</span>\nzhiliao<span class="token punctuation">.</span><span class="token function">addObs</span><span class="token punctuation">(</span>yisheng<span class="token punctuation">)</span>\nzhiliao<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><h3 id="发布订阅" tabindex="-1"><a class="header-anchor" href="#发布订阅" aria-hidden="true">#</a> 发布订阅</h3><p>订阅者把自己想要订阅的事件注册到<strong>调度中心</strong>，当发布者发布事件到调度中心（就是该事件被触发），再由调度中心统一调度订阅者注册到调度中心的处理代码。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">on</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>fn<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">off</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> tasks <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>tasks<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> index <span class="token operator">=</span> tasks<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">f</span> <span class="token operator">=&gt;</span> f <span class="token operator">===</span> fn <span class="token operator">||</span> f<span class="token punctuation">.</span>callback <span class="token operator">===</span> fn<span class="token punctuation">)</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        tasks<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">emit</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> once <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 创建副本，如果回调函数内继续注册相同事件，会造成死循环</span>\n      <span class="token keyword">let</span> tasks <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> fn <span class="token keyword">of</span> tasks<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>once<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 测试</span>\n<span class="token keyword">let</span> eventBus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">let</span> <span class="token function-variable function">fn1</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> <span class="token function-variable function">fn2</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\neventBus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">,</span> fn1<span class="token punctuation">)</span>\neventBus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">,</span> fn2<span class="token punctuation">)</span>\neventBus<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&#39;布兰&#39;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>\n<span class="token comment">// &#39;布兰 12&#39;</span>\n<span class="token comment">// &#39;hello, 布兰 12&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><h2 id="解析-url-参数为对象" tabindex="-1"><a class="header-anchor" href="#解析-url-参数为对象" aria-hidden="true">#</a> 解析 URL 参数为对象</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">parseParam</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> paramsStr <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.+\\?(.+)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 将 ? 后面的字符串取出来</span>\n  <span class="token keyword">const</span> paramsArr <span class="token operator">=</span> paramsStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将字符串以 &amp; 分割后存到数组中</span>\n  <span class="token keyword">let</span> paramsObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">// 将 params 存到对象中</span>\n  paramsArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">param</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">=</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 处理有 value 的参数</span>\n      <span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> val<span class="token punctuation">]</span> <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;=&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分割 key 和 value</span>\n      val <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解码</span>\n      val <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">:</span> val<span class="token punctuation">;</span> <span class="token comment">// 判断是否转为数字</span>\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>paramsObj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果对象有 key，则添加一个值</span>\n        paramsObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>paramsObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 如果对象没有这个 key，创建 key 并设置值</span>\n        paramsObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 处理没有 value 的参数</span>\n      paramsObj<span class="token punctuation">[</span>param<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> paramsObj<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="字符串模板" tabindex="-1"><a class="header-anchor" href="#字符串模板" aria-hidden="true">#</a> 字符串模板</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">template<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\{\\{(\\w+)\\}\\}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">// 模板字符串正则</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 判断模板里是否有模板字符串</span>\n        <span class="token keyword">const</span> name <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 查找当前模板里第一个模板字符串的字段</span>\n        template <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> data<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将第一个模板字符串渲染</span>\n        <span class="token keyword">return</span> <span class="token function">render</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归的渲染并返回渲染后的结构</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> template<span class="token punctuation">;</span> <span class="token comment">// 如果模板没有模板字符串直接返回</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>测试：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> template <span class="token operator">=</span> <span class="token string">&#39;我是{{name}}，年龄{{age}}，性别{{sex}}&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;布兰&#39;</span><span class="token punctuation">,</span>\n    age<span class="token operator">:</span> <span class="token number">12</span>\n<span class="token punctuation">}</span>\n<span class="token function">render</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 我是布兰，年龄12，性别undefined</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="图片懒加载" tabindex="-1"><a class="header-anchor" href="#图片懒加载" aria-hidden="true">#</a> 图片懒加载</h2><p>与普通的图片懒加载不同，如下这个多做了 2 个精心处理：</p><ul><li>图片全部加载完成后移除事件监听；</li><li>加载完的图片，从 imgList 移除；</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> imgList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;img&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> length <span class="token operator">=</span> imgList<span class="token punctuation">.</span>length\n\n<span class="token comment">// 修正错误，需要加上自执行</span>\n<span class="token keyword">const</span> imgLazyLoad <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>\n\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> deleteIndexList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    imgList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">img<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> rect <span class="token operator">=</span> img<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>rect<span class="token punctuation">.</span>top <span class="token operator">&lt;</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        img<span class="token punctuation">.</span>src <span class="token operator">=</span> img<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>src\n        deleteIndexList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>\n        count<span class="token operator">++</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;scroll&#39;</span><span class="token punctuation">,</span> imgLazyLoad<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    imgList <span class="token operator">=</span> imgList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">img<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>deleteIndexList<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 这里最好加上防抖处理</span>\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;scroll&#39;</span><span class="token punctuation">,</span> imgLazyLoad<span class="token punctuation">)</span>；\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div>',24),h=(0,p.Uk)("参考："),v={href:"https://juejin.cn/post/6844903856489365518#heading-19",target:"_blank",rel:"noopener noreferrer"},j=(0,p.Uk)("图片懒加载"),x=(0,p.uE)('<h2 id="函数防抖" tabindex="-1"><a class="header-anchor" href="#函数防抖" aria-hidden="true">#</a> 函数防抖</h2><blockquote><p>防抖，debounce，后执行</p></blockquote><p>触发高频事件 N 秒后只会执行一次，如果 N 秒内事件再次触发，则会重新计时。</p><h3 id="简单版" tabindex="-1"><a class="header-anchor" href="#简单版" aria-hidden="true">#</a> 简单版</h3><p>函数内部支持使用 this 和传递参数；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> timeout <span class="token operator">=</span> <span class="token number">1000</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>使用：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span>\n  action<span class="token operator">:</span> <span class="token function">debounce</span><span class="token punctuation">(</span>fn1<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nobj<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nobj<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nobj<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nobj<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// { name: &#39;hello&#39;, action: [Function (anonymous)] }</span>\n<span class="token comment">// [ 4 ]</span>\n<span class="token comment">// [Done] exited with code=0 in 3.056 seconds</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="最终版" tabindex="-1"><a class="header-anchor" href="#最终版" aria-hidden="true">#</a> 最终版</h3><p>除了支持 this 和参数外，还支持以下功能：</p><ul><li>支持立即执行；</li><li>函数可能有返回值；（只有立即执行才能拿到返回值）</li><li>支持取消；</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> immediate <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> timer<span class="token punctuation">,</span> result<span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">debouncedFn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      immediate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n      result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  debouncedFn<span class="token punctuation">.</span><span class="token function-variable function">cancel</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> debouncedFn<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>使用：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>zh-cmn-Hans<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>x-ua-compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge, chrome=1<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>debounce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">\n      <span class="token selector">#container</span> <span class="token punctuation">{</span>\n        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>\n        <span class="token property">line-height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>\n        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>\n        <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>\n        <span class="token property">background-color</span><span class="token punctuation">:</span> #444<span class="token punctuation">;</span>\n        <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点击取消debounce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n      <span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> immediate <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> timer<span class="token punctuation">,</span> result<span class="token punctuation">;</span>\n\n        <span class="token keyword">const</span> <span class="token function-variable function">debouncedFn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            immediate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n            result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n\n          timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n          <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n        debouncedFn<span class="token punctuation">.</span><span class="token function-variable function">cancel</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> debouncedFn<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n      <span class="token keyword">let</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;container&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token keyword">function</span> <span class="token function">addCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        container<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> count<span class="token operator">++</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> count<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">let</span> debounceFn <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span>addCount<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      container<span class="token punctuation">.</span><span class="token function-variable function">onmousemove</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">debounceFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        debounceFn<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br></div></div><h2 id="函数节流" tabindex="-1"><a class="header-anchor" href="#函数节流" aria-hidden="true">#</a> 函数节流</h2><p>触发高频事件，且 N 秒内只执行一次。</p><p>简单版：使用时间戳来实现，立即执行一次，然后每 N 秒执行一次。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> context<span class="token punctuation">,</span> args<span class="token punctuation">;</span>\n  <span class="token keyword">var</span> previous <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> previous <span class="token operator">&gt;</span> wait<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      previous <span class="token operator">=</span> now<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>最终版：支持取消节流；另外通过传入第三个参数，options.leading 来表示是否可以立即执行一次，opitons.trailing 表示结束调用的时候是否还要执行一次，默认都是 true。 注意设置的时候不能同时将 leading 或 trailing 设置为 false。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> timeout<span class="token punctuation">,</span> context<span class="token punctuation">,</span> args<span class="token punctuation">,</span> result<span class="token punctuation">;</span>\n  <span class="token keyword">var</span> previous <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">)</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">var</span> <span class="token function-variable function">later</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    previous <span class="token operator">=</span> options<span class="token punctuation">.</span>leading <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span> context <span class="token operator">=</span> args <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">var</span> <span class="token function-variable function">throttled</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>previous <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>leading <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> previous <span class="token operator">=</span> now<span class="token punctuation">;</span>\n    <span class="token keyword">var</span> remaining <span class="token operator">=</span> wait <span class="token operator">-</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> previous<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>remaining <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> remaining <span class="token operator">&gt;</span> wait<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      previous <span class="token operator">=</span> now<span class="token punctuation">;</span>\n      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span> context <span class="token operator">=</span> args <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>trailing <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>later<span class="token punctuation">,</span> remaining<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  throttled<span class="token punctuation">.</span><span class="token function-variable function">cancel</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    previous <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> throttled<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h2 id="手写-new-方法" tabindex="-1"><a class="header-anchor" href="#手写-new-方法" aria-hidden="true">#</a> 手写 new 方法</h2><div class="custom-container tip"><p class="custom-container-title">new 操作符</p><ol><li>首先创建了一个新对象 设置原型</li><li>将对象的原型设置为函数的prototype对象（继承父类原型上的方法）</li><li>让函数的this指向这个对象，执行构造函数的代码（添加父类的属性到新的对象上并初始化）</li><li>判断函数的返回值类型，如果是值类型，返回创建的对象。如果是对象（函数也是对象），就返回这个对象</li></ol></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token parameter">constructor<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> constructor <span class="token operator">!==</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> <span class="token string">&quot;myNew方法的第一个参数必须是一个方法&quot;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 基于constructor的原型创建一个全新的对象</span>\n  <span class="token keyword">let</span> newObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 获取传入的参数</span>\n  <span class="token comment">// let args = Array.from(arguments).slice(1);</span>\n\n  <span class="token comment">// 添加属性到新创建的newObj上, 并获取obj函数执行的结果</span>\n  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">constructor</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>newObj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 判断result类型，如果是object或者function类型，则直接返回结果</span>\n  <span class="token keyword">let</span> resultType <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>resultType <span class="token operator">===</span> <span class="token string">&#39;[object Object]&#39;</span> <span class="token operator">||</span> resultType <span class="token operator">===</span> <span class="token string">&#39;[object Function]&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> newObj<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">firtName<span class="token punctuation">,</span> lastName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>firtName <span class="token operator">=</span> firtName<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getFullName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>firtName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">myNew</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span> <span class="token string">&#39;Chen&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Jinrui&#39;</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// Chen Jinrui</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h2 id="手写-instanceof" tabindex="-1"><a class="header-anchor" href="#手写-instanceof" aria-hidden="true">#</a> 手写 instanceof</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> jc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jc <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jc <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jc <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>\n\n<span class="token keyword">function</span> <span class="token function">myInstanceOf</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> origin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">||</span> obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>__proto__ <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> origin<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        obj <span class="token operator">=</span> obj<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myInstanceOf</span><span class="token punctuation">(</span>jc<span class="token punctuation">,</span> Person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myInstanceOf</span><span class="token punctuation">(</span>jc<span class="token punctuation">,</span> Object<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myInstanceOf</span><span class="token punctuation">(</span>jc<span class="token punctuation">,</span> Array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="手写-call-方法" tabindex="-1"><a class="header-anchor" href="#手写-call-方法" aria-hidden="true">#</a> 手写 call 方法</h2><blockquote><p>不得使用 apply、bind 函数辅助</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myCall</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  ctx <span class="token operator">=</span> ctx <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> globalThis <span class="token operator">:</span> <span class="token function">Object</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> key <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;fn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    enumerable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    value<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span>  <span class="token comment">// method.myCall 时 this 即为 method 函数</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> result <span class="token operator">=</span> ctx<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">delete</span> ctx<span class="token punctuation">.</span>key<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">myCall</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Object [global] 1 2;  3;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">myCall</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// {} 2 2;  4</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">myCall</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [Number: 1] 2 2; 4</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="手写-bind-方法" tabindex="-1"><a class="header-anchor" href="#手写-bind-方法" aria-hidden="true">#</a> 手写 bind 方法</h2>',29),q=(0,p._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,p._)("pre",{class:"language-javascript"},[(0,p._)("code",null,[(0,p._)("span",{class:"token class-name"},"Function"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("prototype"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function-variable function"},"myBind"),(0,p.Uk)(),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(),(0,p._)("span",{class:"token keyword"},"function"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token parameter"},"ctx"),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n  "),(0,p._)("span",{class:"token keyword"},"var"),(0,p.Uk)(" fn "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(),(0,p._)("span",{class:"token keyword"},"this"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n  "),(0,p._)("span",{class:"token keyword"},"return"),(0,p.Uk)(),(0,p._)("span",{class:"token keyword"},"function"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token parameter"},[(0,p._)("span",{class:"token operator"},"..."),(0,p.Uk)("args")]),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token keyword"},"return"),(0,p.Uk)(),(0,p._)("span",{class:"token function"},"fn"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"apply"),(0,p._)("span",{class:"token punctuation"},"("),(0,p.Uk)("ctx"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(" args"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n  "),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n\n"),(0,p._)("span",{class:"token keyword"},"function"),(0,p.Uk)(),(0,p._)("span",{class:"token function"},"fn"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token parameter"},[(0,p.Uk)("a"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(" b")]),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n  console"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"log"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token keyword"},"this"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(" a"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(" b"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n  "),(0,p._)("span",{class:"token keyword"},"return"),(0,p.Uk)(" a "),(0,p._)("span",{class:"token operator"},"+"),(0,p.Uk)(" b"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p.Uk)("\n\n"),(0,p._)("span",{class:"token keyword"},"const"),(0,p.Uk)(" newFn "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(" fn"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"myBind"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token punctuation"},"{"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n\nconsole"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"log"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token function"},"newFn"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token number"},"2"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(),(0,p._)("span",{class:"token number"},"2"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("  "),(0,p._)("span",{class:"token comment"},"// {} 2 2;  4;"),(0,p.Uk)("\n")])]),(0,p._)("div",{class:"line-numbers"},[(0,p._)("span",{class:"line-number"},"1"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"2"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"3"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"4"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"5"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"6"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"7"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"8"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"9"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"10"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"11"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"12"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"13"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"14"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"15"),(0,p._)("br")])],-1),O=(0,p._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,p._)("pre",{class:"language-javascript"},[(0,p._)("code",null,[(0,p._)("span",{class:"token class-name"},"Function"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("prototype"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function-variable function"},"myBind"),(0,p.Uk)(),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(),(0,p._)("span",{class:"token keyword"},"function"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token parameter"},[(0,p.Uk)("ctx"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(),(0,p._)("span",{class:"token operator"},"..."),(0,p.Uk)("args")]),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n  "),(0,p._)("span",{class:"token keyword"},"var"),(0,p.Uk)(" fn "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(),(0,p._)("span",{class:"token keyword"},"this"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n  "),(0,p._)("span",{class:"token keyword"},"return"),(0,p.Uk)(),(0,p._)("span",{class:"token keyword"},"function"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token parameter"},[(0,p._)("span",{class:"token operator"},"..."),(0,p.Uk)("args1")]),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token keyword"},"return"),(0,p.Uk)(),(0,p._)("span",{class:"token function"},"fn"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"call"),(0,p._)("span",{class:"token punctuation"},"("),(0,p.Uk)("ctx"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(),(0,p._)("span",{class:"token operator"},"..."),(0,p.Uk)("args"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(),(0,p._)("span",{class:"token operator"},"..."),(0,p.Uk)("args1"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n  "),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n\n"),(0,p._)("span",{class:"token keyword"},"function"),(0,p.Uk)(),(0,p._)("span",{class:"token function"},"fn"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token parameter"},[(0,p.Uk)("a"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(" b")]),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n  console"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"log"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token keyword"},"this"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(" a"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(" b"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n  "),(0,p._)("span",{class:"token keyword"},"return"),(0,p.Uk)(" a "),(0,p._)("span",{class:"token operator"},"+"),(0,p.Uk)(" b"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p.Uk)("\n\n"),(0,p._)("span",{class:"token keyword"},"const"),(0,p.Uk)(" newFn "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(" fn"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"myBind"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token punctuation"},"{"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(),(0,p._)("span",{class:"token number"},"1"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n\nconsole"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"log"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token function"},"newFn"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token number"},"2"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("  "),(0,p._)("span",{class:"token comment"},"// {} 1 2;  3;"),(0,p.Uk)("\n")])]),(0,p._)("div",{class:"line-numbers"},[(0,p._)("span",{class:"line-number"},"1"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"2"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"3"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"4"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"5"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"6"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"7"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"8"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"9"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"10"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"11"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"12"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"13"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"14"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"15"),(0,p._)("br")])],-1),F=(0,p._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,p._)("pre",{class:"language-javascript"},[(0,p._)("code",null,[(0,p._)("span",{class:"token keyword"},"var"),(0,p.Uk)(" slice "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(),(0,p._)("span",{class:"token class-name"},"Array"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("prototype"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("splice\n\n"),(0,p._)("span",{class:"token class-name"},"Function"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("prototype"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function-variable function"},"myBind"),(0,p.Uk)(),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(),(0,p._)("span",{class:"token keyword"},"function"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token parameter"},"ctx"),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token keyword"},"var"),(0,p.Uk)(" fn "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(),(0,p._)("span",{class:"token keyword"},"this"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token comment"},"// 因为arguments 不是数组，没有slice方法，所以用slice.call(arguments)"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token keyword"},"var"),(0,p.Uk)(" args "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(),(0,p._)("span",{class:"token function"},"slice"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"call"),(0,p._)("span",{class:"token punctuation"},"("),(0,p.Uk)("arguments"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(),(0,p._)("span",{class:"token number"},"1"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)(),(0,p._)("span",{class:"token comment"},"// 获取除了第0个参数this,之外的所有其他参数"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token keyword"},"if"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token keyword"},"typeof"),(0,p.Uk)(" fn "),(0,p._)("span",{class:"token operator"},"!=="),(0,p.Uk)(),(0,p._)("span",{class:"token string"},'"function"'),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n        "),(0,p._)("span",{class:"token keyword"},"throw"),(0,p.Uk)(),(0,p._)("span",{class:"token keyword"},"new"),(0,p.Uk)(),(0,p._)("span",{class:"token class-name"},"Error"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token string"},'"bind必须调用在函数上"'),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token punctuation"},"}"),(0,p.Uk)("\n\n    "),(0,p._)("span",{class:"token keyword"},"return"),(0,p.Uk)(),(0,p._)("span",{class:"token keyword"},"function"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n        "),(0,p._)("span",{class:"token keyword"},"var"),(0,p.Uk)(" args2 "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(),(0,p._)("span",{class:"token function"},"slice"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"call"),(0,p._)("span",{class:"token punctuation"},"("),(0,p.Uk)("arguments"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(),(0,p._)("span",{class:"token number"},"0"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)(),(0,p._)("span",{class:"token comment"},"// 获取所有参数"),(0,p.Uk)("\n        "),(0,p._)("span",{class:"token comment"},"// 用apply传数组，合并两次的参数数组，用apply传"),(0,p.Uk)("\n        "),(0,p._)("span",{class:"token keyword"},"return"),(0,p.Uk)(),(0,p._)("span",{class:"token function"},"fn"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"apply"),(0,p._)("span",{class:"token punctuation"},"("),(0,p.Uk)("ctx"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(" args"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"concat"),(0,p._)("span",{class:"token punctuation"},"("),(0,p.Uk)("args2"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n\n"),(0,p._)("span",{class:"token keyword"},"function"),(0,p.Uk)(),(0,p._)("span",{class:"token function"},"fn"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token parameter"},[(0,p.Uk)("a"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(" b")]),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n    console"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"log"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token keyword"},"this"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(" a"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(" b"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token keyword"},"return"),(0,p.Uk)(" a "),(0,p._)("span",{class:"token operator"},"+"),(0,p.Uk)(" b"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p.Uk)("\n\n"),(0,p._)("span",{class:"token keyword"},"const"),(0,p.Uk)(" newFn "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(" fn"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"myBind"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token punctuation"},"{"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(),(0,p._)("span",{class:"token number"},"1"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n\nconsole"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"log"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token function"},"newFn"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token number"},"2"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)(),(0,p._)("span",{class:"token comment"},"// {} 1 2;  3;"),(0,p.Uk)("\n")])]),(0,p._)("div",{class:"line-numbers"},[(0,p._)("span",{class:"line-number"},"1"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"2"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"3"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"4"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"5"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"6"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"7"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"8"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"9"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"10"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"11"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"12"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"13"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"14"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"15"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"16"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"17"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"18"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"19"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"20"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"21"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"22"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"23"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"24"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"25"),(0,p._)("br")])],-1),A=(0,p._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,p._)("pre",{class:"language-javascript"},[(0,p._)("code",null,[(0,p._)("span",{class:"token class-name"},"Function"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("prototype"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function-variable function"},"myBind"),(0,p.Uk)(),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(),(0,p._)("span",{class:"token keyword"},"function"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token parameter"},[(0,p.Uk)("ctx"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(),(0,p._)("span",{class:"token operator"},"..."),(0,p.Uk)("args")]),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token comment"},"// this 就是函数"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token keyword"},"var"),(0,p.Uk)(" fn "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(),(0,p._)("span",{class:"token keyword"},"this"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token keyword"},"function"),(0,p.Uk)(),(0,p._)("span",{class:"token function"},"resultFn"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token parameter"},[(0,p._)("span",{class:"token operator"},"..."),(0,p.Uk)("args2")]),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n        "),(0,p._)("span",{class:"token comment"},"// 也可以用这句话判断是否用了 new"),(0,p.Uk)("\n        "),(0,p._)("span",{class:"token comment"},"// resultFn.prototype.isPrototypeOf(this); "),(0,p.Uk)("\n        "),(0,p._)("span",{class:"token comment"},"// 判断是否用了 new, 对 this 做不同处理"),(0,p.Uk)("\n        "),(0,p._)("span",{class:"token keyword"},"return"),(0,p.Uk)(),(0,p._)("span",{class:"token function"},"fn"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"call"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token keyword"},"this"),(0,p.Uk)(),(0,p._)("span",{class:"token keyword"},"instanceof"),(0,p.Uk)(),(0,p._)("span",{class:"token class-name"},"resultFn"),(0,p.Uk)(),(0,p._)("span",{class:"token operator"},"?"),(0,p.Uk)(),(0,p._)("span",{class:"token keyword"},"this"),(0,p.Uk)(),(0,p._)("span",{class:"token operator"},":"),(0,p.Uk)(" ctx"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(),(0,p._)("span",{class:"token operator"},"..."),(0,p.Uk)("args"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(),(0,p._)("span",{class:"token operator"},"..."),(0,p.Uk)("args2"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token punctuation"},"}"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token comment"},"// 重新绑定原型"),(0,p.Uk)("\n    resultFn"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("prototype "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(" fn"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("prototype"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token keyword"},"return"),(0,p.Uk)(" resultFn"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n\n"),(0,p._)("span",{class:"token keyword"},"function"),(0,p.Uk)(),(0,p._)("span",{class:"token function"},"fn"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token parameter"},[(0,p.Uk)("a"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(" b")]),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token keyword"},"this"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("a "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(" a"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token keyword"},"this"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("b "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(" b"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p.Uk)("\n\n"),(0,p._)("span",{class:"token keyword"},"const"),(0,p.Uk)(" newFn "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(" fn"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"myBind"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token punctuation"},"{"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(),(0,p._)("span",{class:"token number"},"1"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\nconsole"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"log"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token keyword"},"new"),(0,p.Uk)(),(0,p._)("span",{class:"token class-name"},"newFn"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token number"},"2"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("  "),(0,p._)("span",{class:"token comment"},"// fn { a: 1, b: 2 }"),(0,p.Uk)("\n")])]),(0,p._)("div",{class:"line-numbers"},[(0,p._)("span",{class:"line-number"},"1"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"2"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"3"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"4"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"5"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"6"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"7"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"8"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"9"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"10"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"11"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"12"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"13"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"14"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"15"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"16"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"17"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"18"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"19"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"20"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"21"),(0,p._)("br")])],-1),D=(0,p._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,p._)("pre",{class:"language-javascript"},[(0,p._)("code",null,[(0,p._)("span",{class:"token keyword"},"var"),(0,p.Uk)(" slice "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(),(0,p._)("span",{class:"token class-name"},"Array"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("prototype"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("slice"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n\n"),(0,p._)("span",{class:"token class-name"},"Function"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("prototype"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function-variable function"},"myBind"),(0,p.Uk)(),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(),(0,p._)("span",{class:"token keyword"},"function"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token parameter"},"ctx"),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token keyword"},"var"),(0,p.Uk)(" args "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(),(0,p._)("span",{class:"token function"},"slice"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"call"),(0,p._)("span",{class:"token punctuation"},"("),(0,p.Uk)("arguments"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(),(0,p._)("span",{class:"token number"},"1"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token keyword"},"var"),(0,p.Uk)(" fn "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(),(0,p._)("span",{class:"token keyword"},"this"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token keyword"},"if"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token keyword"},"typeof"),(0,p.Uk)(" fn "),(0,p._)("span",{class:"token operator"},"!=="),(0,p.Uk)(),(0,p._)("span",{class:"token string"},'"function"'),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n        "),(0,p._)("span",{class:"token keyword"},"throw"),(0,p.Uk)(),(0,p._)("span",{class:"token keyword"},"new"),(0,p.Uk)(),(0,p._)("span",{class:"token class-name"},"Error"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token string"},'"bind 必须调用在函数身上"'),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token punctuation"},"}"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token keyword"},"function"),(0,p.Uk)(),(0,p._)("span",{class:"token function"},"resultFn"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n        "),(0,p._)("span",{class:"token keyword"},"var"),(0,p.Uk)(" args2 "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(),(0,p._)("span",{class:"token function"},"slice"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"call"),(0,p._)("span",{class:"token punctuation"},"("),(0,p.Uk)("arguments"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(),(0,p._)("span",{class:"token number"},"0"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n        "),(0,p._)("span",{class:"token keyword"},"return"),(0,p.Uk)(),(0,p._)("span",{class:"token function"},"fn"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"apply"),(0,p._)("span",{class:"token punctuation"},"("),(0,p.Uk)("\n            resultFn"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("prototype"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"isPrototypeOf"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token keyword"},"this"),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)(),(0,p._)("span",{class:"token operator"},"?"),(0,p.Uk)(),(0,p._)("span",{class:"token keyword"},"this"),(0,p.Uk)(),(0,p._)("span",{class:"token operator"},":"),(0,p.Uk)(" ctx"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)("\n            args"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"concat"),(0,p._)("span",{class:"token punctuation"},"("),(0,p.Uk)("args2"),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)("\n        "),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token punctuation"},"}"),(0,p.Uk)("\n    resultFn"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("prototype "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(" fn"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("prototype"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token keyword"},"return"),(0,p.Uk)(" resultFn"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n\n"),(0,p._)("span",{class:"token keyword"},"function"),(0,p.Uk)(),(0,p._)("span",{class:"token function"},"fn"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token parameter"},[(0,p.Uk)("a"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(" b")]),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token keyword"},"this"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("a "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(" a"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token keyword"},"this"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("b "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(" b"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p.Uk)("\n\n"),(0,p._)("span",{class:"token keyword"},"const"),(0,p.Uk)(" newFn "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(" fn"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"myBind"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token punctuation"},"{"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(),(0,p._)("span",{class:"token number"},"3"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n\nconsole"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"log"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token keyword"},"new"),(0,p.Uk)(),(0,p._)("span",{class:"token class-name"},"newFn"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token number"},"4"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("  "),(0,p._)("span",{class:"token comment"},"// fn { a: 3, b: 4 }"),(0,p.Uk)("\n")])]),(0,p._)("div",{class:"line-numbers"},[(0,p._)("span",{class:"line-number"},"1"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"2"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"3"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"4"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"5"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"6"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"7"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"8"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"9"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"10"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"11"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"12"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"13"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"14"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"15"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"16"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"17"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"18"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"19"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"20"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"21"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"22"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"23"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"24"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"25"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"26"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"27"),(0,p._)("br")])],-1),E=(0,p._)("h2",{id:"手写元素拖拽",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#手写元素拖拽","aria-hidden":"true"},"#"),(0,p.Uk)(" 手写元素拖拽")],-1),N=(0,p._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,p._)("pre",{class:"language-javascript"},[(0,p._)("code",null,[(0,p._)("span",{class:"token keyword"},"const"),(0,p.Uk)(" list "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(" document"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"querySelector"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token string"},'".list"'),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n"),(0,p._)("span",{class:"token keyword"},"let"),(0,p.Uk)(" sourceNode"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\nlist"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function-variable function"},"ondragstart"),(0,p.Uk)(),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token parameter"},"e"),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)(),(0,p._)("span",{class:"token operator"},"=>"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token comment"},"// 拖拽元素样式就是拖拽发生时的样式，立即修改会导致拖拽的也跟着发生变化"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token function"},"setTimeout"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)(),(0,p._)("span",{class:"token operator"},"=>"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n        e"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("target"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("classList"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"add"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token string"},'"moving"'),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(),(0,p._)("span",{class:"token number"},"0"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    sourceNode "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(" e"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("target"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token comment"},"// 拖拽的默认行为是复制，可以改成移动"),(0,p.Uk)("\n    e"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("dataTransfer"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("effectAllowed "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(),(0,p._)("span",{class:"token string"},'"move"'),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\nlist"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function-variable function"},"ondragenter"),(0,p.Uk)(),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token parameter"},"e"),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)(),(0,p._)("span",{class:"token operator"},"=>"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n    e"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"preventDefault"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token keyword"},"if"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"("),(0,p.Uk)("e"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("target "),(0,p._)("span",{class:"token operator"},"==="),(0,p.Uk)(" list "),(0,p._)("span",{class:"token operator"},"||"),(0,p.Uk)(" e"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("target "),(0,p._)("span",{class:"token operator"},"==="),(0,p.Uk)(" sourceNode"),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n        "),(0,p._)("span",{class:"token keyword"},"return"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token punctuation"},"}"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token keyword"},"const"),(0,p.Uk)(" children "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(" Array"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"from"),(0,p._)("span",{class:"token punctuation"},"("),(0,p.Uk)("list"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("children"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token keyword"},"const"),(0,p.Uk)(" sourceIndex "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(" children"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"indexOf"),(0,p._)("span",{class:"token punctuation"},"("),(0,p.Uk)("sourceNode"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token keyword"},"const"),(0,p.Uk)(" targetIndex "),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(" children"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"indexOf"),(0,p._)("span",{class:"token punctuation"},"("),(0,p.Uk)("e"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("target"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token keyword"},"if"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"("),(0,p.Uk)("sourceIndex "),(0,p._)("span",{class:"token operator"},"<"),(0,p.Uk)(" targetIndex"),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n        list"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"insertBefore"),(0,p._)("span",{class:"token punctuation"},"("),(0,p.Uk)("sourceNode"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(" e"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("target"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("nextElementSibling"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token punctuation"},"}"),(0,p.Uk)(),(0,p._)("span",{class:"token keyword"},"else"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n        list"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"insertBefore"),(0,p._)("span",{class:"token punctuation"},"("),(0,p.Uk)("sourceNode"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)(" e"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("target"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token punctuation"},"}"),(0,p.Uk)("\n"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n"),(0,p._)("span",{class:"token comment"},"// 默认行为下很多元素不允许元素拖动到自己身上，导致鼠标放开的时候元素动画回到了原始位置"),(0,p.Uk)("\n"),(0,p._)("span",{class:"token comment"},"// 通过阻止 ondragenter、ondragover 的默认行为解决"),(0,p.Uk)("\nlist"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function-variable function"},"ondragover"),(0,p.Uk)(),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token parameter"},"e"),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)(),(0,p._)("span",{class:"token operator"},"=>"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n    e"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"preventDefault"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\nlist"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function-variable function"},"ondragend"),(0,p.Uk)(),(0,p._)("span",{class:"token operator"},"="),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token parameter"},"e"),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)(),(0,p._)("span",{class:"token operator"},"=>"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n    e"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("target"),(0,p._)("span",{class:"token punctuation"},"."),(0,p.Uk)("classList"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"remove"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token string"},'"moving"'),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n")])]),(0,p._)("div",{class:"line-numbers"},[(0,p._)("span",{class:"line-number"},"1"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"2"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"3"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"4"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"5"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"6"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"7"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"8"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"9"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"10"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"11"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"12"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"13"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"14"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"15"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"16"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"17"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"18"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"19"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"20"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"21"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"22"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"23"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"24"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"25"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"26"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"27"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"28"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"29"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"30"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"31"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"32"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"33"),(0,p._)("br")])],-1),S=(0,p._)("div",{class:"language-css ext-css line-numbers-mode"},[(0,p._)("pre",{class:"language-css"},[(0,p._)("code",null,[(0,p._)("span",{class:"token selector"},".list"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token property"},"list-style"),(0,p._)("span",{class:"token punctuation"},":"),(0,p.Uk)(" none"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token property"},"margin"),(0,p._)("span",{class:"token punctuation"},":"),(0,p.Uk)(" 0 auto"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token property"},"padding"),(0,p._)("span",{class:"token punctuation"},":"),(0,p.Uk)(" 0"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token property"},"width"),(0,p._)("span",{class:"token punctuation"},":"),(0,p.Uk)(" 50vw"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p.Uk)("\n"),(0,p._)("span",{class:"token selector"},".list-item"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token property"},"background-color"),(0,p._)("span",{class:"token punctuation"},":"),(0,p.Uk)(" #34495e"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token property"},"margin-bottom"),(0,p._)("span",{class:"token punctuation"},":"),(0,p.Uk)(" 10px"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token property"},"cursor"),(0,p._)("span",{class:"token punctuation"},":"),(0,p.Uk)(" move"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token property"},"user-select"),(0,p._)("span",{class:"token punctuation"},":"),(0,p.Uk)(" none"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token property"},"height"),(0,p._)("span",{class:"token punctuation"},":"),(0,p.Uk)(" 45px"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token property"},"line-height"),(0,p._)("span",{class:"token punctuation"},":"),(0,p.Uk)(" 45px"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token property"},"color"),(0,p._)("span",{class:"token punctuation"},":"),(0,p.Uk)(" white"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token property"},"text-align"),(0,p._)("span",{class:"token punctuation"},":"),(0,p.Uk)(" center"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token property"},"border-radius"),(0,p._)("span",{class:"token punctuation"},":"),(0,p.Uk)(" 4px"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token property"},"box-sizing"),(0,p._)("span",{class:"token punctuation"},":"),(0,p.Uk)(" border-box"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p.Uk)("\n"),(0,p._)("span",{class:"token selector"},".list-item.moving"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token property"},"background"),(0,p._)("span",{class:"token punctuation"},":"),(0,p.Uk)(" transparent"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token property"},"color"),(0,p._)("span",{class:"token punctuation"},":"),(0,p.Uk)(" transparent"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token property"},"border"),(0,p._)("span",{class:"token punctuation"},":"),(0,p.Uk)(" 1px dashed #ccc"),(0,p._)("span",{class:"token punctuation"},";"),(0,p.Uk)("\n"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p.Uk)("\n")])]),(0,p._)("div",{class:"line-numbers"},[(0,p._)("span",{class:"line-number"},"1"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"2"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"3"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"4"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"5"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"6"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"7"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"8"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"9"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"10"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"11"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"12"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"13"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"14"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"15"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"16"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"17"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"18"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"19"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"20"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"21"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"22"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"23"),(0,p._)("br")])],-1),T=(0,p._)("div",{class:"language-html ext-html line-numbers-mode"},[(0,p._)("pre",{class:"language-html"},[(0,p._)("code",null,[(0,p._)("span",{class:"token tag"},[(0,p._)("span",{class:"token tag"},[(0,p._)("span",{class:"token punctuation"},"<"),(0,p.Uk)("ul")]),(0,p.Uk)(),(0,p._)("span",{class:"token attr-name"},"class"),(0,p._)("span",{class:"token attr-value"},[(0,p._)("span",{class:"token punctuation attr-equals"},"="),(0,p._)("span",{class:"token punctuation"},'"'),(0,p.Uk)("list"),(0,p._)("span",{class:"token punctuation"},'"')]),(0,p._)("span",{class:"token punctuation"},">")]),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token tag"},[(0,p._)("span",{class:"token tag"},[(0,p._)("span",{class:"token punctuation"},"<"),(0,p.Uk)("li")]),(0,p.Uk)(),(0,p._)("span",{class:"token attr-name"},"draggable"),(0,p._)("span",{class:"token attr-value"},[(0,p._)("span",{class:"token punctuation attr-equals"},"="),(0,p._)("span",{class:"token punctuation"},'"'),(0,p.Uk)("true"),(0,p._)("span",{class:"token punctuation"},'"')]),(0,p.Uk)(),(0,p._)("span",{class:"token attr-name"},"class"),(0,p._)("span",{class:"token attr-value"},[(0,p._)("span",{class:"token punctuation attr-equals"},"="),(0,p._)("span",{class:"token punctuation"},'"'),(0,p.Uk)("list-item"),(0,p._)("span",{class:"token punctuation"},'"')]),(0,p._)("span",{class:"token punctuation"},">")]),(0,p.Uk)("1"),(0,p._)("span",{class:"token tag"},[(0,p._)("span",{class:"token tag"},[(0,p._)("span",{class:"token punctuation"},"</"),(0,p.Uk)("li")]),(0,p._)("span",{class:"token punctuation"},">")]),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token tag"},[(0,p._)("span",{class:"token tag"},[(0,p._)("span",{class:"token punctuation"},"<"),(0,p.Uk)("li")]),(0,p.Uk)(),(0,p._)("span",{class:"token attr-name"},"draggable"),(0,p._)("span",{class:"token attr-value"},[(0,p._)("span",{class:"token punctuation attr-equals"},"="),(0,p._)("span",{class:"token punctuation"},'"'),(0,p.Uk)("true"),(0,p._)("span",{class:"token punctuation"},'"')]),(0,p.Uk)(),(0,p._)("span",{class:"token attr-name"},"class"),(0,p._)("span",{class:"token attr-value"},[(0,p._)("span",{class:"token punctuation attr-equals"},"="),(0,p._)("span",{class:"token punctuation"},'"'),(0,p.Uk)("list-item"),(0,p._)("span",{class:"token punctuation"},'"')]),(0,p._)("span",{class:"token punctuation"},">")]),(0,p.Uk)("2"),(0,p._)("span",{class:"token tag"},[(0,p._)("span",{class:"token tag"},[(0,p._)("span",{class:"token punctuation"},"</"),(0,p.Uk)("li")]),(0,p._)("span",{class:"token punctuation"},">")]),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token tag"},[(0,p._)("span",{class:"token tag"},[(0,p._)("span",{class:"token punctuation"},"<"),(0,p.Uk)("li")]),(0,p.Uk)(),(0,p._)("span",{class:"token attr-name"},"draggable"),(0,p._)("span",{class:"token attr-value"},[(0,p._)("span",{class:"token punctuation attr-equals"},"="),(0,p._)("span",{class:"token punctuation"},'"'),(0,p.Uk)("true"),(0,p._)("span",{class:"token punctuation"},'"')]),(0,p.Uk)(),(0,p._)("span",{class:"token attr-name"},"class"),(0,p._)("span",{class:"token attr-value"},[(0,p._)("span",{class:"token punctuation attr-equals"},"="),(0,p._)("span",{class:"token punctuation"},'"'),(0,p.Uk)("list-item"),(0,p._)("span",{class:"token punctuation"},'"')]),(0,p._)("span",{class:"token punctuation"},">")]),(0,p.Uk)("3"),(0,p._)("span",{class:"token tag"},[(0,p._)("span",{class:"token tag"},[(0,p._)("span",{class:"token punctuation"},"</"),(0,p.Uk)("li")]),(0,p._)("span",{class:"token punctuation"},">")]),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token tag"},[(0,p._)("span",{class:"token tag"},[(0,p._)("span",{class:"token punctuation"},"<"),(0,p.Uk)("li")]),(0,p.Uk)(),(0,p._)("span",{class:"token attr-name"},"draggable"),(0,p._)("span",{class:"token attr-value"},[(0,p._)("span",{class:"token punctuation attr-equals"},"="),(0,p._)("span",{class:"token punctuation"},'"'),(0,p.Uk)("true"),(0,p._)("span",{class:"token punctuation"},'"')]),(0,p.Uk)(),(0,p._)("span",{class:"token attr-name"},"class"),(0,p._)("span",{class:"token attr-value"},[(0,p._)("span",{class:"token punctuation attr-equals"},"="),(0,p._)("span",{class:"token punctuation"},'"'),(0,p.Uk)("list-item"),(0,p._)("span",{class:"token punctuation"},'"')]),(0,p._)("span",{class:"token punctuation"},">")]),(0,p.Uk)("4"),(0,p._)("span",{class:"token tag"},[(0,p._)("span",{class:"token tag"},[(0,p._)("span",{class:"token punctuation"},"</"),(0,p.Uk)("li")]),(0,p._)("span",{class:"token punctuation"},">")]),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token tag"},[(0,p._)("span",{class:"token tag"},[(0,p._)("span",{class:"token punctuation"},"<"),(0,p.Uk)("li")]),(0,p.Uk)(),(0,p._)("span",{class:"token attr-name"},"draggable"),(0,p._)("span",{class:"token attr-value"},[(0,p._)("span",{class:"token punctuation attr-equals"},"="),(0,p._)("span",{class:"token punctuation"},'"'),(0,p.Uk)("true"),(0,p._)("span",{class:"token punctuation"},'"')]),(0,p.Uk)(),(0,p._)("span",{class:"token attr-name"},"class"),(0,p._)("span",{class:"token attr-value"},[(0,p._)("span",{class:"token punctuation attr-equals"},"="),(0,p._)("span",{class:"token punctuation"},'"'),(0,p.Uk)("list-item"),(0,p._)("span",{class:"token punctuation"},'"')]),(0,p._)("span",{class:"token punctuation"},">")]),(0,p.Uk)("5"),(0,p._)("span",{class:"token tag"},[(0,p._)("span",{class:"token tag"},[(0,p._)("span",{class:"token punctuation"},"</"),(0,p.Uk)("li")]),(0,p._)("span",{class:"token punctuation"},">")]),(0,p.Uk)("\n"),(0,p._)("span",{class:"token tag"},[(0,p._)("span",{class:"token tag"},[(0,p._)("span",{class:"token punctuation"},"</"),(0,p.Uk)("ul")]),(0,p._)("span",{class:"token punctuation"},">")]),(0,p.Uk)("\n")])]),(0,p._)("div",{class:"line-numbers"},[(0,p._)("span",{class:"line-number"},"1"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"2"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"3"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"4"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"5"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"6"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"7"),(0,p._)("br")])],-1),P={render:function(n,s){const a=(0,p.up)("OutboundLink"),P=(0,p.up)("CodeGroupItem"),L=(0,p.up)("CodeGroup");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("blockquote",null,[(0,p._)("p",null,[e,(0,p._)("a",o,[c,(0,p.Wm)(a)])])]),l,(0,p._)("blockquote",null,[(0,p._)("p",null,[u,(0,p._)("a",i,[k,(0,p.Wm)(a)])])]),r,(0,p._)("blockquote",null,[(0,p._)("p",null,[b,(0,p._)("a",m,[d,(0,p.Wm)(a)])])]),_,(0,p._)("blockquote",null,[f,(0,p._)("p",null,[g,(0,p._)("a",y,[w,(0,p.Wm)(a)])])]),U,(0,p._)("p",null,[h,(0,p._)("a",v,[j,(0,p.Wm)(a)])]),x,(0,p.Wm)(L,null,{default:(0,p.w5)((()=>[(0,p.Wm)(P,{title:"简单版"},{default:(0,p.w5)((()=>[q])),_:1}),(0,p.Wm)(P,{title:"✅ 可以预传参数"},{default:(0,p.w5)((()=>[O])),_:1}),(0,p.Wm)(P,{title:"兼容写法"},{default:(0,p.w5)((()=>[F])),_:1}),(0,p.Wm)(P,{title:"✅ 支持 new"},{default:(0,p.w5)((()=>[A])),_:1}),(0,p.Wm)(P,{title:"更兼容的写法"},{default:(0,p.w5)((()=>[D])),_:1})])),_:1}),E,(0,p.Wm)(L,null,{default:(0,p.w5)((()=>[(0,p.Wm)(P,{title:"script"},{default:(0,p.w5)((()=>[N])),_:1}),(0,p.Wm)(P,{title:"css"},{default:(0,p.w5)((()=>[S])),_:1}),(0,p.Wm)(P,{title:"html"},{default:(0,p.w5)((()=>[T])),_:1})])),_:1})],64)}}}}]);