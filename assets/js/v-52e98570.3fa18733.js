"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9791],{8305:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-52e98570",path:"/mysql/lock.html",title:"锁机制",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"储存引擎",slug:"储存引擎",children:[]},{level:2,title:"事务处理",slug:"事务处理",children:[{level:3,title:"行锁",slug:"行锁",children:[]},{level:3,title:"非索引阻塞",slug:"非索引阻塞",children:[]},{level:3,title:"范围锁",slug:"范围锁",children:[]}]},{level:2,title:"悲观锁",slug:"悲观锁",children:[]},{level:2,title:"乐观锁",slug:"乐观锁",children:[]},{level:2,title:"表锁机制",slug:"表锁机制",children:[{level:3,title:"读锁READ",slug:"读锁read",children:[]},{level:3,title:"写锁WRITE",slug:"写锁write",children:[]}]}],filePathRelative:"mysql/lock.md",git:{updatedTime:1650545555e3,contributors:[{name:"Jinrui Chen",email:"jinrui@kooboo.cn",commits:1}]}}},4083:(s,n,a)=>{a.r(n),a.d(n,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="锁机制" tabindex="-1"><a class="header-anchor" href="#锁机制" aria-hidden="true">#</a> 锁机制</h1><p>🔖 因为MySQL支持多线程方式，所以可以同时处理多个客户端请求。有时为了防止客户端同时修改数据，我们使用<strong>锁操作</strong>完成。</p><blockquote><p>比如一个用户在修改数据，另一个用户也要修改该条数据，我们可以让第一个用户独占这个表记录，等他操作完再让第二个用户操作。</p></blockquote><p><code>SET autocommit = 0</code> : 全局开启事务，必须commit才能提交。</p><h2 id="储存引擎" tabindex="-1"><a class="header-anchor" href="#储存引擎" aria-hidden="true">#</a> 储存引擎</h2><p><code>InnoDB</code> 是主流储存引擎并支持行级锁的，有更高的并发处理性能，下面来演示<strong>行锁</strong>的运行过程。<code>MyIsam</code>引擎在最新版本的MYSQL中已经废弃所以不过多讨论了。</p><h2 id="事务处理" tabindex="-1"><a class="header-anchor" href="#事务处理" aria-hidden="true">#</a> 事务处理</h2><h3 id="行锁" tabindex="-1"><a class="header-anchor" href="#行锁" aria-hidden="true">#</a> 行锁</h3><p>::: tips 行锁</p><ul><li>表锁开销大，锁表慢</li><li>行锁高并发下可并行处理，性能更高</li><li>行锁是针对『 索引』加的锁，在通过索引检索时才会应用行锁，否则使用表锁</li><li>👷 在事务执行过程中，随时都可以执行锁定，锁在执行 COMMIT或者ROLLBACK的时候释放</li></ul><p>:::</p><ol><li><p>A事务执行以下代码但不提交</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">BEGIN</span><span class="token punctuation">;</span>\n<span class="token keyword">UPDATE</span> stu <span class="token keyword">SET</span> sname <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>B事务执行以下代码，可以正常执行</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">BEGIN</span><span class="token punctuation">;</span>\n<span class="token keyword">update</span> stu <span class="token keyword">set</span> sname <span class="token operator">=</span> <span class="token string">&#39;Michael&#39;</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">3</span>\n<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>但B事务更新与A事务<strong>相同的记录</strong>则无法操作，执行过程发生阻塞</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">BEGIN</span><span class="token punctuation">;</span>\n<span class="token keyword">UPDATE</span> stu <span class="token keyword">SET</span> sname <span class="token operator">=</span> <span class="token string">&#39;world&#39;</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>当A执行执行<code>COMMIT</code> 提交后，解锁记录行这时B事务继续执行</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token comment"># 最终id为1的sname被更新为world</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ol><h3 id="非索引阻塞" tabindex="-1"><a class="header-anchor" href="#非索引阻塞" aria-hidden="true">#</a> 非索引阻塞</h3><p>🚨 使用<strong>非索引字段</strong>筛选时，将造成全表锁定即表级锁，应该避免这种情况发生，提升数据库的并发性能。</p><ol><li><p>事务A执行以下代码，因为<code>sname</code>字段没有添加索引，造成锁定整个表</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">BEGIN</span><span class="token punctuation">;</span>\n<span class="token keyword">UPDATE</span> stu <span class="token keyword">SET</span> sname <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span> <span class="token keyword">WHERE</span> sname <span class="token operator">=</span><span class="token string">&#39;李华&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>现在事务B更新<strong>任何一条</strong>记录都会造成阻塞，因为现在是<strong>表锁</strong>状态</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">BEGIN</span><span class="token punctuation">;</span>\n<span class="token keyword">update</span> stu <span class="token keyword">set</span> sname <span class="token operator">=</span> <span class="token string">&#39;小明&#39;</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token comment">-- 阻塞中...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>将 <code>sname</code>字段添加索引后，行锁功能就又有效了</p></li></ol><h3 id="范围锁" tabindex="-1"><a class="header-anchor" href="#范围锁" aria-hidden="true">#</a> 范围锁</h3><p>🚨 查询没有指定明确范围时也会造成大量记录的锁定</p><ol><li><p>事务A筛选时使用了范围区间，将会造成表锁</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">BEGIN</span><span class="token punctuation">;</span>\n<span class="token keyword">UPDATE</span> goods <span class="token keyword">SET</span> num<span class="token operator">=</span><span class="token number">200</span> <span class="token keyword">WHERE</span> id<span class="token operator">&gt;</span><span class="token number">1</span> <span class="token operator">AND</span> id<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>事务B将不能修改表中的ID大于2的记录</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">BEGIN</span><span class="token punctuation">;</span>\n<span class="token keyword">update</span> goods <span class="token keyword">set</span> num <span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token comment">-- 阻塞中...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>但可以更改ID为1的记录</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">update</span> goods <span class="token keyword">set</span> num <span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>执行添加时因为不在id为 1~3的范围内所以可以添加，但如果添加时指定ID为2将会阻塞。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token comment"># 新插入的数据id不在范围内，会正常执行</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> goods <span class="token punctuation">(</span>name<span class="token punctuation">,</span>num<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">&#39;西瓜&#39;</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment"># 如果此时没有id为4的数据，想要进行插入，也是不行的</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> goods <span class="token punctuation">(</span>name<span class="token punctuation">,</span>num<span class="token punctuation">,</span> id<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">&#39;西瓜&#39;</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ol><blockquote><p>🔐 例如范围是id&gt;5，那么后续的id大于5的数据的修改或者插入都是会阻塞的</p><p>🔥 目标是锁的范围或者说粒度，越小越好，这样用户的吞吐量才能更大</p></blockquote><h2 id="悲观锁" tabindex="-1"><a class="header-anchor" href="#悲观锁" aria-hidden="true">#</a> 悲观锁</h2><p>🔖 悲观锁指对数据被外界修改持<strong>保守态度</strong>，在整个数据处理过程中，将数据处于锁定状态，可以很好地解决并发事务的更新丢失问题。</p><p>下面演示商城下单情况，要用户购买商品后我们要减少库存，如果在高并发情况下多个用户同时修改库存表，会造成库存数据异常，使用悲观锁可以解决这个问题。</p><ol><li><p>事务A执行悲观锁操作后，其他事务执行同一代码时将阻塞 <code>FOR UPDATE</code></p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">BEGIN</span><span class="token punctuation">;</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> goods <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">FOR</span> <span class="token keyword">UPDATE</span><span class="token punctuation">;</span>\n<span class="token keyword">UPDATE</span> goods <span class="token keyword">SET</span> num<span class="token operator">=</span>num<span class="token operator">-</span><span class="token number">2</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> \n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>事务B执行以下代码将不能查询库存，必须等事务A提交或回滚事务</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">BEGIN</span><span class="token punctuation">;</span>\n<span class="token comment">## B事务中查询中也要使用 FOR UPDATE 悲观锁</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> goods <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">FOR</span> <span class="token keyword">UPDATE</span><span class="token punctuation">;</span>\n<span class="token comment">-- 阻塞中...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>事务A提交后，事务B会得到事务A操作后的结果</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ol><h2 id="乐观锁" tabindex="-1"><a class="header-anchor" href="#乐观锁" aria-hidden="true">#</a> 乐观锁</h2><p>🔖 在每次去拿数据的时候认为别人不会修改，不对数据上锁，但是在提交更新的时候会判断在此期间数据是否被更改，如果被更改则提交失败。</p><p>下面使用版本字段来实现乐观锁操作，并实现更改商品库存的案例。</p><ol><li><p>事务A查询商品库存，获取了商品记录，记录中有VERSION字段用于记录版本号（目前为0）</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">BEGIN</span><span class="token punctuation">;</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> goods <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>事务B同时查询，也获取了版本号为0的记录</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">BEGIN</span><span class="token punctuation">;</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> goods <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>事务A更改库存，并增加版本号</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> goods <span class="token keyword">SET</span> num<span class="token operator">=</span>num<span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span>VERSION <span class="token operator">=</span>VERSION<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">WHERE</span> VERSION<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>事务B更改数据，但使用的是事务B查询到的0号版本，因为事务A已经提交版本号为1，造成事务B修改失败，保证了数据的完整性。(通过版本号约束修改的条件)</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> goods <span class="token keyword">SET</span> num<span class="token operator">=</span>num<span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span>VERSION <span class="token operator">=</span>VERSION<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">WHERE</span> VERSION<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ol><blockquote><p>乐观锁是在后期，如果数据真的发生错乱的时候，再进行处理</p></blockquote><h2 id="表锁机制" tabindex="-1"><a class="header-anchor" href="#表锁机制" aria-hidden="true">#</a> 表锁机制</h2><p>🚑️ 针对一些<strong>不支持事务</strong>的处理引擎可以使用<strong>锁表</strong>的方式控制业务。</p><h3 id="读锁read" tabindex="-1"><a class="header-anchor" href="#读锁read" aria-hidden="true">#</a> 读锁READ</h3><p>为表设置读锁后，当前会话和其他会话都不可以修改数据，但<strong>可以读取</strong>表数据。</p><ol><li><p>会话A对表goods设置了读锁，将不能修改该表，也不能操作其他表</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">LOCK</span> <span class="token keyword">TABLE</span> goods <span class="token keyword">READ</span><span class="token punctuation">;</span>\n<span class="token comment"># 可以读表</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> goods<span class="token punctuation">;</span>\n\n<span class="token comment"># 数据修改失败，不能更新read lock的表</span>\n<span class="token keyword">UPDATE</span> goods <span class="token keyword">SET</span> num<span class="token operator">=</span><span class="token number">300</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> stu<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>因为会话A对表<code>goods</code>设置了读锁，所以会话B也不能修改</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token comment"># 可以读表</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> goods<span class="token punctuation">;</span>\n\n<span class="token keyword">update</span> goods <span class="token keyword">set</span> num<span class="token operator">=</span><span class="token number">200</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token comment">-- 阻塞...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>会话A解锁表后，其他会话又可以继续操作表了</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">UNLOCK</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ol><h3 id="写锁write" tabindex="-1"><a class="header-anchor" href="#写锁write" aria-hidden="true">#</a> 写锁WRITE</h3><p>为表设置了写锁后，当前会话可以修改，查询表，其他会话将无法操作。</p><ol><li><p>会话A对表goods和stu设置写锁，本会话可以正常操作表， 并不能操作其他表</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token comment"># 可以一次性锁定多个表</span>\n<span class="token keyword">LOCK</span> <span class="token keyword">TABLE</span> goods <span class="token keyword">WRITE</span>，stu <span class="token keyword">WRITE</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> goods <span class="token punctuation">(</span>name<span class="token punctuation">,</span>num <span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;李华教程&#39;</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>会话B读取/写入表数据都将阻塞</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> goods<span class="token punctuation">;</span>\n<span class="token comment">-- 阻塞...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>会话A解锁表数据后，其他会话都可以正常操作了</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">UNLOCK</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ol>',36),p={render:function(s,n){return e}}}}]);