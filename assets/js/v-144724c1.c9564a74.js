"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6557],{3090:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-144724c1",path:"/mysql/transaction.html",title:"事务处理",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"储存引擎",slug:"储存引擎",children:[{level:3,title:"InnoDB",slug:"innodb",children:[]}]},{level:2,title:"提交模式",slug:"提交模式",children:[{level:3,title:"自动提交",slug:"自动提交",children:[]},{level:3,title:"事务提交",slug:"事务提交",children:[]}]},{level:2,title:"事务隔离",slug:"事务隔离",children:[{level:3,title:"并发问题",slug:"并发问题",children:[]},{level:3,title:"隔离级别",slug:"隔离级别",children:[]},{level:3,title:"查询级别",slug:"查询级别",children:[]},{level:3,title:"设置级别",slug:"设置级别",children:[]},{level:3,title:"脏读",slug:"脏读",children:[]},{level:3,title:"不可重复读",slug:"不可重复读",children:[]},{level:3,title:"幻读",slug:"幻读",children:[]}]}],filePathRelative:"mysql/transaction.md",git:{updatedTime:165055297e4,contributors:[{name:"Jerry Chen",email:"caffreygo@163.com",commits:1}]}}},2051:(s,n,a)=>{a.r(n),a.d(n,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="事务处理" tabindex="-1"><a class="header-anchor" href="#事务处理" aria-hidden="true">#</a> 事务处理</h1><p>🔖 事务是保证<strong>多个SQL</strong>操作的一致性，如果一条失败全部SQL也将失效。</p><div class="custom-container tip"><p class="custom-container-title">业务分析</p><ul><li>事务是保证多个SQL操作的一致性，如果一条失败全部SQL也将失效。</li><li>实际业务中大多数是对多个表操作，比如当发表文章时需要将文章的基本信息发到文章基础表和文章内容添加到文章内容表，这种情况不使用事务也没有关系，如果出现数据异常重新添加就可以了</li><li>但牵涉到货币的情况就必须使用事务了，必须保证货币处理是准确的</li><li>当然有些公司要求所有查询都使用事务，这就遵照公司要求完成就可以了</li></ul></div><h2 id="储存引擎" tabindex="-1"><a class="header-anchor" href="#储存引擎" aria-hidden="true">#</a> 储存引擎</h2><p>查看引擎</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SHOW</span> ENGINES<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="innodb" tabindex="-1"><a class="header-anchor" href="#innodb" aria-hidden="true">#</a> InnoDB</h3><p>支持事务的引擎建议使用 <code>InnoDB</code>。如果旧表是其他引擎，使用下面语句更改为<code>InnoDB</code>引擎。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="提交模式" tabindex="-1"><a class="header-anchor" href="#提交模式" aria-hidden="true">#</a> 提交模式</h2><h3 id="自动提交" tabindex="-1"><a class="header-anchor" href="#自动提交" aria-hidden="true">#</a> 自动提交</h3><p>Mysql的提交默认是自动提交，即发送一条执行一条。</p><p>在 <code>DBeaver</code> 执行以下SQL后，在另一个 <code>Sequel Pro</code> 会立刻看到结果。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> stu <span class="token punctuation">(</span>class_id<span class="token punctuation">,</span>sname<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;张帝&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;女&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>在 <code>Sequel Ace</code> 里即可看到结果，这为自动提交。</p><h3 id="事务提交" tabindex="-1"><a class="header-anchor" href="#事务提交" aria-hidden="true">#</a> 事务提交</h3><h4 id="事务单独开启" tabindex="-1"><a class="header-anchor" href="#事务单独开启" aria-hidden="true">#</a> 事务单独开启</h4><div class="custom-container tip"><p class="custom-container-title">事务的开启与结束</p><ul><li><p>START TRANSACTION / BEGIN 开启事务</p></li><li><p>COMMIT 提交事务</p></li><li><p>ROLLBACK 回滚事务</p></li></ul></div><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> stu <span class="token punctuation">(</span>class_id<span class="token punctuation">,</span>sname<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;张帝&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;女&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><div class="highlight-line"> </div></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>例如执行一下sql语句，只会插入一条数据：</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token comment"># begin至rollback之间的内容被不会真正执行操作数据</span>\n<span class="token keyword">begin</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> stu<span class="token punctuation">(</span>sname<span class="token punctuation">,</span> class_id<span class="token punctuation">,</span> sex<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;bad&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">rollback</span><span class="token punctuation">;</span>\n<span class="token comment"># 正常sql执行</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> stu<span class="token punctuation">(</span>sname<span class="token punctuation">,</span> class_id<span class="token punctuation">,</span> sex<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;good&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="全局开启事务" tabindex="-1"><a class="header-anchor" href="#全局开启事务" aria-hidden="true">#</a> 全局开启事务</h4><p>如果所有SQL都使用事务操作，我们可以通过 <code>SET AUTOCOMMIT=0</code> 关闭自动提交来开启事务机制，这样所有语句都是事务类型。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token comment">-- 关闭自动提交</span>\n<span class="token keyword">SET</span> AUTOCOMMIT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n<span class="token comment"># sql的处理在未commit的情况下，不会真正操作到数据库</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> stu <span class="token punctuation">(</span>class_id<span class="token punctuation">,</span>sname<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;李清&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;女&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>\n\n<span class="token comment">-- 开启自动提交</span>\n<span class="token keyword">SET</span> AUTOCOMMIT <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="事务隔离" tabindex="-1"><a class="header-anchor" href="#事务隔离" aria-hidden="true">#</a> 事务隔离</h2><h3 id="并发问题" tabindex="-1"><a class="header-anchor" href="#并发问题" aria-hidden="true">#</a> 并发问题</h3><div class="custom-container tip"><p class="custom-container-title">当高并发访问会遇到多个事务的隔离问题，可能会出现以下：</p><ol><li>脏读：事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据。</li><li>不可重复读：事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果不一致。</li><li>幻读：系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。</li></ol></div><blockquote><p>不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表</p></blockquote><h3 id="隔离级别" tabindex="-1"><a class="header-anchor" href="#隔离级别" aria-hidden="true">#</a> 隔离级别</h3><table><thead><tr><th>事务隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th><th>说明</th></tr></thead><tbody><tr><td>读未提交（read-uncommitted）</td><td>是</td><td>是</td><td>是</td><td>最低的事务隔离级别，一个事务还没提交时，它做的变更就能被别的事务看到</td></tr><tr><td>不可重复读（read-committed）</td><td>否</td><td>是</td><td>是</td><td>保证一个事务提交后才能被另外一个事务读取。另外一个事务不能读取该事务未提交的数据。</td></tr><tr><td>可重复读（repeatable-read）</td><td>否</td><td>否</td><td>是</td><td>多次读取同一范围的数据会返回第一次查询的快照，即使其他事务对该数据做了更新修改。事务在执行期间看到的数据前后必须是一致的。</td></tr><tr><td>串行化（serializable）</td><td>否</td><td>否</td><td>否</td><td>事务 100% 隔离，可避免脏读、不可重复读、幻读的发生。花费最高代价但最可靠的事务隔离级别。</td></tr></tbody></table><h3 id="查询级别" tabindex="-1"><a class="header-anchor" href="#查询级别" aria-hidden="true">#</a> 查询级别</h3><p>🚀 mysql8 版本查询隔离级别</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">select</span> @<span class="token variable">@global.transaction_isolation</span><span class="token punctuation">,</span>@<span class="token variable">@transaction_isolation</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>mysql8 以下版本查询隔离级别</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">select</span> @<span class="token variable">@tx_isolation</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/mysql/transaction/isolation.png" alt=""></p><h3 id="设置级别" tabindex="-1"><a class="header-anchor" href="#设置级别" aria-hidden="true">#</a> 设置级别</h3><p>设置会话隔离级别，影响当前连接</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">set</span> <span class="token keyword">session</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">read</span> <span class="token keyword">uncommitted</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>设置全局隔离级别，影响全局连接</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">set</span> <span class="token keyword">global</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">read</span> <span class="token keyword">uncommitted</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="脏读" tabindex="-1"><a class="header-anchor" href="#脏读" aria-hidden="true">#</a> 脏读</h3><p>🔖 为了演示效果将隔离级别设置为最低级 <code>read uncommitted</code>。脏读是一个事务<strong>没有提交</strong>时可被其他事务读取到。</p><ol><li><p>事务A执行更新操作</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">set</span> <span class="token keyword">session</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">read</span> <span class="token keyword">UNCOMMITTED</span><span class="token punctuation">;</span>\n<span class="token keyword">BEGIN</span><span class="token punctuation">;</span>\n<span class="token keyword">UPDATE</span> stu <span class="token keyword">SET</span> sname <span class="token operator">=</span> <span class="token string">&#39;new&#39;</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>因为使用了最低级别<code>read uncommitted</code>，事务B在事务A没有提交时就可以看到更新的数据</p><p>如果事务A执行<code>ROLLBACK</code> 事务B的读到的数据就为<strong>脏数据</strong>。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SET</span> <span class="token keyword">SESSION</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION</span> <span class="token keyword">LEVEL</span> <span class="token keyword">READ</span> <span class="token keyword">UNCOMMITTED</span><span class="token punctuation">;</span>\n<span class="token keyword">BEGIN</span><span class="token punctuation">;</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> stu<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/mysql/transaction/uncommitted.png" alt=""></p></li><li><p>将隔离级别设置为<strong>除了</strong> <code>read uncommitted</code>以外的值，再重复上面的例子，都可以有效避免脏读的问题。</p></li></ol><h3 id="不可重复读" tabindex="-1"><a class="header-anchor" href="#不可重复读" aria-hidden="true">#</a> 不可重复读</h3><div class="custom-container tip"><p class="custom-container-title">不可重复读</p><p>📌 指在事务中多次读取的数据出现不一致的情况，我们希望读取的数据在本事务中是一致的</p><ul><li>事务A在执行过程中更新数据，事务B同时读取的数据没有脏数据。</li><li>但当事务A提交了事务后，事务B再读取时得到了最新的数据，这种情况为不可重复读。</li><li>所以要保证事务过程中的数据重复操作是一致的，不受其他事务影响，即避免不可重复读的产生。</li></ul></div><p>为了演示效果将隔离级别设置为低级别 <code>read committed</code>。</p><ol><li><p>事务A执行以下代码，但没有提交</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">set</span> <span class="token keyword">session</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">READ</span> <span class="token keyword">COMMITTED</span><span class="token punctuation">;</span>\n<span class="token keyword">BEGIN</span><span class="token punctuation">;</span>\n<span class="token keyword">UPDATE</span> stu <span class="token keyword">SET</span> sname <span class="token operator">=</span> <span class="token string">&#39;new&#39;</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>因为使用了 <code>read committed</code>级别，所以事务B不会读到脏数据</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SET</span> <span class="token keyword">SESSION</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION</span> <span class="token keyword">LEVEL</span> <span class="token keyword">READ</span> <span class="token keyword">COMMITTED</span><span class="token punctuation">;</span>\n<span class="token keyword">BEGIN</span><span class="token punctuation">;</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> stu<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/mysql/transaction/committed.png" alt=""></p></li><li><p>事务A提交事务</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token keyword">commit</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/mysql/transaction/uncommitted.png" alt=""></p></li><li><p>此时事务B<strong>可以读取</strong>到事务A提交的数据，这就是不能重复读取到同一个数据，即事务B读取结果受事务A影响。</p><blockquote><p>不可重复读：事务内同样的查询得到了不同的值，在事务期间被其他处理修改了</p></blockquote></li><li><p>将隔离机制设置为 <code>REPEATABLE READ</code> 就可以解决这类不可重复读的问题。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">set</span> <span class="token keyword">session</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">REPEATABLE</span> <span class="token keyword">READ</span><span class="token punctuation">;</span>\n<span class="token keyword">begin</span><span class="token punctuation">;</span>\n<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu<span class="token punctuation">;</span>\n<span class="token comment"># 这个时机，如果另外一个事务修改了数据并且提交，也就是表数据已经被「真正改变」</span>\n<span class="token comment"># 当前事务之外的操作修改了数据......</span>\n<span class="token comment"># 再次获取的还是之前的数据，相当于读取了当前事务开始时存的一个「快照」</span>\n<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu<span class="token punctuation">;</span>\n<span class="token keyword">commit</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ol><h3 id="幻读" tabindex="-1"><a class="header-anchor" href="#幻读" aria-hidden="true">#</a> 幻读</h3><p>🔖 幻读和不可重复读都是读取了另一条已经提交的事务（这点就脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体。</p><ol><li><p>事务A执行查询，假如查询结果是6条</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">set</span> <span class="token keyword">session</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">REPEATABLE</span> <span class="token keyword">READ</span><span class="token punctuation">;</span>\n<span class="token keyword">BEGIN</span><span class="token punctuation">;</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> stu<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>事务B执行添加</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">set</span> <span class="token keyword">session</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">REPEATABLE</span> <span class="token keyword">READ</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> stu <span class="token punctuation">(</span>class_id<span class="token punctuation">,</span>sname<span class="token punctuation">,</span>sex<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;Michael&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">commit</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>事务A执行更新，发现更新了7条（刚才查询时6条，但更新了七条，感觉像出现了幻觉）</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token keyword">UPDATE</span> stu <span class="token keyword">SET</span> balance <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>切换隔离级别为 <strong>SERIALIZABLE</strong> 后，在事务A没有提交时，事务B是不能插入数据的（表现形式为等待）。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">set</span> <span class="token keyword">session</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">SERIALIZABLE</span><span class="token punctuation">;</span>\n\n<span class="token keyword">select</span> @<span class="token variable">@global.transaction_isolation</span><span class="token punctuation">,</span>@<span class="token variable">@transaction_isolation</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ol><p>🔥 <code>serializable</code>在事务未提交时会进行锁表，需要等待当前事务结束才能进行其它事务的处理。</p>',52),p={render:function(s,n){return e}}}}]);