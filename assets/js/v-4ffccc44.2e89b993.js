"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4489],{112:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-4ffccc44",path:"/VueJs3/section1/chapter1.html",title:"权衡的艺术",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"命令式与声明式",slug:"命令式与声明式",children:[]},{level:2,title:"性能与可维护性的权衡",slug:"性能与可维护性的权衡",children:[]},{level:2,title:"虚拟DOM的性能",slug:"虚拟dom的性能",children:[{level:3,title:"创建页面",slug:"创建页面",children:[]},{level:3,title:"更新页面",slug:"更新页面",children:[]},{level:3,title:"对比总结",slug:"对比总结",children:[]}]},{level:2,title:"运行时和编译时",slug:"运行时和编译时",children:[{level:3,title:"运行时",slug:"运行时",children:[]},{level:3,title:"编译时",slug:"编译时",children:[]}]}],filePathRelative:"VueJs3/section1/chapter1.md",git:{updatedTime:1653577344e3,contributors:[{name:"Jerry Chen",email:"caffreygo@163.com",commits:1},{name:"Jinrui Chen",email:"jinrui@kooboo.cn",commits:1}]}}},936:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const t=(0,a(6252).uE)('<h1 id="权衡的艺术" tabindex="-1"><a class="header-anchor" href="#权衡的艺术" aria-hidden="true">#</a> 权衡的艺术</h1><div class="custom-container tip"><p class="custom-container-title">Vue.js</p><ul><li>性能与可维护性之间的取舍</li><li>运行时与编译时之间的取舍</li></ul></div><h2 id="命令式与声明式" tabindex="-1"><a class="header-anchor" href="#命令式与声明式" aria-hidden="true">#</a> 命令式与声明式</h2><p>视图层框架的范式通常分为<strong>命令式</strong>与<strong>声明式</strong></p><ul><li><p>命令式：关注过程，比如原生js的 DOM 操作、jQuery，按步操作</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取div</span>\ndiv<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">;</span>  <span class="token comment">// 设置文本内容</span>\ndic<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 绑定点击事件</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>声明式：关注结果，比如Vuejs，用户需要的最终视图结果</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>() =&gt; alert(<span class="token punctuation">&#39;</span>ok<span class="token punctuation">&#39;</span>)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul><p>🔥 Vue.js帮助我们封装了过程，它的内部实现一定是命令式的，但是暴露给用户的却更加声明式</p><h2 id="性能与可维护性的权衡" tabindex="-1"><a class="header-anchor" href="#性能与可维护性的权衡" aria-hidden="true">#</a> 性能与可维护性的权衡</h2><div class="custom-container tip"><p class="custom-container-title">声明式代码的性能不优于命令式代码的性能</p><ul><li>命令式代码的更新性能消耗：A</li><li>声明式代码的更新性能消耗：A + B</li></ul><p>A: 直接修改的性能消耗；B: 找出差异的性能消耗</p></div><p>🔥 虽然声明式代码的性能无法超越命令式代码，但是声明式代码具有更好的可维护性，无需用户参与整个过程的，只需要关心结果的视图。因此，在保持可维护性的同时让性能损失最小化。</p><h2 id="虚拟dom的性能" tabindex="-1"><a class="header-anchor" href="#虚拟dom的性能" aria-hidden="true">#</a> 虚拟DOM的性能</h2><p>🔖 声明式代码的关键在于，如果我们能<strong>最小化</strong>找出差异的性能消耗，就可以让声明式代码的性能无限接近于命令式代码。虽然这很难，但是这也正是虚拟 DOM 想要解决的问题。</p><h3 id="创建页面" tabindex="-1"><a class="header-anchor" href="#创建页面" aria-hidden="true">#</a> 创建页面</h3><p>innerHTML于虚拟DOM在创建页面时的性能：</p><table><thead><tr><th></th><th>虚拟DOM</th><th>innerHTML</th></tr></thead><tbody><tr><td>纯JavaScript运算</td><td>创建VNode</td><td>渲染HTML字符串</td></tr><tr><td>DOM运算</td><td>新建所有DOM元素</td><td>新建所有DOM元素</td></tr></tbody></table><p>新建页面时，innerHTML和虚拟DOM性能差距不大，都是在新建DOM</p><h3 id="更新页面" tabindex="-1"><a class="header-anchor" href="#更新页面" aria-hidden="true">#</a> 更新页面</h3><p>innerHTML于虚拟DOM在更新页面时的性能：</p><table><thead><tr><th></th><th>虚拟DOM</th><th>innerHTML</th></tr></thead><tbody><tr><td>纯JavaScript运算</td><td>创建VNode + Diff</td><td>渲染HTML字符串</td></tr><tr><td>DOM运算</td><td>必要的DOM更新</td><td>销毁所有旧DOM + 创建所有新DOM</td></tr><tr><td>性能因素</td><td>与数据变化量有关</td><td>与模板大小有关</td></tr></tbody></table><p>虚拟 DOM 只更新必要的 DOM，和页面大小无关；innerHTML 性能差的原因：在更新页面时，需要销毁所有旧 DOM，重新创建新 DOM，页面越大，性能越差</p><h3 id="对比总结" tabindex="-1"><a class="header-anchor" href="#对比总结" aria-hidden="true">#</a> 对比总结</h3><table><thead><tr><th>innerHTML</th><th>虚拟 DOM</th><th>原生</th></tr></thead><tbody><tr><td>性能差</td><td>性能不错</td><td>性能高</td></tr><tr><td></td><td>可维护性强</td><td>可维护性差</td></tr><tr><td>心智负担中等</td><td>心智负担小</td><td>心智负担大</td></tr></tbody></table><h2 id="运行时和编译时" tabindex="-1"><a class="header-anchor" href="#运行时和编译时" aria-hidden="true">#</a> 运行时和编译时</h2><h3 id="运行时" tabindex="-1"><a class="header-anchor" href="#运行时" aria-hidden="true">#</a> 运行时</h3><p>代码直接可以运行，没有编译的过程。缺点是不能分析提供的代码内容，进行对应的性能优化操作</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Render</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>tag<span class="token punctuation">)</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">.</span>children <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>children<span class="token punctuation">)</span>\n        el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        obj<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token operator">=&gt;</span> <span class="token function">Render</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> el<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    root<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    tag<span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>\n    children<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span> tag<span class="token operator">:</span> <span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token string">&#39;hello world&#39;</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">Render</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> document<span class="token punctuation">.</span>body<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="编译时" tabindex="-1"><a class="header-anchor" href="#编译时" aria-hidden="true">#</a> 编译时</h3><p>将代码进行分析转换为可执行的代码，可以分析用户内容。缺点是灵活性较差，必须编译后使用</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果是运行时+编译时，compiler将代码编译成：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    tag<span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>\n    children<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span> tag<span class="token operator">:</span> <span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token string">&#39;hello world&#39;</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// compiler + render</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>当然，也可以实现为纯编译时，compiler直接编译为：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">)</span>\nspan<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span>\ndiv<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>span<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>🔥 Vue.js 是运行时 + 编译时架构，保证灵活性的基础上，通过分析，尽可能提升性能。编译器提供了代码提前分析的可能，Vue.js 使用编译器分析出动态数据，让渲染器在更新时能快速区分定位，相辅相成。</p>',33),p={render:function(n,s){return t}}}}]);