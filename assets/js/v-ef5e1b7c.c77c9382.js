"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3217],{4485:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-ef5e1b7c",path:"/nest/overview.html",title:"NestJs",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"生命周期",slug:"生命周期",children:[]},{level:2,title:"项目创建",slug:"项目创建",children:[{level:3,title:"全局命令",slug:"全局命令",children:[]},{level:3,title:"项目依赖",slug:"项目依赖",children:[]}]},{level:2,title:"vscode",slug:"vscode",children:[{level:3,title:"插件",slug:"插件",children:[]},{level:3,title:"prettierrc",slug:"prettierrc",children:[]}]},{level:2,title:"依赖注入",slug:"依赖注入",children:[{level:3,title:"高耦合代码",slug:"高耦合代码",children:[]},{level:3,title:"依赖注入",slug:"依赖注入-1",children:[]}]}],filePathRelative:"nest/overview.md",git:{updatedTime:1681904431e3,contributors:[{name:"Jinrui Chen",email:"jerry.chenj@outlook.com",commits:1},{name:"jinrui-kooboo",email:"jinrui@kooboo.cn",commits:1}]}}},134:(n,s,a)=>{a.r(s),a.d(s,{default:()=>h});var p=a(6252);const e=(0,p._)("h1",{id:"nestjs",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#nestjs","aria-hidden":"true"},"#"),(0,p.Uk)(" NestJs")],-1),t={href:"https://docs.nestjs.com/",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("Nest.js (opens new window)"),l=(0,p.Uk)("用于构建高效且可伸缩的服务端应用程序的渐进式 Node.js 框架。"),c=(0,p.uE)('<p>一般来说，一个请求流经中间件、守卫与拦截器，然后到达管道，并最终回到拦截器中的返回路径中（从而产生响应）。</p><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h2><p><img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/nest/flow.png" alt="img"></p><p>一般来说，nest.js 请求生命周期大致如下：</p><ol><li>收到请求</li><li>全局绑定的中间件</li><li>模块绑定的中间件</li><li>全局守卫</li><li>控制层守卫</li><li>路由守卫</li><li>全局拦截器（控制器之前）</li><li>控制器层拦截器 （控制器之前）</li><li>路由拦截器 （控制器之前）</li><li>全局管道</li><li>控制器管道</li><li>路由管道</li><li>路由参数管道</li><li>控制器（方法处理器）</li><li>路由拦截器（请求之后）</li><li>控制器拦截器 （请求之后）</li><li>全局拦截器 （请求之后）</li><li>异常过滤器 （路由，之后是控制器，之后是全局）</li><li>服务器响应</li></ol><h2 id="项目创建" tabindex="-1"><a class="header-anchor" href="#项目创建" aria-hidden="true">#</a> 项目创建</h2><h3 id="全局命令" tabindex="-1"><a class="header-anchor" href="#全局命令" aria-hidden="true">#</a> 全局命令</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> -g @nestjs/cli nodemon ts-node\nnest new project-name\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="项目依赖" tabindex="-1"><a class="header-anchor" href="#项目依赖" aria-hidden="true">#</a> 项目依赖</h3><p>进入项目目录然后安装项目依赖，包含 prisma、表单验证、加密工具、JWT、文件上传、工具包、日期处理等</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> prisma-binding @prisma/client mockjs @nestjs/config class-validator class-transformer argon2 @nestjs/passport passport passport-local @nestjs/jwt passport-jwt lodash multer dayjs express redis @nestjs/throttler\n\n<span class="token function">pnpm</span> <span class="token function">add</span> -D prisma typescript @types/node @types/mockjs @nestjs/mapped-types @types/passport-local @types/passport-jwt @types/express @types/lodash @types/multer @types/node\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="vscode" tabindex="-1"><a class="header-anchor" href="#vscode" aria-hidden="true">#</a> vscode</h2><h3 id="插件" tabindex="-1"><a class="header-anchor" href="#插件" aria-hidden="true">#</a> 插件</h3><p>安装以下插件为 NestJs 提供支持</p>',14),r={href:"https://marketplace.visualstudio.com/items?itemName=Prisma.prisma",target:"_blank",rel:"noopener noreferrer"},i=(0,p.Uk)("Prisma(opens new window)"),u={href:"https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next",target:"_blank",rel:"noopener noreferrer"},k=(0,p.Uk)("JavaScript and TypeScript Nightly(opens new window)"),b={href:"https://marketplace.visualstudio.com/items?itemName=mikestead.dotenv",target:"_blank",rel:"noopener noreferrer"},d=(0,p.Uk)("DotENV(opens new window)"),m=(0,p.uE)('<h3 id="prettierrc" tabindex="-1"><a class="header-anchor" href="#prettierrc" aria-hidden="true">#</a> prettierrc</h3><p>NestJs 项目创建后会生成<code>.prettierrc</code>文件，这是代码格式化规范，下面是向军大叔的配置。</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;arrowParens&quot;</span><span class="token operator">:</span> <span class="token string">&quot;always&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;bracketSameLine&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;bracketSpacing&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;embeddedLanguageFormatting&quot;</span><span class="token operator">:</span> <span class="token string">&quot;auto&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;htmlWhitespaceSensitivity&quot;</span><span class="token operator">:</span> <span class="token string">&quot;css&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;insertPragma&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;jsxSingleQuote&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;printWidth&quot;</span><span class="token operator">:</span> <span class="token number">120</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;proseWrap&quot;</span><span class="token operator">:</span> <span class="token string">&quot;never&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;quoteProps&quot;</span><span class="token operator">:</span> <span class="token string">&quot;as-needed&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;requirePragma&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;semi&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;singleQuote&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;tabWidth&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;trailingComma&quot;</span><span class="token operator">:</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;useTabs&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;vueIndentScriptAndStyle&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;singleAttributePerLine&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="依赖注入" tabindex="-1"><a class="header-anchor" href="#依赖注入" aria-hidden="true">#</a> 依赖注入</h2><p>依赖注入指创建对象的过程由框架自动完成，a 对象在使用 b 对象，b 对象使用 c 对象，a 对象只需要使用 b 对象，而不需要了解 b 对象怎么怎么样创建出 c 对象。</p><h3 id="高耦合代码" tabindex="-1"><a class="header-anchor" href="#高耦合代码" aria-hidden="true">#</a> 高耦合代码</h3><p>以下代码是没有依赖注入的情况，a 对象要考虑 b 对象的参数，如果 c 对象也有参数也要考虑，这显然是高耦合低效率的编码体验。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">c</span> <span class="token punctuation">{</span>\n  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;c object&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">b</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">a</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">a</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">b</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbootstrap<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="依赖注入-1" tabindex="-1"><a class="header-anchor" href="#依赖注入-1" aria-hidden="true">#</a> 依赖注入</h3><p>NestJs 将类定义在模块的 <strong>providers</strong> 属性中即声明为提供者，其他类可以在 constructor 构造函数中依赖注入，实现编码的解耦。</p><p>下面代码的构造函数使用依赖注入了 PrismaService 与 JwtService 服务实例。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AuthService</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> prismaService<span class="token operator">:</span> PrismaService<span class="token punctuation">,</span> <span class="token keyword">private</span> <span class="token keyword">readonly</span> jwtService<span class="token operator">:</span> JwtService<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token keyword">async</span> <span class="token function">login</span><span class="token punctuation">(</span>loginDto<span class="token operator">:</span> LoginDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prismaService<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">findUnique</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      where<span class="token operator">:</span> <span class="token punctuation">{</span>\n        name<span class="token operator">:</span> loginDto<span class="token punctuation">.</span>name<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">const</span> passwordCheck <span class="token operator">=</span> <span class="token keyword">await</span> argon2<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>password<span class="token punctuation">,</span> loginDto<span class="token punctuation">.</span>password<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>passwordCheck<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadRequestException</span><span class="token punctuation">(</span><span class="token string">&#39;密码输入错误!&#39;</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">token</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div>',12),h={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,(0,p._)("p",null,[(0,p._)("a",t,[o,(0,p.Wm)(a)]),l]),c,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("a",r,[i,(0,p.Wm)(a)])]),(0,p._)("li",null,[(0,p._)("a",u,[k,(0,p.Wm)(a)])]),(0,p._)("li",null,[(0,p._)("a",b,[d,(0,p.Wm)(a)])])]),m],64)}}}}]);