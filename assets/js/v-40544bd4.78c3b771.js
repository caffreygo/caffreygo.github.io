"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8744],{6581:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-40544bd4",path:"/VueJs3/section5/chapter16.html",title:"解析器",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"文本模式及其对解析器的影响",slug:"文本模式及其对解析器的影响",children:[]},{level:2,title:"递归下降算法构造模板 AST",slug:"递归下降算法构造模板-ast",children:[{level:3,title:"子节点类型",slug:"子节点类型",children:[]},{level:3,title:"parseChildren",slug:"parsechildren",children:[]},{level:3,title:"解析过程",slug:"解析过程",children:[]},{level:3,title:"递归与下降",slug:"递归与下降",children:[]}]},{level:2,title:"状态机的开启和停止",slug:"状态机的开启和停止",children:[{level:3,title:"isEnd.v1",slug:"isend-v1",children:[]},{level:3,title:"isEnd.v2",slug:"isend-v2",children:[]}]},{level:2,title:"解析标签节点",slug:"解析标签节点",children:[]},{level:2,title:"解析属性",slug:"解析属性",children:[]},{level:2,title:"解析文本与解析 HTML 实体",slug:"解析文本与解析-html-实体",children:[{level:3,title:"解析文本",slug:"解析文本",children:[]},{level:3,title:"解码命名字符的引用",slug:"解码命名字符的引用",children:[]},{level:3,title:"解码数字字符",slug:"解码数字字符",children:[]}]},{level:2,title:"解析插值与注释",slug:"解析插值与注释",children:[{level:3,title:"解析插值",slug:"解析插值",children:[]},{level:3,title:"解析注释",slug:"解析注释",children:[]}]}],filePathRelative:"VueJs3/section5/chapter16.md",git:{updatedTime:1655909516e3,contributors:[{name:"Jerry Chen",email:"caffreygo@163.com",commits:5}]}}},9030:(n,s,a)=>{a.r(s),a.d(s,{default:()=>Mn});var t=a(6252),e=a(3577);const p=(0,t.uE)('<h1 id="解析器" tabindex="-1"><a class="header-anchor" href="#解析器" aria-hidden="true">#</a> 解析器</h1><p>解析器（parser）负责把字符串模板转化成模板 AST，它的本质就是一个状态机。正则表达式的本质也是一个状态机。</p><h2 id="文本模式及其对解析器的影响" tabindex="-1"><a class="header-anchor" href="#文本模式及其对解析器的影响" aria-hidden="true">#</a> 文本模式及其对解析器的影响</h2><p>✅ 文本模式指的是解析器在工作时所进入的一些特殊状态，如 RCDATA 模式、CDATA 模式、RAWTEXT 模式，以及初始的 DATA 模式等。在不同模式下，解析器对文本的解析行为会有所不同。</p><div class="custom-container tip"><p class="custom-container-title">文本模式</p><p>当解析器遇到一些特殊标签时，会切换模式，从而影响其对文本的解析行为：</p><ul><li><code>&lt;title&gt;</code>标签、<code>&lt;textarea&gt;</code>标签，当解析器遇到这两个标签时，会切换到 RCDATA 模式；</li><li><code>&lt;title&gt; </code>、<code>&lt;xmp&gt;</code>、<code>&lt;iframe&gt;</code>、<code>&lt;noembed&gt;</code>、<code>&lt;noframes&gt;</code>、<code>&lt;noscript&gt;</code>等标签，当解析器遇到这些标签时，会切到 RAWTEXT 模式；</li><li>当解析器遇到<code>&lt;![CDATA[</code>字符串时，会进入 CDATA 模式。</li></ul></div>',5),o={class:"custom-container details"},c=(0,t._)("summary",null,"文本解析模式",-1),l=(0,t.Uk)("🌐 "),r={href:"https://whatwg-cn.github.io/html/multipage/parsing.html#tokenization",target:"_blank",rel:"noopener noreferrer"},u=(0,t.Uk)("HTML parsing tokenization 文档 (opens new window)"),k=(0,t.uE)('<table><thead><tr><th>模式</th><th>能否解析标签</th><th>是否支持 HTML 实体</th></tr></thead><tbody><tr><td>DATA</td><td>能</td><td>是</td></tr><tr><td>RCDATA</td><td>否</td><td>是</td></tr><tr><td>RAWTEXT</td><td>否</td><td>否</td></tr><tr><td>CDATA</td><td>否</td><td></td></tr></tbody></table><ul><li><p>在默认的 <strong>DATA 模式</strong>下，解析器在遇到<code>&lt;</code>时，会切换到标签开始状态（tag open state）。即在该模式下，解析器能够解析标签元素。当解析器遇到字符 <code>&amp;</code> 时，会切换到<strong>字符引用状态</strong>（character reference state），也称 HTML 字符实体状态。也就是说，在 DATA 模式下，解析器能够处理 HTML 字符实体。</p></li><li><p>在 <strong>RCDATA 模式</strong>时，解析器遇到<code>&lt;</code>标签不会再切换到标签开始状态，而会切换到 RCDATA less-then sign state。在该状态下，解析器遇到字符<code>\\</code>会切换到 RCDATA 的结束标签状态，即 RCDATA end tag open state；否则会将当前字符<code>&lt;</code>作为普通字符处理，然后继续处理其他字符。</p><p>由此可知，在 RCDATA 状态下，解析器不能识别标签元素。这其实间接说明了在<code>&lt;textarea&gt;</code>内可以将字符<code>&lt;</code>作为普通文本，解析器不会认为字符<code>&lt;</code>是标签开始的标志。</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token comment">&lt;!-- textarea 内部的标签将作为普通文本 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>abc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>hello\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">&lt;!-- textarea 能解析 HTML 实体 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span><span class="token punctuation">&gt;</span></span><span class="token entity named-entity" title="©">&amp;copy;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>在 RAWTEXT 模式下的工作方式与在 RCDATA 模式下类似。唯一不同的是，在 RAWTEXT 模式下，解析器将不再支持 HTML 实体。</p><p>对于 Vue.js 的模板 DSL 来说，模板中不允许出<code>&lt;script&gt;</code>标签，因此 Vue.js 模板解析器在遇到<code>&lt;script&gt;</code>标签时会进入 RAWTEXT 模式，这时它会把<code>&lt;script&gt;</code>标签内的内容全部作为普通文本处理。</p></li></ul><blockquote><p>不同的模式还会影响解析器对于终止解析的判断。WHATWG 中还定义了 PLAINTEXT 模式，该模式与 RAWTEXT 类似。不同的是，该模式一旦进入便不会再退出。Vue.js 的模板解析用不到该模式。</p></blockquote>',3),i=(0,t.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> TextMode <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token constant">DATA</span><span class="token operator">:</span> <span class="token string">&#39;DATA&#39;</span><span class="token punctuation">,</span>\n  <span class="token constant">RCDARA</span><span class="token operator">:</span> <span class="token string">&#39;RCDATA&#39;</span><span class="token punctuation">,</span>\n  <span class="token constant">RAWDATA</span><span class="token operator">:</span> <span class="token string">&#39;RAWDATA&#39;</span><span class="token punctuation">,</span>\n  <span class="token constant">CDATA</span><span class="token operator">:</span> <span class="token string">&#39;CDATA&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="递归下降算法构造模板-ast" tabindex="-1"><a class="header-anchor" href="#递归下降算法构造模板-ast" aria-hidden="true">#</a> 递归下降算法构造模板 AST</h2><h3 id="子节点类型" tabindex="-1"><a class="header-anchor" href="#子节点类型" aria-hidden="true">#</a> 子节点类型</h3><p>之前的模板 AST 的构建思路是先进行词法记号的分割，然后创建模板 AST。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 定义文本模式，作为一个状态表</span>\n<span class="token keyword">const</span> TextModes <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token constant">DATA</span><span class="token operator">:</span> <span class="token string">&#39;DATA&#39;</span><span class="token punctuation">,</span>\n  <span class="token constant">RCDATA</span><span class="token operator">:</span> <span class="token string">&#39;RCDATA&#39;</span><span class="token punctuation">,</span>\n  <span class="token constant">RAWTEXT</span><span class="token operator">:</span> <span class="token string">&#39;RAWTEXT&#39;</span><span class="token punctuation">,</span>\n  <span class="token constant">CDATA</span><span class="token operator">:</span> <span class="token string">&#39;CDATA&#39;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 解析器函数，接收模板作为参数，负责模板 AST 的创建</span>\n<span class="token keyword">function</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 定义上下文对象</span>\n  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token comment">// source 模板内容，用于解析过程消费</span>\n    source<span class="token operator">:</span> str<span class="token punctuation">,</span>\n    <span class="token comment">// 解析器当前的文本模式</span>\n    mode<span class="token operator">:</span> TextModes<span class="token punctuation">.</span><span class="token constant">DATA</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// parseChidren 函数解析，返回解析后得到的子节点</span>\n  <span class="token comment">// context: 上下文对象</span>\n  <span class="token comment">// Node[]: 父节点构成的节点栈，初始为空</span>\n  <span class="token keyword">const</span> nodes <span class="token operator">=</span> <span class="token function">parseChildren</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> <span class="token string">&#39;Root&#39;</span><span class="token punctuation">,</span>\n    <span class="token comment">// 使用 nodes 作为根节点的 children</span>\n    children<span class="token operator">:</span> nodes\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>✅ 创建 Token 与构造模板 AST 的过程可以同时进行，因为模板和模板 AST 具有同构的特性。</p><p><code>parseChidren</code>函数本质上也是一个状态机，该状态机有多少种状态取决于子节点的类型数量。</p>',7),_={class:"custom-container tip"},b=(0,t._)("p",{class:"custom-container-title"},"在模板中，元素的子节点可以是一下几种：",-1),m=(0,t._)("li",null,[(0,t.Uk)("标签节点，例如"),(0,t._)("code",null,"<div>")],-1),d=(0,t.Uk)("文本插值节点，例如"),U=(0,t._)("li",null,[(0,t.Uk)("普通文本节点，例如："),(0,t._)("code",null,"text")],-1),g=(0,t._)("li",null,[(0,t.Uk)("注释节点，例如"),(0,t._)("code",null,"\x3c!----\x3e")],-1),h=(0,t._)("li",null,[(0,t.Uk)("CDATA 节点，例如"),(0,t._)("code",null,"<![CDATA[ xxx ]]>")],-1),x=(0,t._)("p",null,"在标准的 HTML 中，节点的类型将会更多，例如 DOCTYPE 节点等。",-1),v=(0,t._)("h3",{id:"parsechildren",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#parsechildren","aria-hidden":"true"},"#"),(0,t.Uk)(" parseChildren")],-1),f=(0,t._)("p",null,"下图为 parseChildren 函数在解析模板过程中的状态迁移过程。",-1),y=(0,t._)("p",null,[(0,t._)("img",{src:"https://raw.githubusercontent.com/caffreygo/static/main/blog/Vuejs3/parseChildren.png",alt:""})],-1),w=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"parseChildren"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},[(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" ancestors")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token comment"},"// nodes 存储子节点，作为返回值"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" nodes "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n\t"),(0,t._)("span",{class:"token comment"},"// 从上下文对象取得当前状态，模式 mode 与模板内容 source"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" mode"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" source "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" context\n\t"),(0,t._)("span",{class:"token comment"},"// 解析字符串，遇到父级节点的结束标签可停止解析"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"while"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token operator"},"!"),(0,t._)("span",{class:"token function"},"isEnd"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" ancestors"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" node\n\t\t"),(0,t._)("span",{class:"token comment"},"// DATA 和 RCDATA 模式支持插值节点的解析"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("mode "),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(" TextModes"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token constant"},"DATA"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"||"),(0,t.Uk)(" mode "),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(" TextModes"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token constant"},"RCDATA"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token comment"},"// 只有 DATA 模式才支持标签节点的解析"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("mode "),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(" TextModes"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token constant"},"DATA"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"&&"),(0,t.Uk)(" context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'<'"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'!'"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n          "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"startsWith"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'\x3c!--'"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token comment"},"// 注释"),(0,t.Uk)("\n            node "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"parseComment"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n          "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"startsWith"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'<![CDATA['"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token comment"},"// CDATA"),(0,t.Uk)("\n            node "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"parseCDATA"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" ancestors"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n          "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'/'"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n          "),(0,t._)("span",{class:"token comment"},"// 结束标签，这里要抛出错误"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token regex"},[(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-source language-regex"},"[a-z]"),(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-flags"},"i")]),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"test"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n          "),(0,t._)("span",{class:"token comment"},"// 标签"),(0,t.Uk)("\n          node "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"parseElement"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" ancestors"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"startsWith"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'{{'"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token comment"},"// 解析插值"),(0,t.Uk)("\n        node "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"parseInterpolation"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    \n\t\t"),(0,t._)("span",{class:"token comment"},"// node 不存在，说明出于其他模式，非 DATA、RCDATA"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"// 这时一切内容都作为文本处理"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token operator"},"!"),(0,t.Uk)("node"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      node "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"parseText"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\t\t"),(0,t._)("span",{class:"token comment"},"// 将节点添加到数组中"),(0,t.Uk)("\n    nodes"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"push"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("node"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n  "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(" nodes\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"19"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"20"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"21"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"22"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"23"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"24"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"25"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"26"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"27"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"28"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"29"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"30"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"31"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"32"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"33"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"34"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"35"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"36"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"37"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"38"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"39"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"40"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"41"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"42"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"43"),(0,t._)("br")])],-1),T=(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("code",null,"parseChildren"),(0,t.Uk)(" 函数的返回值是子节点组成的数组，这里每次 while 循环都会解析一个或多个节点，这些节点会被添加到 node 数组中，并作为函数返回值。")]),(0,t._)("li",null,"只有 DATA 和 RCDATA 模式支持插值节点的解析；只有 DATA 模式才支持标签节点、注释节点和 CDATA 节点的解析。"),(0,t._)("li",null,"解析器在遇到特定标签时，会切换模式。一旦解析器切换到 DATA模式和 RCDATA 模式之外的模式时，一切内容都会作为文本节点被解析。当然，即使在 DATA 模式和 RCDATA 模式下，如果无法匹配标签节点、注释节点、CDATA 节点、插值节点，那么也会作为文本节点解析。")],-1),A=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" template "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token template-string"},[(0,t._)("span",{class:"token template-punctuation string"},"`"),(0,t._)("span",{class:"token string"},"<div>\n\t<p>Text1</p>\n\t<p>Text2</p>\n</div>"),(0,t._)("span",{class:"token template-punctuation string"},"`")]),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br")])],-1),j=(0,t._)("p",null,"解析模板时，不能忽略空白字符。这些空白字符包括：换行符（\\n）、回车符（\\t）、空格（' '）、制表符（\\t）以及换页符（\\f）。",-1),C=(0,t._)("p",null,"如果我们用（+）代表换行符，用（-）代表空格字符，那么模板可以表示为：",-1),D=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" template "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token template-string"},[(0,t._)("span",{class:"token template-punctuation string"},"`"),(0,t._)("span",{class:"token string"},"<div>+--<p>Text1</p>+--<p>Text1</p>+</div>"),(0,t._)("span",{class:"token template-punctuation string"},"`")]),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br")])],-1),E=(0,t._)("p",null,[(0,t.Uk)("解析器—开始处于 DATA 模式。开始执行解析后，解析器遇到的第一个字符为"),(0,t._)("code",null,"＜"),(0,t.Uk)("，并且第个字符能够匹配正则表达式 "),(0,t._)("code",null,"/a-z/t"),(0,t.Uk)("，所以解析器会进人标签节点状态，并调用 "),(0,t._)("code",null,"parseElement"),(0,t.Uk)("函数进行解析。")],-1),I=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"parseElement"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},[(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" ancestors")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token comment"},"// 解析开始标签"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" element "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"parseTag"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token comment"},"// 递归调用 parseChildren 解析子节点"),(0,t.Uk)("\n  element"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("children "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"parseChildren"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" ancestors"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token comment"},"// 解析结束标签"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token function"},"parseEndTag"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  \n  "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(" element\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br")])],-1),W=(0,t._)("div",{class:"custom-container tip"},[(0,t._)("p",{class:"custom-container-title"},"parseElement 函数会做三件事："),(0,t._)("ol",null,[(0,t._)("li",null,"解析开始标签"),(0,t._)("li",null,"解析子节点"),(0,t._)("li",null,"解析结束标签")])],-1),R=(0,t._)("p",null,":::",-1),S=(0,t.uE)('<h3 id="解析过程" tabindex="-1"><a class="header-anchor" href="#解析过程" aria-hidden="true">#</a> 解析过程</h3><details class="custom-container details"><summary>解析过程</summary><p>如果一个标签不是自闭合标签，则可以认为，一个完整的标签元素是由<strong>开始标签</strong>、<strong>子节点</strong>和<strong>结束标签</strong>这三部分构成的。因此，在 <code>parseElement</code> 函数内，我们分别调用三个解析函数来处理这三部分内容。以上述模板为例。</p><ul><li><code>parseTag</code> 解析开始标签。<code>parseTag</code> 函数用于解析开始标签，包括开始标签上的属性和指令。因此，在<code>parseTag</code> 解析函数执行完毕后，会消费字符串中的内容<code>&lt;div&gt;</code>，处理后的模板内容将变为：</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> template <span class="token operator">=</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">+--&lt;p&gt;Text1&lt;/p&gt;+--&lt;p&gt;Text2&lt;/p&gt;+&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><p>递归地调用 <code>parseChildren</code> 函数解析子 节点。<code>parseElement</code> 函数在解析开始标签时，会产生一个标签节点 element。在 <code>parseElement</code>函数执行完毕后，剩下的模板内容应该作为element 的子节点被解析，即 <code>element.children</code>。因此，我们要递归地调用 <code>parseChildren</code>函数。在这个过程中，<code>parsechildren</code>函数会消费字符串的内容：<code>+--&lt;p&gt;Text1&lt;/p&gt;+--&lt;p&gt;Text2&lt;/p&gt;+</code>。处理后的模板内容将变为：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> template <span class="token operator">=</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p><code>parseEndTag</code> 处理结束标签。可以看到，在经过 <code>parseChildren</code> 函数处理后，模板内容只剩下一个结束标签了。因此，只需要调用 <code>parseEndTag</code> 解析西数来消费它即可。</p></li></ul><p>经过上述三个步骤的处理后，这段模板就被解析完毕了，最终得到了模板 AST。但这里值得注意的是，为了解析标签的子节点，递归地调用了 <code>parseChildren</code> 函数。这意味着，一个新的状态机开始运行了，我们称其为“状态机 2”。“状态机 2”所处理的模板内容为：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">+--&lt;p&gt;Text1&lt;/p&gt;+--&lt;p&gt;Text2&lt;/p&gt;+</span><span class="token template-punctuation string">`</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>接下来，我们继续分析〝状态机 2” 的状态迁移流程。在“状态机 2〞开始运行时，模板的第一个字符是换行符(字符＋代表换行符)。因此，解析器会进入文本节点状态，并调用 <code>parseText</code>函数完成文本节点的解析。<code>parseText</code> 函数会将下一个<code>&lt;</code>字符之前的所有字符都视作文本节点的内容。换向话说，<code>parseText</code> 函数会消费模板内容<code>＋--</code>，并产生一个文本节点。在<code>parseText</code> 解析函数执行完毕后，剩下的模板内容为：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;p&gt;Text1&lt;/p&gt;+--&lt;p&gt;Text2&lt;/p&gt;+</span><span class="token template-punctuation string">`</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>接着，<code>parseChildren</code> 函数继续执行。此时模板的第一个字符为<code>&lt;</code>，并且下一个字符能够匹配正则 <code>/a-z/i</code>。于是解析器再次进人 <code>parseElement</code> 解析函数的执行阶段，这会消费模板内容<code>&lt;p&gt;Text1&lt;/p&gt;</code>。在这一步过后，剩下的模板内容为：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> template <span class="token operator">=</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">+--&lt;p&gt;Text2&lt;/p&gt;+</span><span class="token template-punctuation string">`</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>可以看到，此时模板的第一个字符是换行符，于是调用 <code>parseText</code> 函数消费模板内容<code>+--</code>现在，模板中剩下的内容是：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> template <span class="token operator">=</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;p&gt;Text2&lt;/p&gt;+</span><span class="token template-punctuation string">`</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>解析器会再次调用 parseElement 丽数处理标签节点。在这之后，剩下的模板内容为：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> template <span class="token operator">=</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">+</span><span class="token template-punctuation string">`</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>可以看到，现在模板内容只剩下一个换行符了。<code>parseChildren</code> 函数会继续执行并调用<code>parseText</code> 函数消费剩下的内容，并产生一个文本节点。最终，模板被解析完毕，“状态机2”停止运行。</p><p>在“状态机2”运行期间，为了处理标签节点，我们又调用了两次 <code>parseElement</code> 函数。第一次调用用于处理内容 <code>&lt;p&gt;Text1&lt;/p&gt;</code>，第二次调用用于处理内容 <code>&lt;p&gt;Text2&lt;/p&gt;</code>。我们知道<code>parseElement</code> 函数会递少地调用 <code>parsechildren</code> 函数完成子节点的解析，这就意味着解析器会再开启了两个新的状态机。</p></details><h3 id="递归与下降" tabindex="-1"><a class="header-anchor" href="#递归与下降" aria-hidden="true">#</a> 递归与下降</h3><p>✅ <code>parseChildren</code>解析函数是整个状态机的核心，状态迁移操作都在该函数内完成。在<code>parseChildren</code> 函数运行过程中，为了处理标签节点，会调用<code>parseElement</code> 解析函数，这会间接地调用 <code>parseChildren</code>函数，并产生一个新的状态机。</p><p><strong>递归</strong>：随着标签嵌套层次的增加，新的状态机会随着<code>parseChildren</code>函数递归地调用而不断创建，这就是“递归下降”中“递归”二字的含义。</p><p><strong>下降</strong>：而上级<code>parseChildren</code>函数的调用用于构造上级模板 AST，被递归调用的下级 <code>parseChildren</code> 函数则用于构造下级模板 AST 节点。最终，会构造出一棵树型结构的模板 AST，这就是“递归下降”中“下降”二字的含义。</p><h2 id="状态机的开启和停止" tabindex="-1"><a class="header-anchor" href="#状态机的开启和停止" aria-hidden="true">#</a> 状态机的开启和停止</h2><div class="custom-container tip"><p class="custom-container-title">✅ 概览</p><p>在解析模板 AST的过程中，parseChildren是核心。每次调用都意味着新状态机的开启。状态机的结束时机有两个：</p><ul><li>第一个停止时机是当模板内容被解析完毕时。</li><li>第二个停止时机是遇到结束标签时，这时解析器会取得父级节点栈栈顶的节点作为父节点，检查该节点结束标签是否与父节点的标签同名，如果相同，则状态机停止运行。</li></ul></div><p><code>parseChildren</code>函数本质上是一个状态机，它会开启一个 while 循环使得状态机自动运行。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">parseChildren</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> ancestors</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> nodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> mode <span class="token punctuation">}</span> <span class="token operator">=</span> context\n  <span class="token comment">// 运行状态机</span>\n  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnd</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ancestors<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 省略部分代码</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> nodes\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="isend-v1" tabindex="-1"><a class="header-anchor" href="#isend-v1" aria-hidden="true">#</a> isEnd.v1</h3><p>当解析器遇到开始标签时，会将该标签压入父级节点栈，同时开启新的状态机。当解析器遇到结束标签，井且父级节点栈中存在与该标签同名的开始标签节点时，会停止当前正在运行的状态机。根据上述规则，我们可以给出<code>isEnd</code>函数的逻辑，如下面的代码所示：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isEnd</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> ancestors</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 当解析内容解析完毕之后，停止</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>source<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>\n  <span class="token keyword">const</span> parent <span class="token operator">=</span> ancestors<span class="token punctuation">[</span>ancestors<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>\n  <span class="token comment">// 遇到与父节点同名的结束标签时，停止</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>parent<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>这个判断方式是有瑕疵的，以下面这个模板为例：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol><li>目前代码“状态机1“会遇到 div 会开启一个“状态机2“</li><li>接着遇到 span 再开启一个“状态机3“</li><li>“状态机3“解析时遇到了<code>&lt;/div&gt;</code>这个结束标签，与当前 span 标签不符。则“状态机3“抛出错误：“无效的结束标签”</li></ol><p><img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/Vuejs3/parseTag1.png" alt=""></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">parseChildren</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> ancestors</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> nodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> mode <span class="token punctuation">}</span> <span class="token operator">=</span> context\n\n  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnd</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ancestors<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> node\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">===</span> TextModes<span class="token punctuation">.</span><span class="token constant">DATA</span> <span class="token operator">||</span> mode <span class="token operator">===</span> TextModes<span class="token punctuation">.</span><span class="token constant">RCDATA</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">===</span> TextModes<span class="token punctuation">.</span><span class="token constant">DATA</span> <span class="token operator">&amp;&amp;</span> context<span class="token punctuation">.</span>source<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;&lt;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;!--&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 注释</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;![CDATA[&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// CDATA</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 结束标签，这里要抛出错误，因为它缺少对应的开始标签</span>\n          console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;无效的结束标签&#39;</span><span class="token punctuation">)</span>\n          <span class="token keyword">continue</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// ...</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;{{&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// ...</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> nodes\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>当前解释方式是会得到错误信息：“无效的结束标签”。</p><h3 id="isend-v2" tabindex="-1"><a class="header-anchor" href="#isend-v2" aria-hidden="true">#</a> isEnd.v2</h3><p>✅ 还有一种解释方式，在“完整的内容”部分被解析完毕后，解析器就会打印错误信息：“<code>&lt;span&gt;</code>标签缺少闭合标签”。</p><p><img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/Vuejs3/parseTag2.png" alt=""></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isEnd</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> ancestors</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>source<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>\n\n  <span class="token comment">// 与节点栈内全部的节点比较</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> ancestors<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ancestors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ol><li>”状态机1”遇到 div 会开启一个”状态机2”；</li><li>接着遇到 span 再开启一个”状态机3”；</li><li>”状态机3”这个状态机解析时遇到了<code>&lt;/div&gt;</code>这个结束标签，在节点栈中找到了存在名为 div 的标签节点。于是状态机3停止。</li></ol><p>在这个过程中，“状态机2”在调用<code>parseElement</code>函数时检测到<code>&lt;span&gt;</code>缺少闭合标签，打印“<code>&lt;span&gt;</code>缺少闭合标签”。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">parseElement</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> ancestors</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token function">parseTag</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>isSelfClosing<span class="token punctuation">)</span> <span class="token keyword">return</span> element\n\n  ancestors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>\n  element<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token function">parseChildren</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ancestors<span class="token punctuation">)</span>\n  ancestors<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>element<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">parseTag</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">&#39;end&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>element<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 标签缺少闭合标签</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> element\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="解析标签节点" tabindex="-1"><a class="header-anchor" href="#解析标签节点" aria-hidden="true">#</a> 解析标签节点</h2><p>在上面给出的<code>parseElement</code>函数的实现中，无论是解析开始标签还是闭合标签，都调用了<code>parseTag</code>函数。同时，使用<code>parseChildren</code>函数来解析开始标签与闭合标签中间的部分。</p><p><img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/Vuejs3/parseTag.png" alt=""></p><p><code>parseTag</code>函数通过第二个参数区分当前解析的是开始标签还是闭合标签。另外，无论是处理的是哪个标签，该函数都会消费对应的内容。</p>',30),M=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"parse"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"str"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token comment"},"// 上下文对象"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" context "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"// 模板内容"),(0,t.Uk)("\n    source"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(" str"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    mode"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(" TextModes"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token constant"},"DATA"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"// 消费指定数量的字符"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token function"},"advanceBy"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"num"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"slice"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("num"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"// 消费空白字符"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token function"},"advanceSpaces"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" match "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token regex"},[(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-source language-regex"},"^[\\t\\r\\n\\f ]+"),(0,t._)("span",{class:"token regex-delimiter"},"/")]),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"exec"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("match"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"advanceBy"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("match"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n  "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" nodes "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"parseChildren"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\n  "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    type"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'Root'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    children"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(" nodes\n  "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"highlight-lines"},[(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br")]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"19"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"20"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"21"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"22"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"23"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"24"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"25"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"26"),(0,t._)("br")])],-1),H=(0,t._)("p",null,"正则测试：",-1),L=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token regex"},[(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-source language-regex"},"^[\\t\\r\\n\\f ]+"),(0,t._)("span",{class:"token regex-delimiter"},"/")]),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"exec"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token template-string"},[(0,t._)("span",{class:"token template-punctuation string"},"`"),(0,t._)("span",{class:"token string"},"   <div>"),(0,t._)("span",{class:"token template-punctuation string"},"`")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token comment"},"// ['   ', index: 0, input: '   <div>', groups: undefined]"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br")])],-1),B=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"parseTag"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" type "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'start'"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" advanceBy"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" advanceSpaces "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" context\n\n  "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" match "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" type "),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'start'"),(0,t.Uk)("\n  \t"),(0,t._)("span",{class:"token comment"},"// 匹配开始标签"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token operator"},"?"),(0,t.Uk)(),(0,t._)("span",{class:"token regex"},[(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-source language-regex"},"^<([a-z][^\\t\\r\\n\\f />]*)"),(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-flags"},"i")]),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"exec"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  \t"),(0,t._)("span",{class:"token comment"},"// 匹配结束标签"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token regex"},[(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-source language-regex"},"^<\\/([a-z][^\\t\\r\\n\\f />]*)"),(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-flags"},"i")]),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"exec"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  \n  "),(0,t._)("span",{class:"token comment"},"// 获取匹配的标签名称"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" tag "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" match"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n\t"),(0,t._)("span",{class:"token comment"},"// 消费正则匹配的全部内容 '<div'  '</div'"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token function"},"advanceBy"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("match"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token comment"},"// 消费标签中无用的空白字符"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token function"},"advanceSpaces"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\n  "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" props "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"parseAttributes"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\t"),(0,t._)("span",{class:"token comment"},"// 消费完匹配内容，判断当标签是不是自闭合标签"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" isSelfClosing "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"startsWith"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'/>'"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token comment"},"// 消费标签全部内容"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token function"},"advanceBy"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("isSelfClosing "),(0,t._)("span",{class:"token operator"},"?"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"2"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\n  "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    type"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'Element'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    tag"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("  "),(0,t._)("span",{class:"token comment"},"// 标签名"),(0,t.Uk)("\n    props"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    children"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    isSelfClosing  "),(0,t._)("span",{class:"token comment"},"// 是不是自闭合标签"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"19"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"20"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"21"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"22"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"23"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"24"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"25"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"26"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"27"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"28"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"29"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"30"),(0,t._)("br")])],-1),z=(0,t._)("p",null,"正则测试：",-1),q=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token regex"},[(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-source language-regex"},"^<([a-z][^\\t\\r\\n\\f />]*)"),(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-flags"},"i")]),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"exec"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token template-string"},[(0,t._)("span",{class:"token template-punctuation string"},"`"),(0,t._)("span",{class:"token string"},"<div>hello</div>"),(0,t._)("span",{class:"token template-punctuation string"},"`")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token comment"},"// ['<div', 'div', index: 0, input: '<div>hello</div>', groups: undefined]"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token operator"},"/"),(0,t._)("span",{class:"token operator"},"^"),(0,t._)("span",{class:"token operator"},"<"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("a"),(0,t._)("span",{class:"token operator"},"-"),(0,t.Uk)("z"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token operator"},"^"),(0,t.Uk)("\\t\\r\\n\\f "),(0,t._)("span",{class:"token operator"},"/"),(0,t._)("span",{class:"token operator"},">"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token operator"},"*"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token operator"},"/"),(0,t.Uk)("i"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"exec"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token template-string"},[(0,t._)("span",{class:"token template-punctuation string"},"`"),(0,t._)("span",{class:"token string"},"<div  >hello</div>"),(0,t._)("span",{class:"token template-punctuation string"},"`")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token comment"},"// ['<div', 'div', index: 0, input: '<div  >hello</div>', groups: undefined]"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token operator"},"/"),(0,t._)("span",{class:"token operator"},"^"),(0,t._)("span",{class:"token operator"},"<"),(0,t.Uk)("\\"),(0,t._)("span",{class:"token regex"},[(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-source language-regex"},"([a-z][^\\t\\r\\n\\f />]*)"),(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-flags"},"i")]),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"exec"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token template-string"},[(0,t._)("span",{class:"token template-punctuation string"},"`"),(0,t._)("span",{class:"token string"},"</p><p></p>"),(0,t._)("span",{class:"token template-punctuation string"},"`")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token comment"},"// ['</p', 'p', index: 0, input: '</p><p></p>', groups: undefined]"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br")])],-1),V=(0,t._)("blockquote",null,[(0,t._)("p",null,[(0,t._)("code",null,"[^\\t\\r\\n\\f />]"),(0,t.Uk)(" 匹配非空白符，非字符 / 和字符 >")])],-1),N=(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("code",null,"parseTag"),(0,t.Uk)("函数既用于解析开始标签，也用于解析结束标签")]),(0,t._)("li",null,"通过正则匹配当前标签是开始标签还是结束标签")],-1),O=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"parseElement"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},[(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" ancestors")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" element "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"parseTag"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("element"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("isSelfClosing"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(" element\n\n  ancestors"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"push"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("element"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token comment"},"// 切换到正确的文本模式"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("element"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("tag "),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'textarea'"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"||"),(0,t.Uk)(" element"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("tag "),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'title'"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("mode "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" TextModes"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token constant"},"RCDATA"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token regex"},[(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-source language-regex"},"style|xmp|iframe|noembed|noframes|noscript"),(0,t._)("span",{class:"token regex-delimiter"},"/")]),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"test"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("element"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("tag"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("mode "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" TextModes"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token constant"},"RAWTEXT"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("mode "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" TextModes"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token constant"},"DATA"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  element"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("children "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"parseChildren"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" ancestors"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  ancestors"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"pop"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ns\n  "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"startsWith"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token template-string"},[(0,t._)("span",{class:"token template-punctuation string"},"`"),(0,t._)("span",{class:"token string"},"</"),(0,t._)("span",{class:"token interpolation"},[(0,t._)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,t.Uk)("element"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("tag"),(0,t._)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,t._)("span",{class:"token template-punctuation string"},"`")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token function"},"parseTag"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'end'"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    console"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"error"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token template-string"},[(0,t._)("span",{class:"token template-punctuation string"},"`"),(0,t._)("span",{class:"token interpolation"},[(0,t._)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,t.Uk)("element"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("tag"),(0,t._)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,t._)("span",{class:"token string"}," 标签缺少闭合标签"),(0,t._)("span",{class:"token template-punctuation string"},"`")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n  "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(" element\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"highlight-lines"},[(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br")]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"19"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"20"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"21"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"22"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"23"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"24"),(0,t._)("br")])],-1),P=(0,t._)("p",null,[(0,t.Uk)("经过"),(0,t._)("code",null,"parseTag"),(0,t.Uk)("的处理之后，会返回一个标签节点。"),(0,t._)("code",null,"parseElement"),(0,t.Uk)("函数在得到由"),(0,t._)("code",null,"parseTag"),(0,t.Uk)("函数产生的标签节点后，需要根据节点的类型完成"),(0,t._)("strong",null,"文本模式的切换"),(0,t.Uk)("。")],-1),X=(0,t.uE)('<h2 id="解析属性" tabindex="-1"><a class="header-anchor" href="#解析属性" aria-hidden="true">#</a> 解析属性</h2><p><code>parseTag</code>解析函数会消费整个开始标签，这意味着同时它还要能够处理开始标签存在的<strong>属性</strong>与<strong>指令</strong>。</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>foo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>display<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">属性值的三种情况</p><ul><li>属性值被双引号包裹：<code>id=&quot;doo&quot;</code></li><li>属性值被单引号包裹：<code>id=&#39;doo&#39;</code></li><li>属性值没有引号包裹：<code>id=doo</code></li></ul></div>',4),G=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"parseTag"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" type "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'start'"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" advanceBy"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" advanceSpaces "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" context\n\n  "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" match "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" type "),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'start'"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token operator"},"?"),(0,t.Uk)(),(0,t._)("span",{class:"token regex"},[(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-source language-regex"},"^<([a-z][^\\t\\r\\n\\f />]*)"),(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-flags"},"i")]),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"exec"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token regex"},[(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-source language-regex"},"^<\\/([a-z][^\\t\\r\\n\\f />]*)"),(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-flags"},"i")]),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"exec"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  \n  "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" tag "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" match"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n\t"),(0,t._)("span",{class:"token comment"},"// 消费正则匹配的全部内容 '<div'  '</div'"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token function"},"advanceBy"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("match"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token comment"},"// 消费标签中无用的空白字符"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token function"},"advanceSpaces"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\t"),(0,t._)("span",{class:"token comment"},"// 解析属性和指令"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" props "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"parseAttributes"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\t"),(0,t._)("span",{class:"token comment"},"// 消费完匹配内容，判断当标签是不是自闭合标签"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" isSelfClosing "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"startsWith"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'/>'"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token comment"},"// 消费标签全部内容"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token function"},"advanceBy"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("isSelfClosing "),(0,t._)("span",{class:"token operator"},"?"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"2"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\n  "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    type"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'Element'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    tag"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("  "),(0,t._)("span",{class:"token comment"},"// 标签名"),(0,t.Uk)("\n    props"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    children"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    isSelfClosing  "),(0,t._)("span",{class:"token comment"},"// 是不是自闭合标签"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"highlight-lines"},[(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br")]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"19"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"20"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"21"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"22"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"23"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"24"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"25"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"26"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"27"),(0,t._)("br")])],-1),$=(0,t._)("p",null,[(0,t.Uk)("我们需要在消费标签的“开始部分”和无用空白字符之后，再调用"),(0,t._)("code",null,"parseAttributes"),(0,t.Uk)("函数。")],-1),J=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token comment"},"// ..."),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" tag "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" match"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token function"},"advanceBy"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("match"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token function"},"advanceSpaces"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\nconsole"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"log"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t._)("span",{class:"token comment"},'// id="foo" v-show="display" />'),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token function"},"parseAttributes"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br")])],-1),Q=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"parseAttributes"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"context"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" advanceBy"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" advanceSpaces "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" context\n  "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" props "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n\n  "),(0,t._)("span",{class:"token comment"},"// 循环不断消费模板内容，直至遇到标签的“结束部分”为止"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"while"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token operator"},"!"),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"startsWith"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'>'"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"&&"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token operator"},"!"),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"startsWith"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'/>'"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n\t\t"),(0,t._)("span",{class:"token comment"},"// 匹配属性名称"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" match "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token regex"},[(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-source language-regex"},"^[^\\t\\r\\n\\f />][^\\t\\r\\n\\f />=]*"),(0,t._)("span",{class:"token regex-delimiter"},"/")]),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"exec"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" name "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" match"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n\n    "),(0,t._)("span",{class:"token function"},"advanceBy"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("name"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t._)("span",{class:"token comment"},"// 属性名"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token function"},"advanceSpaces"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t._)("span",{class:"token comment"},"// 属性名与等于号之间的空白字符"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token function"},"advanceBy"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t._)("span",{class:"token comment"},"// 等于号"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token function"},"advanceSpaces"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t._)("span",{class:"token comment"},"// 等于号与属性值之间的空白符"),(0,t.Uk)("\n\n    "),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" value "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"''"),(0,t.Uk)("  "),(0,t._)("span",{class:"token comment"},"// 属性值"),(0,t.Uk)("\n\n    "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" quote "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" isQuoted "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" quote "),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'\"'"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"||"),(0,t.Uk)(" quote "),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t._)("span",{class:"token string"},'"\'"'),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("isQuoted"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token comment"},"// 属性值被引号包裹，消费引号"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token function"},"advanceBy"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" endQuoteIndex "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"indexOf"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("quote"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("endQuoteIndex "),(0,t._)("span",{class:"token operator"},">"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"-"),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token comment"},"// 获取属性值并消费"),(0,t.Uk)("\n        value "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"slice"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" endQuoteIndex"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token function"},"advanceBy"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("value"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token function"},"advanceBy"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t._)("span",{class:"token comment"},"// 消费引号"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        console"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"error"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'缺少引号'"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token comment"},"// 属性值未被引号包裹"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token comment"},"// 下一个空白字符之前的内容全部作为属性值"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" match "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token regex"},[(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-source language-regex"},"^[^\\t\\r\\n\\f >]+"),(0,t._)("span",{class:"token regex-delimiter"},"/")]),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"exec"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n      value "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" match"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token function"},"advanceBy"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("value"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n    "),(0,t._)("span",{class:"token function"},"advanceSpaces"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t._)("span",{class:"token comment"},"// 消费属性值后面的空白字符"),(0,t.Uk)("\n\n    props"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"push"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      type"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'Attribute'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n      name"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n      value\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\n  "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n  "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(" props\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"19"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"20"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"21"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"22"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"23"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"24"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"25"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"26"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"27"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"28"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"29"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"30"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"31"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"32"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"33"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"34"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"35"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"36"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"37"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"38"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"39"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"40"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"41"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"42"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"43"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"44"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"45"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"46"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"47"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"48"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"49"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"50"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"51"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"52"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"53"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"54"),(0,t._)("br")])],-1),F=(0,t._)("p",null,[(0,t._)("code",null,"parseAttributes"),(0,t.Uk)("函数消费模板内容的过程，就是不断地解析属性名称、等于号、属性值的过程。")],-1),Y=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token comment"},"// 属性名称匹配"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token operator"},"/"),(0,t._)("span",{class:"token operator"},"^"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token operator"},"^"),(0,t.Uk)("\\t\\r\\n\\f "),(0,t._)("span",{class:"token operator"},"/"),(0,t._)("span",{class:"token operator"},">"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token operator"},"^"),(0,t.Uk)("\\t\\r\\n\\f "),(0,t._)("span",{class:"token operator"},"/"),(0,t._)("span",{class:"token operator"},">="),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token operator"},"*"),(0,t._)("span",{class:"token operator"},"/"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"exec"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token template-string"},[(0,t._)("span",{class:"token template-punctuation string"},"`"),(0,t._)("span",{class:"token string"},'id="123"'),(0,t._)("span",{class:"token template-punctuation string"},"`")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token comment"},"// ['id', index: 0, input: 'id=\"123\"', groups: undefined]"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token comment"},"// 没有引号包裹的属性值匹配1"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token operator"},"/"),(0,t._)("span",{class:"token operator"},"^"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token operator"},"^"),(0,t.Uk)("\\t\\r\\n\\f "),(0,t._)("span",{class:"token operator"},">"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token operator"},"+"),(0,t._)("span",{class:"token operator"},"/"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"exec"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token template-string"},[(0,t._)("span",{class:"token template-punctuation string"},"`"),(0,t._)("span",{class:"token string"},"val name='jhon'"),(0,t._)("span",{class:"token template-punctuation string"},"`")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token comment"},"// ['val', index: 0, input: \"val name='jhon'\", groups: undefined]"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br")])],-1),K=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token comment"},"//  <div"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token comment"},'//    id="foo"'),(0,t.Uk)("\n"),(0,t._)("span",{class:"token comment"},'//    v-show="display"'),(0,t.Uk)("\n"),(0,t._)("span",{class:"token comment"},'//    @click=""handler"'),(0,t.Uk)("\n"),(0,t._)("span",{class:"token comment"},'//    v-on:mousedown="onMouseDown">'),(0,t.Uk)("\n"),(0,t._)("span",{class:"token comment"},"//  </div>"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" ast "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  type"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'Root'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n  chidlren"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      type"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'Element'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n      tag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'div'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n      props"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" type"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'Attribute'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" name"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'id'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" value"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'foo'"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" type"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'Attribute'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" name"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'v-show'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" value"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'display'"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" type"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'Attribute'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" name"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'@click'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" value"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'handler'"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" type"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'Attribute'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" name"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'v-on:mousedown'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" value"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'onMouseDown'"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"19"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"20"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"21"),(0,t._)("br")])],-1),Z=(0,t._)("blockquote",null,[(0,t._)("p",null,[(0,t.Uk)("我们可以灵活地解析出属性的类型，比如指令可以指定"),(0,t._)("code",null,"type = Directive")])],-1),nn=(0,t.uE)('<h2 id="解析文本与解析-html-实体" tabindex="-1"><a class="header-anchor" href="#解析文本与解析-html-实体" aria-hidden="true">#</a> 解析文本与解析 HTML 实体</h2><div class="custom-container tip"><p class="custom-container-title">✅ 概览</p><p>解析文本节点并不复杂，它的复杂点在于，我们需要对解析后的文本内容进行 HTML 实体的解码工作。WHATWG 规范中也定义了解码 HTML 实体过程中的状态迁移过程。HTML 实体类型有两种，分别是命名字符引用和数字字符引用。命名字符引用的解码方式可以总结为两种。</p><ul><li>当存在分号时：执行完整匹配。</li><li>当省略分号时：执行最短匹配。</li></ul><p>对于数字字符引用，则按照 WHATWG 规范中定义的规则逐步实现。</p></div><h3 id="解析文本" tabindex="-1"><a class="header-anchor" href="#解析文本" aria-hidden="true">#</a> 解析文本</h3><p>当解析下面这个模板时：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token string">&#39;&lt;div&gt;Text&lt;/div&gt;&#39;</span>\n<span class="token comment">// parseTag &#39;&lt;div&gt;&#39;</span>\n<span class="token keyword">const</span> templaye <span class="token operator">=</span> <span class="token string">&#39;Text&lt;/div&gt;&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>紧接着，解析器会调用<code>parseChildren</code>开启一个新的状态机来处理这段模板。状态机的迁移过程如下：</p><p><img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/Vuejs3/parseText.png" alt=""></p><p>解析器会在模板中寻找下一个<code>&lt;</code>字符或插值定界符的位置索引，记为索引 I 。然后，解析器会从模板头部到索引 I 的位置截取内容，这段截取出来的字符串将作为文本节点的内容。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token string">&#39;Text&lt;/div&gt;&#39;</span>  <span class="token comment">// Text  &lt;</span>\n<span class="token keyword">const</span> template1 <span class="token operator">=</span> <span class="token string">&#39;Text-{{ val }}&lt;/div&gt;&#39;</span>  <span class="token comment">// Text-  {{</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',9),sn=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"parseText"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"context"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token comment"},"// endIndex 为文本内容的结尾索引，默认为整个模板剩余内容"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" endIndex "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("length\n  "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" ltIndex "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"indexOf"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'<'"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" delimiterIndex "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"indexOf"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'{{'"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  \n  "),(0,t._)("span",{class:"token comment"},"// 取 ItIndex 和当前 endIndex 中较小的一个作为新的结尾索引"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("ltIndex "),(0,t._)("span",{class:"token operator"},">"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"-"),(0,t._)("span",{class:"token number"},"1"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"&&"),(0,t.Uk)(" ltIndex "),(0,t._)("span",{class:"token operator"},"<"),(0,t.Uk)(" endIndex"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    endIndex "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" ltIndex\n  "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token comment"},"// 取 delimiterIndex 和当前 endIndex 中较小的一个作为新的结尾索引"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("delimiterIndex "),(0,t._)("span",{class:"token operator"},">"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"-"),(0,t._)("span",{class:"token number"},"1"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"&&"),(0,t.Uk)(" delimiterIndex "),(0,t._)("span",{class:"token operator"},"<"),(0,t.Uk)(" endIndex"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    endIndex "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" delimiterIndex\n  "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token comment"},"// 截取文本内容"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" content "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"slice"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" endIndex"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\t"),(0,t._)("span",{class:"token comment"},"// 消费文本"),(0,t.Uk)("\n  context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"advanceBy"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("content"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\n  "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    type"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'Text'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    content"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"decodeHtml"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("content"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"19"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"20"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"21"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"22"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"23"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"24"),(0,t._)("br")])],-1),an=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token comment"},"// const ast = parse(`<div>Text</div>`)"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" ast "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  type"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'Root'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n  chidlren"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      type"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'Element'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n      tag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'div'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n      props"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n      isSelfClosing"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token boolean"},"false"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n      children"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token comment"},"// 文本节点"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" type"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'Text'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" content"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'Text'"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br")])],-1),tn=(0,t._)("p",null,"文本节点的解析并不复杂，复杂点在于，我们需要对解析后的文本进行 HTML 实体的解码工作。",-1),en=(0,t._)("h3",{id:"解码命名字符的引用",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#解码命名字符的引用","aria-hidden":"true"},"#"),(0,t.Uk)(" 解码命名字符的引用")],-1),pn=(0,t._)("p",null,[(0,t._)("img",{src:"https://raw.githubusercontent.com/caffreygo/static/main/blog/Vuejs3/decodeHtml.png",alt:""})],-1),on={class:"custom-container details"},cn=(0,t.uE)('<summary>HTML 实体</summary><p>HTML 实体是一段以字符&amp;开始的文本内容。实体用来描述 HTML 中的保留字符和一些难以通过普通键盘输人的字符，以及一些不可见的宇符。例如，在 HTML 中，字符＜具有特殊含义，如果希望以普通文本的方式来显示宇符＜，需要通过实体来表达：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>A<span class="token entity named-entity" title="&lt;">&amp;lt;</span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>其中字符串 <code>&amp;1t；</code>就是一个 HTML 实体，用来表示字符＜。如果我们不用 HTML 实体，而是直接使用字符＜，那么将会产生非法的 HTML 内容：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>A&lt;B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>⚡️ 这会导致浏览器的解析结果不符合预期。</p><blockquote><p>HTML 实体总是以字符 &amp; 开头，以字符 ; 结尾。在web诞生的初期，HTML 实体的数量较少，因此允许省略其中的尾分号。但随着 HTML 宇符集越来越大，HTML 实体出现了包含的情况，例如 <code>&amp;lt</code> 和 <code>&amp;ltcc</code> 都是合法的实体，如果不加分号，测览器将无法区分它们。因此，WHATWG规范中明确规定，如果不为实体加分号，将会产生解析错误。但考虑到历史原因(互联网上存在大量省略分号的情況），现代浏览器都能够解析早期规范中定义的那些可以省略分号的 HTML 实体。</p></blockquote>',7),ln={class:"custom-container tip"},rn=(0,t._)("p",{class:"custom-container-title"},"HTML 实体",-1),un=(0,t._)("p",null,[(0,t.Uk)("命名字符引用（named character reference），也叫命名实体（named entity）。顾名思义，这类实体具有特定的名称，例如"),(0,t._)("code",null,"$lt;"),(0,t.Uk)("。")],-1),kn=(0,t.Uk)("🌐 "),_n={href:"https://html.spec.whatwg.org/multipage/named-characters.html#named-character-references",target:"_blank",rel:"noopener noreferrer"},bn=(0,t.Uk)("named character reference (opens new window)"),mn=(0,t.uE)("<li><p>数字字符引用（numeric character reference）。它们没有特定的名称，只能用数字表示。</p><p>与命名字符引用用不同，数字字符引用以宇符 <code>&amp;#</code> 开头，比命名字符引用的开头部分多出了字符 #，例如<code>&amp;#60;</code>。实际上，<code>&amp;#60;</code>对应的字符也是 &lt;，换句话说，<code>＆#60;</code>与<code>&amp;lt;</code>是等价的。数字字符引用既可以用十进制来表示，也可以使用十六进制来表示。例如，十进制数字 60 对应的十六进制值为 3C，因此实体 <code>&amp;#60;</code>也可以表示为 <code>&amp;#x3c;</code>。可以看到，当使用十六进制数表示实体时，需要以字符串<code>&amp;#x</code> 开头。</p></li>",1),dn=(0,t.uE)('<div class="custom-container warning"><p class="custom-container-title">为什么 Vue.js 模板的解析器要对文本节点中的 HTML 实体进行解码？</p><p>在 Vue.js 模板中，文本节点所包含的 HTML 实体不会被浏览器解析。这是因为模板中的文本节点最终将通过如 <code>el.textcontent</code>等操作方法设置到页面，而通过<code>el.textContent</code>设置的文本内容是不会经过 HTML 实体解码的。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>el<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">&#39;&amp;lt;&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>✅ 最终 el 的文本内容将会<strong>原封不动</strong>地呈现为字符串<code>&#39;&amp;lt;&#39;</code>，这意味着用户在 Vue.js 模板中写了 HTML 实体，而模板解析器渲染的内容不符合用户预期。所以我们需要在解析阶段对文本节点中存在的 HTML 实体进行解码。</p></div>',1),Un=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" namedCharacterReferences "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token string"},'"gt"'),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},'">"'),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token string"},'"gt;"'),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},'">"'),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token string"},'"lt"'),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},'"<"'),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token string"},'"lt;"'),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},'"<"'),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token string"},'"ltcc;"'),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},'"⪦"'),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br")])],-1),gn=(0,t._)("p",null,"以上是一个部分命名字符引用表，相同的字符对应的实体会有多个，既有带分号的，也有不带分号的。而有一些则只有带分号的版本，因为这些实体不允许省略分号。",-1),hn=(0,t._)("ul",null,[(0,t._)("li",null,"当存在分号时：执行完整匹配"),(0,t._)("li",null,"当省略分号时：执行最短匹配")],-1),xn=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"decodeHtml"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},[(0,t.Uk)("rawText"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" asAttr "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token boolean"},"false")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" offset "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" end "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" rawText"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("length\n  "),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" decodedText "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"''"),(0,t.Uk)("  "),(0,t._)("span",{class:"token comment"},"// 解码后的返回值"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" maxCRNameLength "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0"),(0,t.Uk)("\n\n  "),(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"advance"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"length"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    offset "),(0,t._)("span",{class:"token operator"},"+="),(0,t.Uk)(" length\n    rawText "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" rawText"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"slice"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("length"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\t"),(0,t._)("span",{class:"token comment"},"// 消费字符串，直到处理完为止"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"while"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("offset "),(0,t._)("span",{class:"token operator"},"<"),(0,t.Uk)(" end"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" head "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token regex"},[(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-source language-regex"},"&(?:#x?)?"),(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-flags"},"i")]),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"exec"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("rawText"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"// 没有匹配到内容，说明没有需要解码的内容，直接消费"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token operator"},"!"),(0,t.Uk)("head"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" remaining "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" end "),(0,t._)("span",{class:"token operator"},"-"),(0,t.Uk)(" offset\n      decodedText "),(0,t._)("span",{class:"token operator"},"+="),(0,t.Uk)(" rawText"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"slice"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" remaining"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token function"},"advance"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("remaining"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token keyword"},"break"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"// 消费 & 字符之前的普通文本"),(0,t.Uk)("\n    decodedText "),(0,t._)("span",{class:"token operator"},"+="),(0,t.Uk)(" rawText"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"slice"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" head"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("index"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token function"},"advance"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("head"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("index"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\n    "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("head"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'&'"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token comment"},"// 命名字符引用，否则为数字字符引用"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" name "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"''"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" value\n      "),(0,t._)("span",{class:"token comment"},"// 字符 & 的下一个字符必须是 ASCII 字母或数字，这才是合法的命名字符引用"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token regex"},[(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-source language-regex"},"[0-9a-z]"),(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-flags"},"i")]),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"test"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("rawText"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token comment"},"// 根据引用表计算实体名称的最大长度"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token operator"},"!"),(0,t.Uk)("maxCRNameLength"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n          maxCRNameLength "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" Object"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"keys"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("namedCharacterReferences"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"reduce"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},[(0,t.Uk)("max"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" name")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(" Math"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"max"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("max"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" name"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token number"},"0"),(0,t.Uk)("\n          "),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token comment"},"// 从最大长度进行尝试截取匹配"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token keyword"},"for"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" length "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" maxCRNameLength"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"!"),(0,t.Uk)("value "),(0,t._)("span",{class:"token operator"},"&&"),(0,t.Uk)(" length "),(0,t._)("span",{class:"token operator"},">"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"--"),(0,t.Uk)("length"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n          name "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" rawText"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"substr"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" length"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n          value "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("namedCharacterReferences"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("name"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token comment"},"// 找到对应项的值，匹配成功"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("value"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        \t"),(0,t._)("span",{class:"token comment"},"// 检查实体名称的最后一个字符是不是分号"),(0,t.Uk)("\n          "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" semi "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" name"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"endsWith"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"';'"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n          "),(0,t._)("span",{class:"token comment"},"// 如果解码的文本作为属性值，最后一个匹配字符不是分号"),(0,t.Uk)("\n          "),(0,t._)("span",{class:"token comment"},"// 并且最后一个匹配字符的下一个字符是等于号（=）、ASCII 字母或数字"),(0,t.Uk)("\n          "),(0,t._)("span",{class:"token comment"},'// 由于历史原因，将字符 & 和实体名称 name 作为普通文本  href="foo.com?a=1&lt=2"'),(0,t.Uk)("\n          "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("\n            asAttr "),(0,t._)("span",{class:"token operator"},"&&"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token operator"},"!"),(0,t.Uk)("semi "),(0,t._)("span",{class:"token operator"},"&&"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token regex"},[(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-source language-regex"},"[=a-z0-9]"),(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-flags"},"i")]),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"test"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("rawText"),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("name"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("length "),(0,t._)("span",{class:"token operator"},"+"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"||"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"''"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n          "),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n            decodedText "),(0,t._)("span",{class:"token operator"},"+="),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'&'"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"+"),(0,t.Uk)(" name\n            "),(0,t._)("span",{class:"token function"},"advance"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"1"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"+"),(0,t.Uk)(" name"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n          "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token comment"},"// 其他情况下，使用解码后的内容拼接到 decodedText 上"),(0,t.Uk)("\n            decodedText "),(0,t._)("span",{class:"token operator"},"+="),(0,t.Uk)(" value\n            "),(0,t._)("span",{class:"token function"},"advance"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"1"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"+"),(0,t.Uk)(" name"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n          "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n          decodedText "),(0,t._)("span",{class:"token operator"},"+="),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'&'"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"+"),(0,t.Uk)(" name\n          "),(0,t._)("span",{class:"token function"},"advance"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"1"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"+"),(0,t.Uk)(" name"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token comment"},"// 如果没找到对应字符，说明解码失败"),(0,t.Uk)("\n        decodedText "),(0,t._)("span",{class:"token operator"},"+="),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'&'"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token function"},"advance"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(" \n  "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(" decodedText\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"highlight-lines"},[(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br")]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"19"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"20"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"21"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"22"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"23"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"24"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"25"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"26"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"27"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"28"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"29"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"30"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"31"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"32"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"33"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"34"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"35"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"36"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"37"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"38"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"39"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"40"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"41"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"42"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"43"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"44"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"45"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"46"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"47"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"48"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"49"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"50"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"51"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"52"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"53"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"54"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"55"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"56"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"57"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"58"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"59"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"60"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"61"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"62"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"63"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"64"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"65"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"66"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"67"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"68"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"69"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"70"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"71"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"72"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"73"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"74"),(0,t._)("br")])],-1),vn=(0,t._)("p",null,"正则测试：",-1),fn=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token regex"},[(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-source language-regex"},"&(?:#x?)?"),(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-flags"},"i")]),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"exec"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token template-string"},[(0,t._)("span",{class:"token template-punctuation string"},"`"),(0,t._)("span",{class:"token string"},"hello &lt;"),(0,t._)("span",{class:"token template-punctuation string"},"`")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token comment"},"// ['&', index: 6, input: 'hello &lt;', groups: undefined]"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br")])],-1),yn=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"parseText"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"context"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token comment"},"// endIndex 为文本内容的结尾索引，默认为整个模板剩余内容"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" endIndex "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("length\n  "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" ltIndex "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"indexOf"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'<'"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" delimiterIndex "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"indexOf"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'{{'"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  \n  "),(0,t._)("span",{class:"token comment"},"// 取 ItIndex 和当前 endIndex 中较小的一个作为新的结尾索引"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("ltIndex "),(0,t._)("span",{class:"token operator"},">"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"-"),(0,t._)("span",{class:"token number"},"1"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"&&"),(0,t.Uk)(" ltIndex "),(0,t._)("span",{class:"token operator"},"<"),(0,t.Uk)(" endIndex"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    endIndex "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" ltIndex\n  "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token comment"},"// 取 delimiterIndex 和当前 endIndex 中较小的一个作为新的结尾索引"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("delimiterIndex "),(0,t._)("span",{class:"token operator"},">"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"-"),(0,t._)("span",{class:"token number"},"1"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"&&"),(0,t.Uk)(" delimiterIndex "),(0,t._)("span",{class:"token operator"},"<"),(0,t.Uk)(" endIndex"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    endIndex "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" delimiterIndex\n  "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token comment"},"// 截取文本内容"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" content "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("source"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"slice"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" endIndex"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\t"),(0,t._)("span",{class:"token comment"},"// 消费文本"),(0,t.Uk)("\n  context"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"advanceBy"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("content"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\n  "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    type"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'Text'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    content"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"decodeHtml"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("content"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"highlight-lines"},[(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("br"),(0,t._)("br")]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"19"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"20"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"21"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"22"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"23"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"24"),(0,t._)("br")])],-1),wn=(0,t.uE)('<h3 id="解码数字字符" tabindex="-1"><a class="header-anchor" href="#解码数字字符" aria-hidden="true">#</a> 解码数字字符</h3><p>上面代码使用一个正则表达式来匹配一个文本中字符引用的开始部分：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> head <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;(?:#x?)?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>rawText<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>我们可以根据正则匹配结果来判断字符引用的类型：</p><ul><li>如果<code>head[0] === &#39;&amp;&#39;</code>，则说明匹配的是命名字符引用。</li><li>如果<code>head[0] === &#39;&amp;#&#39;</code>，则说明匹配的是以十进制表示的数字字符引用。</li><li>如果<code>head[0] === &#39;&amp;#x&#39;</code>，则说明匹配的是以十六进制表示的数字字符引用。</li></ul>',5),Tn=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token comment"},"// 判断是十进制表示还是十六进制表示"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" hex "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" head"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'&#x'"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token comment"},"// 根据不同进制表示法，选用不同的正则"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" pattern "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" hex "),(0,t._)("span",{class:"token operator"},"?"),(0,t.Uk)(),(0,t._)("span",{class:"token regex"},[(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-source language-regex"},"^&#x([0-9a-f]+);?"),(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-flags"},"i")]),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token regex"},[(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-source language-regex"},"^&#([0-9]+);?"),(0,t._)("span",{class:"token regex-delimiter"},"/")]),(0,t.Uk)("\n"),(0,t._)("span",{class:"token comment"},"// 最终，body[1] 的值就是 Unicode 码点"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" body "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" pattern"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"exec"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("rawText"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br")])],-1),An=(0,t._)("p",null,"✅ 数字字符引用的格式是：前缀 + Unicode码点。解码数字字符引用的关键在于，如何提取字符引用中的 Unicode 码点。考虑到数字字符引用的前缀可以是以十进制表示（&#），也可以是以十六进制表示（&#x），所以我们使用下面的代码来完成码点的提取。",-1),jn=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("body"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token comment"},"// 将码点字符串转为十进制数字"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" cp "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" Number"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"parseInt"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("body"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" hex "),(0,t._)("span",{class:"token operator"},"?"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"16"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"10"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token comment"},"// 解码"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" char "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" String"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"fromCodePoint"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("cp"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br")])],-1),Cn=(0,t._)("p",null,[(0,t.Uk)("有了 Unicode 码点之后，只需要调用"),(0,t._)("code",null,"String.fromCodePoint"),(0,t.Uk)("函数即可将其解码为对应的字符。")],-1),Dn=(0,t.Uk)("🌐 "),En={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint",target:"_blank",rel:"noopener noreferrer"},In=(0,t.Uk)("String.fromCodePoint (opens new window)"),Wn=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"decodeHtml"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},[(0,t.Uk)("rawText"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" asAttr "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token boolean"},"false")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" offset "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" end "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" rawText"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("length\n  "),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" decodedText "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"''"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" maxCRNameLength "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0"),(0,t.Uk)("\n\n  "),(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"advance"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"length"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    offset "),(0,t._)("span",{class:"token operator"},"+="),(0,t.Uk)(" length\n    rawText "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" rawText"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"slice"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("length"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n  "),(0,t._)("span",{class:"token keyword"},"while"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("offset "),(0,t._)("span",{class:"token operator"},"<"),(0,t.Uk)(" end"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" head "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token regex"},[(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-source language-regex"},"&(?:#x?)?"),(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-flags"},"i")]),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"exec"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("rawText"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token operator"},"!"),(0,t.Uk)("head"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" remaining "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" end "),(0,t._)("span",{class:"token operator"},"-"),(0,t.Uk)(" offset\n      decodedText "),(0,t._)("span",{class:"token operator"},"+="),(0,t.Uk)(" rawText"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"slice"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" remaining"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token function"},"advance"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("remaining"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token keyword"},"break"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},'// Advance to the "&".'),(0,t.Uk)("\n    decodedText "),(0,t._)("span",{class:"token operator"},"+="),(0,t.Uk)(" rawText"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"slice"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" head"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("index"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token function"},"advance"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("head"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("index"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\n    "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("head"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'&'"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token comment"},"// Named character reference..."),(0,t.Uk)("\n      \n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" hex "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" head"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'&#x'"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" pattern "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" hex "),(0,t._)("span",{class:"token operator"},"?"),(0,t.Uk)(),(0,t._)("span",{class:"token regex"},[(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-source language-regex"},"^&#x([0-9a-f]+);?"),(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-flags"},"i")]),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token regex"},[(0,t._)("span",{class:"token regex-delimiter"},"/"),(0,t._)("span",{class:"token regex-source language-regex"},"^&#([0-9]+);?"),(0,t._)("span",{class:"token regex-delimiter"},"/")]),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" body "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" pattern"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"exec"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("rawText"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n      \n      "),(0,t._)("span",{class:"token comment"},"// 如果匹配成功，则调用 String.fromCodePoint 函数进行解码"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("body"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token comment"},"// 将码点字符串转为十进制数字"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" cp "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" Number"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"parseInt"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("body"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" hex "),(0,t._)("span",{class:"token operator"},"?"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"16"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"10"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token comment"},"// 码点的合法性检查"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("cp "),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n          "),(0,t._)("span",{class:"token comment"},"// 如果码点值为 0x00，替换为 0xfffd"),(0,t.Uk)("\n          cp "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0xfffd"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("cp "),(0,t._)("span",{class:"token operator"},">"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0x10ffff"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n          "),(0,t._)("span",{class:"token comment"},"// 如果码点值超过了 Unicode 的最大值，替换为 0xfffd"),(0,t.Uk)("\n          cp "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0xfffd"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("cp "),(0,t._)("span",{class:"token operator"},">="),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0xd800"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"&&"),(0,t.Uk)(" cp "),(0,t._)("span",{class:"token operator"},"<="),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0xdfff"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n          "),(0,t._)("span",{class:"token comment"},"// 如果码点值处于 surrogate pair 范围，替换为 0xfffd"),(0,t.Uk)("\n          cp "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0xfffd"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("cp "),(0,t._)("span",{class:"token operator"},">="),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0xfdd0"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"&&"),(0,t.Uk)(" cp "),(0,t._)("span",{class:"token operator"},"<="),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0xfdef"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"||"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("cp "),(0,t._)("span",{class:"token operator"},"&"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0xfffe"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0xfffe"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n          "),(0,t._)("span",{class:"token comment"},"// 如果码点值处于 `noncharacter` 范围，则什么都不做，交给平台处理"),(0,t.Uk)("\n          "),(0,t._)("span",{class:"token comment"},"// noop"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("\n          "),(0,t._)("span",{class:"token comment"},"// 控制字符集的范围是：[0x01, 0x1f] 加上 [0x7f, 0x9f]"),(0,t.Uk)("\n          "),(0,t._)("span",{class:"token comment"},"// 却掉 ASICC 空白符：0x09(TAB)、0x0A(LF)、0x0C(FF)"),(0,t.Uk)("\n          "),(0,t._)("span",{class:"token comment"},"// 0x0D(CR) 虽然也是 ASICC 空白符，但需要包含"),(0,t.Uk)("\n          "),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("cp "),(0,t._)("span",{class:"token operator"},">="),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0x01"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"&&"),(0,t.Uk)(" cp "),(0,t._)("span",{class:"token operator"},"<="),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0x08"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"||"),(0,t.Uk)("\n          cp "),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0x0b"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"||"),(0,t.Uk)("\n          "),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("cp "),(0,t._)("span",{class:"token operator"},">="),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0x0d"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"&&"),(0,t.Uk)(" cp "),(0,t._)("span",{class:"token operator"},"<="),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0x1f"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"||"),(0,t.Uk)("\n          "),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("cp "),(0,t._)("span",{class:"token operator"},">="),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0x7f"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"&&"),(0,t.Uk)(" cp "),(0,t._)("span",{class:"token operator"},"<="),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0x9f"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n          "),(0,t._)("span",{class:"token comment"},"// 在 CCR_REPLACEMENTS 表中查找替换码点，如果找不到则使用原码点"),(0,t.Uk)("\n          cp "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token constant"},"CCR_REPLACEMENTS"),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("cp"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"||"),(0,t.Uk)(" cp\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token comment"},"// 解码后追加到 decodedText 上"),(0,t.Uk)("\n        decodedText "),(0,t._)("span",{class:"token operator"},"+="),(0,t.Uk)(" String"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"fromCodePoint"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("cp"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token comment"},"// 消费掉整个数字字符引用的内容"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token function"},"advance"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("body"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token comment"},"// 如果没有匹配，则不进行解码操作，只是把 head[0] 追加到 decodedText 并消费掉"),(0,t.Uk)("\n        decodedText "),(0,t._)("span",{class:"token operator"},"+="),(0,t.Uk)(" head"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token function"},"advance"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("head"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(" decodedText\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"highlight-lines"},[(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br")]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"19"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"20"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"21"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"22"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"23"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"24"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"25"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"26"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"27"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"28"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"29"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"30"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"31"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"32"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"33"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"34"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"35"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"36"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"37"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"38"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"39"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"40"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"41"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"42"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"43"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"44"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"45"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"46"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"47"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"48"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"49"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"50"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"51"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"52"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"53"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"54"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"55"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"56"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"57"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"58"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"59"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"60"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"61"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"62"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"63"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"64"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"65"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"66"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"67"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"68"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"69"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"70"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"71"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"72"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"73"),(0,t._)("br")])],-1),Rn=(0,t._)("p",null,"在真正进行解码前，需要对码点的值进行合法性检查。WHATWG 规范中对此也有明确的定义。",-1),Sn=(0,t.uE)('<h2 id="解析插值与注释" tabindex="-1"><a class="header-anchor" href="#解析插值与注释" aria-hidden="true">#</a> 解析插值与注释</h2><h3 id="解析插值" tabindex="-1"><a class="header-anchor" href="#解析插值" aria-hidden="true">#</a> 解析插值</h3><p>文本插值是 Vue.js 模板中用来渲染动态数据的常用方法。</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ obj.foo }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ obj.fn() }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>我们通常将其两边的特殊字符串称为定界符，定界符中间的内容可以是任意合法的 JavaScript 表达式。</p><p><img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/Vuejs3/parseInterpolation.png" alt=""></p><p>解析器在解析插值时，只需要把定界符中间的内容提取出来作为 JavaScript 表达式即可：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">parseInterpolation</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 消费开始定界符</span>\n  context<span class="token punctuation">.</span><span class="token function">advanceBy</span><span class="token punctuation">(</span><span class="token string">&#39;{{&#39;</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>\n  <span class="token comment">// 找到结束定界符的位置索引</span>\n  closeIndex <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;}}&#39;</span><span class="token punctuation">)</span>\n  <span class="token comment">// 截取中间内容作为插值表达式</span>\n  <span class="token keyword">const</span> content <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> closeIndex<span class="token punctuation">)</span>\n  <span class="token comment">// 消费表达式和结束定界符</span>\n  context<span class="token punctuation">.</span><span class="token function">advanceBy</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span>length<span class="token punctuation">)</span>\n  context<span class="token punctuation">.</span><span class="token function">advanceBy</span><span class="token punctuation">(</span><span class="token string">&#39;}}&#39;</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> <span class="token string">&#39;Interpolation&#39;</span><span class="token punctuation">,</span>\n    content<span class="token operator">:</span> <span class="token punctuation">{</span>\n      type<span class="token operator">:</span> <span class="token string">&#39;Expression&#39;</span><span class="token punctuation">,</span>  <span class="token comment">// 表达式类型</span>\n      content<span class="token operator">:</span> <span class="token function">decodeHtml</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>配合上面的 <code>parseInterpolation</code> 函数，解析如下模板内容：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;foo {{ bar }} baz&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>最终将得到如下 AST：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token punctuation">{</span>\n  type<span class="token operator">:</span> <span class="token string">&#39;Root&#39;</span><span class="token punctuation">,</span>\n  chidlren<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      type<span class="token operator">:</span> <span class="token string">&#39;Element&#39;</span><span class="token punctuation">,</span>\n      tag<span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>\n      isSelfClosing<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n      props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      children<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;Text&#39;</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">&#39;foo &#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token comment">// 插值节点</span>\n        <span class="token punctuation">{</span> \n          type<span class="token operator">:</span> <span class="token string">&#39;Interpolation&#39;</span><span class="token punctuation">,</span>\n          content<span class="token operator">:</span> <span class="token punctuation">[</span>\n            type<span class="token operator">:</span> <span class="token string">&#39;Expression&#39;</span><span class="token punctuation">,</span>\n            content<span class="token operator">:</span> <span class="token string">&#39; bar&#39;</span>\n          <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;Text&#39;</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">&#39; baz&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="解析注释" tabindex="-1"><a class="header-anchor" href="#解析注释" aria-hidden="true">#</a> 解析注释</h3><p>解析注释的思路与解析插值非常相似：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">parseComment</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  context<span class="token punctuation">.</span><span class="token function">advanceBy</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;!--&#39;</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>\n  closeIndex <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;--&gt;&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> content <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> closeIndex<span class="token punctuation">)</span>\n  context<span class="token punctuation">.</span><span class="token function">advanceBy</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span>length<span class="token punctuation">)</span>\n  context<span class="token punctuation">.</span><span class="token function">advanceBy</span><span class="token punctuation">(</span><span class="token string">&#39;--&gt;&#39;</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> <span class="token string">&#39;Comment&#39;</span><span class="token punctuation">,</span>\n    content\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>配合上面的 <code>parseComment</code> 函数，解析如下模板内容：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;&lt;!-- comments --&gt;&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>最终得到如下 AST：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token punctuation">{</span>\n  type<span class="token operator">:</span> <span class="token string">&#39;Root&#39;</span><span class="token punctuation">,</span>\n  chidlren<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      type<span class="token operator">:</span> <span class="token string">&#39;Element&#39;</span><span class="token punctuation">,</span>\n      tag<span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>\n      isSelfClosing<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n      props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      children<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;Comment&#39;</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">&#39; comments &#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',19),Mn={render:function(n,s){const a=(0,t.up)("OutboundLink"),Mn=(0,t.up)("CodeGroupItem"),Hn=(0,t.up)("CodeGroup");return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,(0,t._)("details",o,[c,(0,t._)("p",null,[l,(0,t._)("a",r,[u,(0,t.Wm)(a)])]),k]),i,(0,t._)("div",_,[b,(0,t._)("ul",null,[m,(0,t._)("li",null,[d,(0,t._)("code",null,(0,e.zw)(n.val),1)]),U,g,h]),x]),v,f,y,(0,t.Wm)(Hn,null,{default:(0,t.w5)((()=>[(0,t.Wm)(Mn,{title:"parseChildren"},{default:(0,t.w5)((()=>[w,T])),_:1}),(0,t.Wm)(Mn,{title:"待解析的模板"},{default:(0,t.w5)((()=>[A,j,C,D,E])),_:1}),(0,t.Wm)(Mn,{title:"parseElement"},{default:(0,t.w5)((()=>[I,W])),_:1}),R])),_:1}),S,(0,t.Wm)(Hn,null,{default:(0,t.w5)((()=>[(0,t.Wm)(Mn,{title:"advanceBy & advanceSpaces"},{default:(0,t.w5)((()=>[M,H,L])),_:1}),(0,t.Wm)(Mn,{title:"parseTag"},{default:(0,t.w5)((()=>[B,z,q,V,N])),_:1}),(0,t.Wm)(Mn,{title:"parseElement"},{default:(0,t.w5)((()=>[O,P])),_:1})])),_:1}),X,(0,t.Wm)(Hn,null,{default:(0,t.w5)((()=>[(0,t.Wm)(Mn,{title:"parseTag"},{default:(0,t.w5)((()=>[G,$,J])),_:1}),(0,t.Wm)(Mn,{title:"parseAttributes"},{default:(0,t.w5)((()=>[Q,F,Y])),_:1}),(0,t.Wm)(Mn,{title:"测试结果"},{default:(0,t.w5)((()=>[K,Z])),_:1})])),_:1}),nn,(0,t.Wm)(Hn,null,{default:(0,t.w5)((()=>[(0,t.Wm)(Mn,{title:"parseText"},{default:(0,t.w5)((()=>[sn])),_:1}),(0,t.Wm)(Mn,{title:"测试结果"},{default:(0,t.w5)((()=>[an])),_:1})])),_:1}),tn,en,pn,(0,t._)("details",on,[cn,(0,t._)("div",ln,[rn,(0,t._)("ul",null,[(0,t._)("li",null,[un,(0,t._)("p",null,[kn,(0,t._)("a",_n,[bn,(0,t.Wm)(a)])])]),mn])])]),dn,(0,t.Wm)(Hn,null,{default:(0,t.w5)((()=>[(0,t.Wm)(Mn,{title:"namedCharacterReferences"},{default:(0,t.w5)((()=>[Un,gn,hn])),_:1}),(0,t.Wm)(Mn,{title:"decodeHtml"},{default:(0,t.w5)((()=>[xn,vn,fn])),_:1}),(0,t.Wm)(Mn,{title:"parseText"},{default:(0,t.w5)((()=>[yn])),_:1})])),_:1}),wn,(0,t.Wm)(Hn,null,{default:(0,t.w5)((()=>[(0,t.Wm)(Mn,{title:"码点的提取"},{default:(0,t.w5)((()=>[Tn,An])),_:1}),(0,t.Wm)(Mn,{title:"解码"},{default:(0,t.w5)((()=>[jn,Cn,(0,t._)("p",null,[Dn,(0,t._)("a",En,[In,(0,t.Wm)(a)])])])),_:1}),(0,t.Wm)(Mn,{title:"decodeHtml"},{default:(0,t.w5)((()=>[Wn,Rn])),_:1})])),_:1}),Sn],64)}}}}]);