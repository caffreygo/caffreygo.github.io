"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2571],{8669:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-ff210ace",path:"/nest/config.html",title:"项目配置",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"安装依赖",slug:"安装依赖",children:[]},{level:2,title:"env 文件",slug:"env-文件",children:[{level:3,title:"模块定义",slug:"模块定义",children:[]},{level:3,title:"版本库",slug:"版本库",children:[]}]},{level:2,title:"多文件配置",slug:"多文件配置",children:[{level:3,title:"文件定义",slug:"文件定义",children:[]},{level:3,title:"模块声明",slug:"模块声明",children:[]},{level:3,title:"文件合并",slug:"文件合并",children:[]}]},{level:2,title:"命名空间",slug:"命名空间",children:[{level:3,title:"文件定义",slug:"文件定义-1",children:[]},{level:3,title:"模块声明",slug:"模块声明-1",children:[]},{level:3,title:"使用方法",slug:"使用方法",children:[]}]}],filePathRelative:"nest/config.md",git:{updatedTime:1684908616e3,contributors:[{name:"Jinrui",email:"jerry.chenj@outlook.com",commits:1},{name:"jinrui",email:"jerry.chenj@outlook.com",commits:1},{name:"jinrui-kooboo",email:"jinrui@kooboo.cn",commits:1}]}}},8723:(n,s,a)=>{a.r(s),a.d(s,{default:()=>m});var p=a(6252);const t=(0,p._)("h1",{id:"项目配置",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#项目配置","aria-hidden":"true"},"#"),(0,p.Uk)(" 项目配置")],-1),e=(0,p._)("h2",{id:"安装依赖",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#安装依赖","aria-hidden":"true"},"#"),(0,p.Uk)(" 安装依赖")],-1),o={href:"https://docs.nestjs.com/techniques/configuration#configuration",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("网站配置 (opens new window)"),l=(0,p.Uk)("管理使用 @nestjs/config 扩展包，首先安装扩展包。"),u=(0,p.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> @nestjs/config\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>在根模块 app.module.ts 中配置</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token operator">...</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ConfigModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/config&#39;</span><span class="token punctuation">;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  imports<span class="token operator">:</span> <span class="token punctuation">[</span>\n   \t<span class="token operator">...</span>\n    ConfigModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    \t<span class="token comment">//全局模块</span>\n      isGlobal<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n \t<span class="token operator">...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token operator">...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>系统会自动加载**.env**中的内容</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>DATABASE_URL=&quot;mysql://root:admin888@127.0.0.1:3306/nest&quot;\n\nDB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=nest\nDB_USERNAME=root\nDB_PASSWORD=admin888\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在任何的模块的服务中通过依赖注入使用</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ConfigService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/config&quot;</span><span class="token punctuation">;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">PrismaService</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>config<span class="token operator">:</span> ConfigService<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;DB_HOST&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="env-文件" tabindex="-1"><a class="header-anchor" href="#env-文件" aria-hidden="true">#</a> env 文件</h2><p>ConfigModule 模块会加载.env 配置项</p><ol><li>在开发时 <code>.env</code> 会有一些隐私数据，所以建议将 <code>.env</code> 放在 <code>.gitignore</code> 文件中</li><li>创建一个和 <code>.env</code> 配置名一样的 <code>.env.example</code> 文件，上线后将其改名为 <code>.env</code></li></ol><p>.env</p><blockquote><p>该文件用于开发时使用，要定义在 .gitignore 中，不提交到版本库</p></blockquote><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>#数据库连接<span class="token punctuation">;</span>\n<span class="token constant">DATABASE_URL</span> <span class="token operator">=</span> <span class="token string">&quot;mysql://root:admin888@localhost:3306/nest-edu&quot;</span><span class="token punctuation">;</span>\n<span class="token constant">NODE_ENV</span> <span class="token operator">=</span> development<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>.env.example</p><p>该文件是生产环境使用的参考文件，要提交到版本库。</p><p>网站上线后将该文件复制一个，并修改文件名为 <code>.env</code> 文件，并修改里面配置项内容</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>#数据库连接<span class="token punctuation">;</span>\n<span class="token constant">DATABASE_URL</span> <span class="token operator">=</span> <span class="token string">&quot;mysql://root:password@localhost:3306/nest-edu&quot;</span><span class="token punctuation">;</span>\n<span class="token constant">NODE_ENV</span> <span class="token operator">=</span> production<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>现在可以在代码中使用 <code>process.env.NODE_ENV</code> 区分开发环境还是线上环境</p><h3 id="模块定义" tabindex="-1"><a class="header-anchor" href="#模块定义" aria-hidden="true">#</a> 模块定义</h3><p>在 <code>app.module.ts</code> 模块中对 <code>ConfigModule</code> 进行定义</p><ul><li>使用 <code>envFilePath</code> 加载多个 env 配置文件</li><li>多个 env 文件有同名配置项时，前面的优先级高</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ConfigModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/config&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> AppController <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./app.controller&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> AppService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./app.service&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> config <span class="token keyword">from</span> <span class="token string">&quot;./config&quot;</span><span class="token punctuation">;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  imports<span class="token operator">:</span> <span class="token punctuation">[</span>\n    ConfigModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      isGlobal<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      load<span class="token operator">:</span> <span class="token punctuation">[</span>config<span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  controllers<span class="token operator">:</span> <span class="token punctuation">[</span>AppController<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  providers<span class="token operator">:</span> <span class="token punctuation">[</span>AppService<span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="版本库" tabindex="-1"><a class="header-anchor" href="#版本库" aria-hidden="true">#</a> 版本库</h3><p><code>.env</code> 会包含开发时的私密信息，如理阿里云密钥等。所以将 <code>.env</code> 文件放在 <code>.gitignore</code> 中忽略提交。</p><p>然后在项目中创建一个同样的 <code>.env.example</code> 文件，在生产环境中把 <code>.env.example</code> 内容改名为<code>.env</code> 后使用。</p><p>这样做可以保护隐私数据不提交到 GIT，尤其对于开源项目这很重要。</p><h2 id="多文件配置" tabindex="-1"><a class="header-anchor" href="#多文件配置" aria-hidden="true">#</a> 多文件配置</h2><p>我们也可以单独对配置文件进行管理</p><h3 id="文件定义" tabindex="-1"><a class="header-anchor" href="#文件定义" aria-hidden="true">#</a> 文件定义</h3><p>下面在 <code>src/config</code> 目录定义两个配置文件</p><p>src/config/app.ts</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  app<span class="token operator">:</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&quot;google.com&quot;</span><span class="token punctuation">,</span>\n    isDev<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">==</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>src/config/database.ts</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  database<span class="token operator">:</span> <span class="token punctuation">{</span>\n    url<span class="token operator">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="模块声明" tabindex="-1"><a class="header-anchor" href="#模块声明" aria-hidden="true">#</a> 模块声明</h3><p>然后在 <code>ConfigModule</code> 模块中使用 <code>load</code> 属性声明加载</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ConfigModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/config&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> AppController <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./app.controller&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> AppService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./app.service&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> config <span class="token keyword">from</span> <span class="token string">&quot;./config/app.ts&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> database <span class="token keyword">from</span> <span class="token string">&quot;./config/database.ts&quot;</span><span class="token punctuation">;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  imports<span class="token operator">:</span> <span class="token punctuation">[</span>\n    ConfigModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      isGlobal<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token comment">// 可以加载多个配置文件</span>\n      load<span class="token operator">:</span> <span class="token punctuation">[</span>app<span class="token punctuation">,</span> database<span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  controllers<span class="token operator">:</span> <span class="token punctuation">[</span>AppController<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  providers<span class="token operator">:</span> <span class="token punctuation">[</span>AppService<span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>现在可以在项目中使用点语法读取配置项了</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppService</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> configService<span class="token operator">:</span> ConfigService<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token function">getHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;app.name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="文件合并" tabindex="-1"><a class="header-anchor" href="#文件合并" aria-hidden="true">#</a> 文件合并</h3><p>如果你项目不复杂，也可以把上面两个配置文件，合并到一个文件中。以下是 <code>src/config.ts</code> 文件的内容</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  app<span class="token operator">:</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&quot;google.com&quot;</span><span class="token punctuation">,</span>\n    isDev<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">==</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  database<span class="token operator">:</span> <span class="token punctuation">{</span>\n    url<span class="token operator">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>然后在模块中引入这个文件</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ConfigModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/config&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> AppController <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./app.controller&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> AppService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./app.service&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> config <span class="token keyword">from</span> <span class="token string">&quot;./config.ts&quot;</span><span class="token punctuation">;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  imports<span class="token operator">:</span> <span class="token punctuation">[</span>\n    ConfigModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      isGlobal<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      load<span class="token operator">:</span> <span class="token punctuation">[</span>config<span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  controllers<span class="token operator">:</span> <span class="token punctuation">[</span>AppController<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  providers<span class="token operator">:</span> <span class="token punctuation">[</span>AppService<span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="命名空间" tabindex="-1"><a class="header-anchor" href="#命名空间" aria-hidden="true">#</a> 命名空间</h2>',45),r=(0,p.Uk)("使用"),i={href:"https://docs.nestjs.com/techniques/configuration#configuration-namespaces",target:"_blank",rel:"noopener noreferrer"},k=(0,p.Uk)("命名空间 (opens new window)"),d=(0,p.Uk)("这种方式处理配置项，也可以实现多文件管理，并会有 TS 类型提示。下面以创建数据库连接为例，进行说明。"),b=(0,p.uE)('<h3 id="文件定义-1" tabindex="-1"><a class="header-anchor" href="#文件定义-1" aria-hidden="true">#</a> 文件定义</h3><p>首先创建配置文件 <code>src/config/database.config.ts</code>，内容如下：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> registerAs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/config&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">registerAs</span><span class="token punctuation">(</span><span class="token string">&quot;database&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  url<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DATABASE_URL</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>然后定义合并导入文件<code>config/database/index.ts</code></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> databaseConfig <span class="token keyword">from</span> <span class="token string">&quot;src/config/database.config&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>databaseConfig<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="模块声明-1" tabindex="-1"><a class="header-anchor" href="#模块声明-1" aria-hidden="true">#</a> 模块声明</h3><p>然后在 <code>app.module.ts</code> 中模块定义</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token operator">...</span>\n<span class="token keyword">import</span> config <span class="token keyword">from</span> <span class="token string">&#39;./config&#39;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  imports<span class="token operator">:</span> <span class="token punctuation">[</span>ConfigModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span> load<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>config<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  controllers<span class="token operator">:</span> <span class="token punctuation">[</span>AppController<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  providers<span class="token operator">:</span> <span class="token punctuation">[</span>AppService<span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法" aria-hidden="true">#</a> 使用方法</h3><p>接着在<code>app.service.ts</code>中使用</p><ul><li>使用 <code>@Inject(databaseConfig.KEY)</code> 注入配置项</li><li><code>ConfigType&lt;typeof databaseConfig&gt;</code> 用于定义类型，这样在使用时就有类型提示了</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ConfigType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/config&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> databaseConfig <span class="token keyword">from</span> <span class="token string">&quot;src/config/database.config&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Inject<span class="token punctuation">,</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppService</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>\n\t<span class="token decorator"><span class="token at operator">@</span><span class="token function">Inject</span></span><span class="token punctuation">(</span>databaseConfig<span class="token punctuation">.</span><span class="token constant">KEY</span><span class="token punctuation">)</span>\n\t<span class="token keyword">private</span> config<span class="token operator">:</span> ConfigType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> databaseConfig<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token function">getHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>host<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',12),m={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,e,(0,p._)("p",null,[(0,p._)("a",o,[c,(0,p.Wm)(a)]),l]),u,(0,p._)("p",null,[r,(0,p._)("a",i,[k,(0,p.Wm)(a)]),d]),b],64)}}}}]);