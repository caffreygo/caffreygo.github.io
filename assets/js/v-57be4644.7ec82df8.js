"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4973],{7600:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-57be4644",path:"/typescript/grammar/basic.html",title:"基础语法",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"TypeScript的定义",slug:"typescript的定义",children:[]},{level:2,title:"TypeScript的优势",slug:"typescript的优势",children:[]},{level:2,title:"TypeScript运行环境",slug:"typescript运行环境",children:[]},{level:2,title:"静态类型",slug:"静态类型",children:[]},{level:2,title:"基础类型和对象类型",slug:"基础类型和对象类型",children:[]},{level:2,title:"类型注解和类型推断",slug:"类型注解和类型推断",children:[]},{level:2,title:"函数相关类型",slug:"函数相关类型",children:[]},{level:2,title:"回顾",slug:"回顾",children:[]},{level:2,title:"数组和元组",slug:"数组和元组",children:[{level:3,title:"数组",slug:"数组",children:[]},{level:3,title:"元组",slug:"元组",children:[]}]},{level:2,title:"Interface",slug:"interface",children:[{level:3,title:"通用性的类型集合",slug:"通用性的类型集合",children:[]},{level:3,title:"type 类型别名（=）",slug:"type-类型别名",children:[]},{level:3,title:"可选择属性（?）",slug:"可选择属性",children:[]},{level:3,title:"只读属性readonly",slug:"只读属性readonly",children:[]},{level:3,title:"字面量强校验",slug:"字面量强校验",children:[]},{level:3,title:"[propName: string]: any",slug:"propname-string-any",children:[]},{level:3,title:"方法",slug:"方法",children:[]},{level:3,title:"类应用接口（implements）",slug:"类应用接口-implements",children:[]},{level:3,title:"接口的继承（extends）",slug:"接口的继承-extends",children:[]},{level:3,title:"接口定义函数",slug:"接口定义函数",children:[]},{level:3,title:"接口编译成javascript",slug:"接口编译成javascript",children:[]}]},{level:2,title:"类的定义与继承",slug:"类的定义与继承",children:[]},{level:2,title:"类中的访问类型和构造器",slug:"类中的访问类型和构造器",children:[{level:3,title:"访问类型",slug:"访问类型",children:[]},{level:3,title:"constructor",slug:"constructor",children:[]}]},{level:2,title:"静态属性，getter和setter",slug:"静态属性-getter和setter",children:[{level:3,title:"类里面的getter和setter",slug:"类里面的getter和setter",children:[]},{level:3,title:"设计模式：单例模式",slug:"设计模式-单例模式",children:[]}]},{level:2,title:"readonly只读",slug:"readonly只读",children:[]},{level:2,title:"抽象类",slug:"抽象类",children:[{level:3,title:"抽象类/方法",slug:"抽象类-方法",children:[]},{level:3,title:"抽象类和接口",slug:"抽象类和接口",children:[]}]}],filePathRelative:"typescript/grammar/basic.md",git:{updatedTime:1638236785e3,contributors:[{name:"Jinrui Chen",email:"jinrui@kooboo.cn",commits:4},{name:"Jerry Chen",email:"caffreygo@163.com",commits:1}]}}},1713:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h1 id="基础语法" tabindex="-1"><a class="header-anchor" href="#基础语法" aria-hidden="true">#</a> 基础语法</h1><h2 id="typescript的定义" tabindex="-1"><a class="header-anchor" href="#typescript的定义" aria-hidden="true">#</a> TypeScript的定义</h2><p>TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.</p><ul><li>JavaScript的超集 、静态类型</li><li>需要把ts编译成 JavaScript 代码才能执行</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// js动态类型</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\na <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ts静态类型   报错提示</span>\n<span class="token keyword">let</span> b1 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> b2<span class="token operator">:</span>number <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ts直接执行</span>\n<span class="token comment">// Uncaught SyntaxError: Unexpected identifier</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="typescript的优势" tabindex="-1"><a class="header-anchor" href="#typescript的优势" aria-hidden="true">#</a> TypeScript的优势</h2><ul><li>编写时的错误检查</li><li>编辑器的语法提示</li><li>代码语义更清晰易懂</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">tsDemo</span><span class="token punctuation">(</span>data<span class="token operator">:</span> Point<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>x <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>y <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">tsDemo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="typescript运行环境" tabindex="-1"><a class="header-anchor" href="#typescript运行环境" aria-hidden="true">#</a> TypeScript运行环境</h2><ul><li>node环境 （node -v &amp;&amp; npm -v检查版本）</li><li>vs code设置（quote: single &amp;&amp; tab: 2)</li><li>安装prettier (format on save = true &amp;&amp; prettier: Single Quote)</li><li>安装typescript (npm install typescript@3.6.4 -g)</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 验证</span>\ntsc demo<span class="token punctuation">.</span>ts\nnode demo<span class="token punctuation">.</span>js\n\n<span class="token comment">//  tsc : 无法加载文件 C:\\Users\\Caffrey\\AppData\\Roaming\\npm\\tsc.ps1。</span>\n<span class="token comment">//  未对文件 C:\\Users\\Caffrey\\AppData\\Roaming\\npm\\tsc.ps1 进行数字签名。无法在当前</span>\n<span class="token comment">//  系统上运行该脚本。有关运行脚本和设置执行策略的详细信息，请参阅 https:/go.microsoft.com/</span>\n<span class="token comment">//  fwlink/?LinkID=135170中的 about_Execution_Policies。</span>\n<span class="token comment">//  所在位置 行:1 字符: 1</span>\n<span class="token comment">//  + tsc demo.ts</span>\n<span class="token comment">//  + ~~~</span>\n<span class="token comment">//      + CategoryInfo          : SecurityError: (:) []，PSSecurityException</span>\n<span class="token comment">//      + FullyQualifiedErrorId : UnauthorizedAccess</span>\n需要管理员身份打开powershell\n运行Set<span class="token operator">-</span>ExecutionPolicy RemoteSigned\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><strong>改进</strong></p><ul><li>安装ts-node (npm install -g ts-node // npm install -g ts-node@8.4.1)</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>ts-node demo.ts\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="静态类型" tabindex="-1"><a class="header-anchor" href="#静态类型" aria-hidden="true">#</a> 静态类型</h2><ul><li>变量会受到静态类型的限制（类型不能修改）</li><li>拥有类型的属性和方法（编辑器的提醒）</li></ul><h2 id="基础类型和对象类型" tabindex="-1"><a class="header-anchor" href="#基础类型和对象类型" aria-hidden="true">#</a> 基础类型和对象类型</h2><p>静态类型帮助判断变量的属性和方法是什么</p><p>静态类型：</p><ol><li>基础类型</li><li>对象类型</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 基础类型 null, undefined, symbol, boolean, void, string, number...</span>\n<span class="token keyword">const</span> count<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> teacherName<span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">&#39;Dell&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 对象类型（函数类型， 数组类型...）</span>\n<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> teacher<span class="token operator">:</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> string<span class="token punctuation">;</span>\n  age<span class="token operator">:</span> number<span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Dell&#39;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">18</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 数组类型</span>\n<span class="token keyword">const</span> numbers<span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// dell 必须是一个Person类对应的对象</span>\n<span class="token keyword">const</span> dell<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// getTotal是一个函数（）=&gt; ，返回值是数字 number</span>\n<span class="token keyword">const</span> <span class="token function-variable function">getTotal</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function-variable function">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token number">123</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="类型注解和类型推断" tabindex="-1"><a class="header-anchor" href="#类型注解和类型推断" aria-hidden="true">#</a> 类型注解和类型推断</h2><ul><li>type annotation: 类型注解, 我们来告诉 TS 变量是什么类型</li><li>type inference: 类型推断, TS 会自动的去尝试分析变量的类型</li><li>如果 TS 能够自动分析变量类型，我们就什么也不需要做了</li><li>如果 TS 无法分析变量类型的话，我们就需要使用类型注解</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 可自动分析</span>\n<span class="token keyword">const</span> firstNumber <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> secondNumber <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> total <span class="token operator">=</span> firstNumber <span class="token operator">+</span> secondNumber<span class="token punctuation">;</span>\n\n<span class="token comment">// 类型注解，结果类型推断</span>\n<span class="token keyword">function</span> <span class="token function">getTotalData</span><span class="token punctuation">(</span><span class="token parameter">firstNumber<span class="token operator">:</span> number<span class="token punctuation">,</span> secondNumber<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> firstNumber <span class="token operator">+</span> secondNumber<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> totalData <span class="token operator">=</span> <span class="token function">getTotalData</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="函数相关类型" tabindex="-1"><a class="header-anchor" href="#函数相关类型" aria-hidden="true">#</a> 函数相关类型</h2><ul><li>如果函数的参数解构，对应的参数类型声明 ：{ key: value }</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// function add(first: number, second: number): number {</span>\n<span class="token comment">//   return first + second;</span>\n<span class="token comment">// }</span>\n\n<span class="token comment">// function sayHello(): void {</span>\n<span class="token comment">//   console.log(&#39;hello&#39;);</span>\n<span class="token comment">// }</span>\n\n<span class="token comment">// function errorEmitter(): never {</span>\n<span class="token comment">//   while(true) {}</span>\n<span class="token comment">// }</span>\n\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> first<span class="token punctuation">,</span> second <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> first<span class="token operator">:</span> number<span class="token punctuation">;</span> second<span class="token operator">:</span> number <span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> first <span class="token operator">+</span> second<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> first <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> first<span class="token operator">:</span> number <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> first<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> first<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> second<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">{</span> first<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="回顾" tabindex="-1"><a class="header-anchor" href="#回顾" aria-hidden="true">#</a> 回顾</h2><ul><li>声明函数的两种方式(:类型 = 实现)</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 定义函数结构体，可以把 (str: string) =&gt; number 提取出来声明为type（类型别名）</span>\n<span class="token keyword">const</span> <span class="token function-variable function">func1</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">str<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function-variable function">number</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 直接定义函数参数和返回值的类型</span>\n<span class="token keyword">const</span> func <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token parameter">：number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>函数的返回值通常可以通过类型推断返回</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 无法通过类型推断的case</span>\n<span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> rawData <span class="token operator">=</span> <span class="token string">&#39;{&quot;name&quot;: &quot;dell&quot;}&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> newData<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>rawData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>联合类型：多种类型声明 ( | )</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> temp<span class="token operator">:</span> number <span class="token operator">|</span> string <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\ntemp <span class="token operator">=</span> <span class="token string">&#39;456&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="数组和元组" tabindex="-1"><a class="header-anchor" href="#数组和元组" aria-hidden="true">#</a> 数组和元组</h2><h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h3><ul><li>基础的数组声明</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> numberArr<span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> undefinedArr<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">undefined</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>包含多种类型值的数组声明</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr<span class="token operator">:</span> <span class="token punctuation">(</span>number <span class="token operator">|</span> string<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>通过<strong>范型</strong>定义包含多种类型值的数组</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> arr<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> object<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;jkl&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>对象数组</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 对象数组中必须包含一个string类型的name,只能有一个key,并且是name</span>\n<span class="token keyword">const</span> objectArr<span class="token operator">:</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> string<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;caffrey&#39;</span><span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token comment">// 多个key的对象数组</span>\n<span class="token keyword">const</span> objectArr<span class="token operator">:</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> string，age<span class="token operator">:</span> number<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;caffrey&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">}</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>类型别名 type alias</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>type User <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> string<span class="token punctuation">,</span> age<span class="token operator">:</span>number<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> objectArr<span class="token operator">:</span> User<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token string">&#39;caffrey&#39;</span><span class="token punctuation">;</span>\n\tage<span class="token operator">:</span> <span class="token number">24</span>\n<span class="token punctuation">}</span><span class="token punctuation">]</span>\n\n<span class="token comment">// typescript这种也支持</span>\n<span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> string<span class="token punctuation">;</span>\n\tage<span class="token operator">:</span> number\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> teacherArr<span class="token operator">:</span> Teacher<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n        name<span class="token operator">:</span> <span class="token string">&#39;caffrey&#39;</span><span class="token punctuation">;</span>\n        age<span class="token operator">:</span> <span class="token number">24</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="元组" tabindex="-1"><a class="header-anchor" href="#元组" aria-hidden="true">#</a> 元组</h3><p>元组在数组的基础上还定义了数组每一项的类型限制</p><ul><li>数组长度固定</li><li>数组每一项的类型固定</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> teacherInfo<span class="token operator">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span> string<span class="token punctuation">,</span> number<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Dell&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;male&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// csv应用</span>\n<span class="token keyword">const</span> teacherList<span class="token operator">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span> string<span class="token punctuation">,</span> number<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;dell&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;male&#39;</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;sun&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;female&#39;</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;jeny&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;female&#39;</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="interface" tabindex="-1"><a class="header-anchor" href="#interface" aria-hidden="true">#</a> Interface</h2><h3 id="通用性的类型集合" tabindex="-1"><a class="header-anchor" href="#通用性的类型集合" aria-hidden="true">#</a> 通用性的类型集合</h3><ul><li>interface 接口</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getPersonName1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">person<span class="token operator">:</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> string<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token function-variable function">setPersonName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">person<span class="token operator">:</span><span class="token punctuation">{</span>name<span class="token operator">:</span> string<span class="token punctuation">}</span><span class="token punctuation">,</span>name<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    person<span class="token punctuation">.</span>name <span class="token operator">=</span> name\n<span class="token punctuation">}</span>\n<span class="token comment">// interface Person定义</span>\n<span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> string\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> getPersonName <span class="token operator">=</span> <span class="token punctuation">(</span>person<span class="token operator">:</span> Person<span class="token punctuation">)</span><span class="token operator">:</span><span class="token parameter"><span class="token keyword">void</span></span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> setPersonName <span class="token operator">=</span> <span class="token punctuation">(</span>person<span class="token operator">:</span>Person<span class="token punctuation">,</span>name<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span><span class="token parameter"><span class="token keyword">void</span></span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    person<span class="token punctuation">.</span>name <span class="token operator">=</span> name\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="type-类型别名" tabindex="-1"><a class="header-anchor" href="#type-类型别名" aria-hidden="true">#</a> type 类型别名（=）</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>type Person <span class="token operator">=</span> <span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> string\n<span class="token punctuation">}</span>\n<span class="token comment">// interface可以代表函数和对象</span>\n<span class="token comment">// type还可以代表基础类型</span>\ntype Person1 <span class="token operator">=</span> string<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>一般用interface代表类型可以实现，否则才用type</li></ul><h3 id="可选择属性" tabindex="-1"><a class="header-anchor" href="#可选择属性" aria-hidden="true">#</a> 可选择属性（?）</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="只读属性readonly" tabindex="-1"><a class="header-anchor" href="#只读属性readonly" aria-hidden="true">#</a> 只读属性readonly</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  readonly name<span class="token operator">:</span> string<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 报错，read-only的属性只读，不能被赋值</span>\n<span class="token keyword">const</span> setPersonName <span class="token operator">=</span> <span class="token punctuation">(</span>person<span class="token operator">:</span> Person<span class="token punctuation">,</span>name<span class="token operator">:</span> string<span class="token punctuation">)</span>：<span class="token keyword">void</span> <span class="token punctuation">{</span>\n    person<span class="token punctuation">.</span>name <span class="token operator">=</span> name\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="字面量强校验" tabindex="-1"><a class="header-anchor" href="#字面量强校验" aria-hidden="true">#</a> 字面量强校验</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Person要求传入的参数必须有name</span>\n<span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> string<span class="token punctuation">;</span>\n\tage<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> getPersonName <span class="token operator">=</span> <span class="token punctuation">(</span>person<span class="token operator">:</span> Person<span class="token punctuation">)</span><span class="token operator">:</span><span class="token parameter"><span class="token keyword">void</span></span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// success</span>\n<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token string">&#39;caffrey&#39;</span><span class="token punctuation">,</span>\n\tsex<span class="token operator">:</span> <span class="token string">&#39;male&#39;</span>\n<span class="token punctuation">}</span>\n<span class="token function">getPersonName</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>\n\n<span class="token comment">// error (Object literal may only specify known properties, and &#39;sex&#39; does not exist in type &#39;Person&#39;)</span>\n<span class="token comment">// person写成字面量形式传递给函数报错</span>\n<span class="token function">getPersonName</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;caffrey&#39;</span><span class="token punctuation">,</span>\n    sex<span class="token operator">:</span> <span class="token string">&#39;male&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><ul><li><p>当以对象字面量的形式传递时typescript会变成<strong>强校验</strong></p></li><li><p>以缓存的变量形式，只要满足interface的要求即可（name）</p></li></ul><h3 id="propname-string-any" tabindex="-1"><a class="header-anchor" href="#propname-string-any" aria-hidden="true">#</a> [propName: string]: any</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span>propName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>​ 如果要让字面量形式也满足需求</p><p>​ 可以用如上形式代表，还有可能存在string类型的key，任何类型的value的属性</p><h3 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> string<span class="token punctuation">;</span>\n  age<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">;</span>\n  <span class="token punctuation">[</span>propName<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> any<span class="token punctuation">;</span>\n  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> string<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> getPersonName <span class="token operator">=</span> <span class="token punctuation">(</span>person<span class="token operator">:</span> Person<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter"><span class="token keyword">void</span></span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;dell&#39;</span><span class="token punctuation">,</span>\n  sex<span class="token operator">:</span> <span class="token string">&#39;male&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&#39;say hello&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">getPersonName</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="类应用接口-implements" tabindex="-1"><a class="header-anchor" href="#类应用接口-implements" aria-hidden="true">#</a> 类应用接口（implements）</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  name <span class="token operator">=</span> <span class="token string">&#39;dell&#39;</span><span class="token punctuation">;</span>\n  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// User类必须要有name属性和say方法</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="接口的继承-extends" tabindex="-1"><a class="header-anchor" href="#接口的继承-extends" aria-hidden="true">#</a> 接口的继承（extends）</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">Teacher</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n\t<span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>string\n<span class="token punctuation">}</span>\n<span class="token comment">// Tercher接口除了要求Person的属性方法，还需要有一个teach方法</span>\n<span class="token keyword">const</span> person：Teacher <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;dell&#39;</span><span class="token punctuation">,</span>\n  sex<span class="token operator">:</span> <span class="token string">&#39;male&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&#39;say hello&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&#39;teach&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="接口定义函数" tabindex="-1"><a class="header-anchor" href="#接口定义函数" aria-hidden="true">#</a> 接口定义函数</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">SayHi</span> <span class="token punctuation">{</span>\n\t<span class="token punctuation">(</span>word<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> string\n<span class="token punctuation">}</span>\n<span class="token comment">// 接口使用</span>\n<span class="token keyword">const</span> say<span class="token operator">:</span><span class="token function-variable function">SayHi</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">word<span class="token operator">:</span>string</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> word\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="接口编译成javascript" tabindex="-1"><a class="header-anchor" href="#接口编译成javascript" aria-hidden="true">#</a> 接口编译成javascript</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>// 初始化typescript工程<span class="token punctuation">(</span>配置文件<span class="token punctuation">)</span>\ntsc --init\n// 编译\ntsc demo.ts\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>接口是在typescript开发时定义的代码，完成类型检查的功能</p><p>编译成JavaScript的过程中会被<strong>剔除</strong></p><h2 id="类的定义与继承" tabindex="-1"><a class="header-anchor" href="#类的定义与继承" aria-hidden="true">#</a> 类的定义与继承</h2><ul><li>定义类的属性和方法</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token string">&#39;caffrey&#39;</span><span class="token punctuation">;</span>\n\t<span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>类的继承(extends)</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n\t<span class="token function">getTeacherName</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token string">&#39;teacher name&#39;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> teacher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>类的重写（子类可以重写父类）</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n    <span class="token function">getTeacherName</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token string">&#39;teacher name&#39;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token function">getName</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token string">&#39;go&#39;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> teacher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nteacher<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;go&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>super(代表父类)</li></ul><p>当类方法被重写，可以使用super去调用父类的方法</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n\t<span class="token function">getName</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&#39; go&#39;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> teacher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nteacher<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;caffrey go&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="类中的访问类型和构造器" tabindex="-1"><a class="header-anchor" href="#类中的访问类型和构造器" aria-hidden="true">#</a> 类中的访问类型和构造器</h2><h3 id="访问类型" tabindex="-1"><a class="header-anchor" href="#访问类型" aria-hidden="true">#</a> 访问类型</h3><ul><li>public 允许在类的内外被调用（默认）</li><li>protected 允许在类内及继承的子类中使用</li><li>private 允许在类内被使用</li></ul><p><em>重写的方法的访问等级不能变严格，例如父类是protected，子类不能是private</em></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">public</span> name<span class="token operator">:</span> string<span class="token punctuation">;</span>\n\t<span class="token keyword">public</span> <span class="token function">sayHi</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// 类内调用</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>name\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 类外</span>\nperson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;caffrey&#39;</span>\nperson<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor</h3><p>constructor会在类实例化（new Class）的时候被执行</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 传统写法</span>\n  <span class="token comment">// public name: string;</span>\n  <span class="token comment">// constructor(name: string) {</span>\n  <span class="token comment">//   this.name = name;</span>\n  <span class="token comment">// }</span>\n  <span class="token comment">// 带访问类型的简化写法</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">public</span> name<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;dell&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li>父类和子类<strong>都有</strong>构造器</li></ul><p><strong>子类构造器</strong>需要调用父类的构造函数，否则会报错super(...)</p><p>即使父类没有参数，也要调用super()</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">public</span> name<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">public</span> age<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">&#39;caffrey&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> teacher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>teacher<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 28</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>teacher<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// caffrey</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="静态属性-getter和setter" tabindex="-1"><a class="header-anchor" href="#静态属性-getter和setter" aria-hidden="true">#</a> 静态属性，getter和setter</h2><h3 id="类里面的getter和setter" tabindex="-1"><a class="header-anchor" href="#类里面的getter和setter" aria-hidden="true">#</a> 类里面的getter和setter</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">private</span> name<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword">get</span> <span class="token function">getName</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39; go&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;caffrey&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// get直接getName调用，不需要person.getName()</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>getName<span class="token punctuation">)</span>\n<span class="token comment">// &#39;caffrey go&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>private的属性(私有属性)一般使用_name命名</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">private</span> _name<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">+</span> <span class="token string">&#39; go&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> realName <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> realName<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;caffrey&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// get</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// set</span>\nperson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;caffrey go&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="设计模式-单例模式" tabindex="-1"><a class="header-anchor" href="#设计模式-单例模式" aria-hidden="true">#</a> 设计模式：单例模式</h3><p>只能生成一个类的实例（不允许外部以new Demo()的方式创建实例）</p><p><strong>private</strong>私有限制符,只允许内部调用，默认<strong>public</strong></p><p><strong>static</strong>静态属性，将方法直接挂载在类上面，而不是类的实例上面</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> instance<span class="token operator">:</span> Demo<span class="token punctuation">;</span>\n    <span class="token comment">// 不允许外部以new Demo()的方式创建实例</span>\n    <span class="token keyword">private</span> <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">public</span> name<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n   \t<span class="token comment">// static将方法直接挂载在类上面，而不是类的实例上面</span>\n    <span class="token comment">// new Demo可以在类内调用</span>\n\t<span class="token comment">// static getInstance == public static getInstance</span>\n    <span class="token keyword">static</span> <span class="token function">getInstance</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token string">&#39;caffrey go&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// demo1 demo2完全相同，而不是两个不同实例</span>\n<span class="token keyword">const</span> demo1 <span class="token operator">=</span> Demo<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> demo2 <span class="token operator">=</span> Demo<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// demo1.name === demo2.name === &#39;caffrey go&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><hr><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Axios</span> <span class="token punctuation">{</span>\n  <span class="token keyword">private</span> <span class="token keyword">static</span> instance<span class="token operator">:</span> Axios <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>\n  <span class="token keyword">private</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// private构造函数，禁止外部调用创建新对象</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">static</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>Axios<span class="token punctuation">.</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;创建Axios实例&#39;</span><span class="token punctuation">)</span>\n      Axios<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Axios</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> Axios<span class="token punctuation">.</span>instance\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> axios <span class="token operator">=</span> Axios<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 创建Axios实例</span>\n<span class="token keyword">const</span> axios1 <span class="token operator">=</span> Axios<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>axios <span class="token operator">===</span> axios1<span class="token punctuation">)</span>  <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="readonly只读" tabindex="-1"><a class="header-anchor" href="#readonly只读" aria-hidden="true">#</a> readonly只读</h2><ul><li>通过getter和setter实现</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">private</span> _name<span class="token operator">:</span> string<span class="token punctuation">;</span>\n\t<span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">get</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    \t<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 报错，没有设置getter的私有属性无法读取</span>\nperson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><ul><li>readonly</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">public</span> readonly name<span class="token operator">:</span> string<span class="token punctuation">;</span>\n\t<span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 报错，readonly这样的public属性只能读不能改</span>\nperson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="抽象类" tabindex="-1"><a class="header-anchor" href="#抽象类" aria-hidden="true">#</a> 抽象类</h2><h3 id="抽象类-方法" tabindex="-1"><a class="header-anchor" href="#抽象类-方法" aria-hidden="true">#</a> 抽象类/方法</h3><ul><li>类的通性 =&gt; 抽象类</li><li>abstract方法，具体实现不确定（只能定义，不能实现）,继承的抽象方法必须实现</li><li>抽象类只能被<strong>继承</strong>，不能被实例化</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// abstract类，通用的类</span>\nabstract <span class="token keyword">class</span> <span class="token class-name">Geom</span> <span class="token punctuation">{</span>\n    width<span class="token operator">:</span> number<span class="token punctuation">;</span>\n    <span class="token function">getType</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&#39;Geom&#39;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// abstract方法，具体实现不确定（只能定义，不能实现）</span>\n\tabstract <span class="token function">getArea</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>： number<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">Geom</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 继承的抽象方法必须实现</span>\n    <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token number">123</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Square</span>  <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Triangle</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="抽象类和接口" tabindex="-1"><a class="header-anchor" href="#抽象类和接口" aria-hidden="true">#</a> 抽象类和接口</h3><ul><li>抽象类是把类里面相关的通用的东西抽象出来</li><li>接口是把各种对象等的通用性东西的提炼</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> string<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Teacher</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n\tteachingAge<span class="token operator">:</span> number\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n\tage<span class="token operator">:</span> number\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> teacher <span class="token operator">=</span> <span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token string">&#39;caffrey&#39;</span><span class="token punctuation">,</span>\n\tteachingAge<span class="token operator">:</span> <span class="token number">3</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> student <span class="token operator">=</span> <span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token string">&#39;go&#39;</span><span class="token punctuation">,</span>\n\tage<span class="token operator">:</span> <span class="token number">18</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">getUserInfo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">user<span class="token operator">:</span> Person</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">getUserInfo</span><span class="token punctuation">(</span>teacher<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">getUserInfo</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div>',127),e={render:function(n,s){return p}}}}]);