"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8135],{9234:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-368e2512",path:"/note/functional.html",title:"函数式编程",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"纯函数",slug:"纯函数",children:[]},{level:2,title:"一等公民函数",slug:"一等公民函数",children:[]},{level:2,title:"持久化数据结构",slug:"持久化数据结构",children:[{level:3,title:"Immer.js",slug:"immer-js",children:[]}]},{level:2,title:"Reduce",slug:"reduce",children:[{level:3,title:"reduce 推导 map",slug:"reduce-推导-map",children:[]},{level:3,title:"参数组合",slug:"参数组合",children:[]},{level:3,title:"函数 pipeline",slug:"函数-pipeline",children:[]}]},{level:2,title:"声明式数据流",slug:"声明式数据流",children:[{level:3,title:"链式调用",slug:"链式调用",children:[]},{level:3,title:"独立函数",slug:"独立函数",children:[]}]},{level:2,title:"函数组合",slug:"函数组合",children:[{level:3,title:"pipe",slug:"pipe",children:[]},{level:3,title:"compose",slug:"compose",children:[]}]},{level:2,title:"多元函数解决方案",slug:"多元函数解决方案",children:[{level:3,title:"柯里化",slug:"柯里化",children:[]},{level:3,title:"偏函数",slug:"偏函数",children:[]}]},{level:2,title:"范畴论启发下的函数设计模式",slug:"范畴论启发下的函数设计模式",children:[{level:3,title:"组合问题的链式解法",slug:"组合问题的链式解法",children:[]}]},{level:2,title:"Functor 函子",slug:"functor-函子",children:[{level:3,title:"Identity Functor",slug:"identity-functor",children:[]},{level:3,title:"Maybe Functor",slug:"maybe-functor",children:[]},{level:3,title:"合法的 Functor",slug:"合法的-functor",children:[]}]},{level:2,title:"Monad 单子",slug:"monad-单子",children:[{level:3,title:"嵌套盒子",slug:"嵌套盒子",children:[]},{level:3,title:"flatMap",slug:"flatmap",children:[]}]},{level:2,title:"Semigroup 与 Monoid",slug:"semigroup-与-monoid",children:[{level:3,title:"Semigroup",slug:"semigroup",children:[]},{level:3,title:"Monoid",slug:"monoid",children:[]}]}],filePathRelative:"note/functional.md",git:{updatedTime:1672372842e3,contributors:[{name:"Jinrui Chen",email:"jinrui@kooboo.cn",commits:10}]}}},5717:(n,s,a)=>{a.r(s),a.d(s,{default:()=>X});var t=a(6252);const e=(0,t._)("h1",{id:"函数式编程",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#函数式编程","aria-hidden":"true"},"#"),(0,t.Uk)(" 函数式编程")],-1),p=(0,t._)("div",{class:"custom-container tip"},[(0,t._)("p",{class:"custom-container-title"},"函数式编程的三大特征："),(0,t._)("p",null,"✅ 拒绝副作用，拥抱纯函数"),(0,t._)("p",null,"✅ 函数是一等公民"),(0,t._)("p",null,"✅ 避免对状态的改变")],-1),o=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token comment"},"// 定义筛选逻辑"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t._)("span",{class:"token function-variable function"},"ageBiggerThan24"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"person"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(" person"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("age "),(0,t._)("span",{class:"token operator"},">="),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"24"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token comment"},"// 定义排序逻辑"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t._)("span",{class:"token function-variable function"},"smallAgeFirst"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},[(0,t.Uk)("a"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" b")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(" a"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("age "),(0,t._)("span",{class:"token operator"},"-"),(0,t.Uk)(" b"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("age\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token comment"},"// 定义信息提取逻辑"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t._)("span",{class:"token function-variable function"},"generateLogText"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"person"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token operator"},"=>"),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" perLogText "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token template-string"},[(0,t._)("span",{class:"token template-punctuation string"},"`"),(0,t._)("span",{class:"token interpolation"},[(0,t._)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,t.Uk)("person"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("name"),(0,t._)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,t._)("span",{class:"token string"},"'s age is "),(0,t._)("span",{class:"token interpolation"},[(0,t._)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,t.Uk)("person"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("age"),(0,t._)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,t._)("span",{class:"token template-punctuation string"},"`")]),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(" perLogText\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" logText "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" peopleList"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"filter"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("ageBiggerThan24"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"sort"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("smallAgeFirst"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"map"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("generateLogText"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"join"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"','"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\nconsole"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"log"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("logText"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"19"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"20"),(0,t._)("br")])],-1),c=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" len "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" peopleList"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("length\n\n"),(0,t._)("span",{class:"token comment"},"// 对员工列表按照年龄【排序】"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"for"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" i"),(0,t._)("span",{class:"token operator"},"="),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)("i"),(0,t._)("span",{class:"token operator"},"<"),(0,t.Uk)("len"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)("i"),(0,t._)("span",{class:"token operator"},"++"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"// 内层循环用于完成每一轮遍历过程中的重复比较+交换"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"for"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" j"),(0,t._)("span",{class:"token operator"},"="),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)("j"),(0,t._)("span",{class:"token operator"},"<"),(0,t.Uk)("len"),(0,t._)("span",{class:"token operator"},"-"),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)("j"),(0,t._)("span",{class:"token operator"},"++"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token comment"},"// 若相邻元素前面的数比后面的大"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token keyword"},"if"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("peopleList"),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("j"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("age "),(0,t._)("span",{class:"token operator"},">"),(0,t.Uk)(" peopleList"),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("j"),(0,t._)("span",{class:"token operator"},"+"),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("age"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token comment"},"// 交换两者"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("peopleList"),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("j"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" peopleList"),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("j"),(0,t._)("span",{class:"token operator"},"+"),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("peopleList"),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("j"),(0,t._)("span",{class:"token operator"},"+"),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" peopleList"),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("j"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" logText "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"''"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"for"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" i"),(0,t._)("span",{class:"token operator"},"="),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i"),(0,t._)("span",{class:"token operator"},"<"),(0,t.Uk)("len"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i"),(0,t._)("span",{class:"token operator"},"++"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" person "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" peopleList"),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("i"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"// 【筛选】出年龄符合条件的"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"if"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)(" person"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("age "),(0,t._)("span",{class:"token operator"},">="),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"24"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token comment"},"// 从数组中【提取】目标信息到 logText"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" perLogText "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token template-string"},[(0,t._)("span",{class:"token template-punctuation string"},"`"),(0,t._)("span",{class:"token interpolation"},[(0,t._)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,t.Uk)("person"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("name"),(0,t._)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,t._)("span",{class:"token string"},"'s age is "),(0,t._)("span",{class:"token interpolation"},[(0,t._)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,t.Uk)("person"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("age"),(0,t._)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,t._)("span",{class:"token template-punctuation string"},"`")]),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token keyword"},"if"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("i"),(0,t._)("span",{class:"token operator"},"!=="),(0,t.Uk)("len"),(0,t._)("span",{class:"token operator"},"-"),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n            logText "),(0,t._)("span",{class:"token operator"},"+="),(0,t.Uk)(),(0,t._)("span",{class:"token template-string"},[(0,t._)("span",{class:"token template-punctuation string"},"`"),(0,t._)("span",{class:"token interpolation"},[(0,t._)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,t.Uk)("perLogText"),(0,t._)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,t._)("span",{class:"token string"},","),(0,t._)("span",{class:"token template-punctuation string"},"`")]),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n            logText "),(0,t._)("span",{class:"token operator"},"+="),(0,t.Uk)(" perLogText\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\nconsole"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"log"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("logText"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"19"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"20"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"21"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"22"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"23"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"24"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"25"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"26"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"27"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"28"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"29"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"30"),(0,t._)("br")])],-1),l=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" peopleList "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        name"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'John Lee'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        age"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"24"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        career"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'engineer'"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        name"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'Bob Chen'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        age"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"22"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        career"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'engineer'"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        name"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'Lucy Liu'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        age"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"28"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        career"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'PM'"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        name"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'Jack Zhang'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        age"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"26"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        career"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'PM'"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        name"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'Yan Xiu'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        age"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"30"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        career"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'engineer'"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"19"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"20"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"21"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"22"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"23"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"24"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"25"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"26"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"27"),(0,t._)("br")])],-1),u=(0,t.uE)('<blockquote><p>函数式编程是声明式编程</p></blockquote><h2 id="纯函数" tabindex="-1"><a class="header-anchor" href="#纯函数" aria-hidden="true">#</a> 纯函数</h2><div class="custom-container tip"><p class="custom-container-title">纯函数</p><p>对于相同的输入，总是会得到相同的输出；</p><p>在执行过程中没有语义上可观察的副作用。</p></div><p><code>数学化的 JS 函数 === 纯函数</code>：函数源于数学，计算机中的函数式编程通过纯函数达到类似函数的行为。</p><h2 id="一等公民函数" tabindex="-1"><a class="header-anchor" href="#一等公民函数" aria-hidden="true">#</a> 一等公民函数</h2><details class="custom-container details"><summary>First-class function：当一门编程语言的函数可以被当作变量一样用时，则称这门语言拥有头等函数。</summary><blockquote><p>例如，在这门语言中，函数可以被当作参数传递给其他函数，可以作为另一个函数的返回值，还可以被赋值给一个变量</p></blockquote></details><div class="custom-container tip"><p class="custom-container-title">“可以被当做变量一样用” 意味着：</p><p>可以被当作参数传递给其他函数</p><p>可以作为另一个函数的返回值</p><p>可以被赋值给一个变量</p></div><p>✅ JavaScript 函数的本质就是可执行<strong>对象</strong>。</p><h2 id="持久化数据结构" tabindex="-1"><a class="header-anchor" href="#持久化数据结构" aria-hidden="true">#</a> 持久化数据结构</h2><p>对于函数式编程来说，函数的外部数据是只读的，函数的内部数据则是可写的。</p><p>对于一个纯函数来说，它需要把自己的入参当做只读数据，它也需要把自己可访问的所有全局变量/自由变量当做只读数据。 有且仅有这些外部数据，存在 <strong>只读</strong> 的必要。</p><blockquote><p>Git 快照保存文件索引，而不会保存文件本身。变化的文件将拥有新的存储空间 + 新的索引，不变的文件将永远呆在原地。这是 Git 应对变化的艺术，也是持久化数据结构的核心思想。</p></blockquote><blockquote><p>Immutable.js 仅会创建变化的那部分，和一个指向源对象的指针，进而复用不变的字段。</p></blockquote><h3 id="immer-js" tabindex="-1"><a class="header-anchor" href="#immer-js" aria-hidden="true">#</a> Immer.js</h3>',14),r=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"import"),(0,t.Uk)(" produce "),(0,t._)("span",{class:"token keyword"},"from"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},'"immer"'),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token comment"},"// 这是我的源数据"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" baseState "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        name"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},'"Jerry"'),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        age"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"99"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        name"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},'"Meghan"'),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        age"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"100"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token comment"},"// 定义数据的写逻辑"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t._)("span",{class:"token function-variable function"},"recipe"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token parameter"},"draft"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    draft"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"push"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("name"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},'"Michael"'),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" age"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"101"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    draft"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("age "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"102"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token comment"},"// 借助 produce，执行数据的写逻辑"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" nextState "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"produce"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("baseState"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" recipe"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"19"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"20"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"21"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"22"),(0,t._)("br")])],-1),k=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token comment"},"// 定义一个 programmer 对象"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" programmer "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    name"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'Jerry'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    age"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"30"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token comment"},"// 定义这个对象的拦截逻辑"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" proxyHandler "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"// obj 是目标对象， key 是被访问的键名"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token function"},"get"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("obj"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" key"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token keyword"},"if"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("key "),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'age'"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"100"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(" obj"),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("key"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token comment"},"// 借助 Proxy，将这个对象使用拦截逻辑包起来"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" wrappedProgrammer "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t._)("span",{class:"token class-name"},"Proxy"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("programmer"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" proxyHandler"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token comment"},"// 'Jerry'"),(0,t.Uk)("\nconsole"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"log"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("wrappedProgrammer"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("name"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token comment"},"// 100"),(0,t.Uk)("\nconsole"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"log"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("wrappedProgrammer"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("age"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"19"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"20"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"21"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"22"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"23"),(0,t._)("br")])],-1),i=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"produce"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},[(0,t.Uk)("base"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" recipe")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"// 预定义一个 copy 副本"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" copy\n    "),(0,t._)("span",{class:"token comment"},"// 定义 base 对象的 proxy handler"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" baseHandler "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token function"},"set"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("obj"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" key"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" value"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token comment"},"// 先检查 copy 是否存在，如果不存在，创建 copy"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token operator"},"!"),(0,t.Uk)("copy"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n                copy "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"..."),(0,t.Uk)("base "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token comment"},"// 如果 copy 存在，修改 copy，而不是 base"),(0,t.Uk)("\n            copy"),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("key"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" value\n            "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token boolean"},"true"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n    "),(0,t._)("span",{class:"token comment"},"// 被 proxy 包装后的 base 记为 draft"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" draft "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t._)("span",{class:"token class-name"},"Proxy"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("base"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" baseHandler"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"// 将 draft 作为入参传入 recipe"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token function"},"recipe"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("draft"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"// 返回一个被“冻结”的 copy，如果 copy 不存在，表示没有执行写操作，返回 base 即可"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"// “冻结”是为了避免意外的修改发生，进一步保证数据的纯度"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(" Object"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"freeze"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("copy "),(0,t._)("span",{class:"token operator"},"||"),(0,t.Uk)(" base"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"19"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"20"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"21"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"22"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"23"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"24"),(0,t._)("br")])],-1),_=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token comment"},"// 这是我的源对象"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" baseObj "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  a"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n  b"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    name"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},'"Jc"'),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token comment"},"// 这是一个执行写操作的 recipe"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t._)("span",{class:"token function-variable function"},"changeA"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"draft"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  draft"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("a "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"2"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n\n"),(0,t._)("span",{class:"token comment"},"// 这是一个不执行写操作、只执行读操作的 recipe"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t._)("span",{class:"token function-variable function"},"doNothing"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"draft"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  console"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"log"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},'"doNothing function is called, and draft is"'),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" draft"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token comment"},"// 借助 produce，对源对象应用写操作，修改源对象里的 a 属性"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" changedObjA "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"produce"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("baseObj"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" changeA"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token comment"},"// 借助 produce，对源对象应用读操作"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" doNothingObj "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"produce"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("baseObj"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" doNothing"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token comment"},"// 顺序输出3个对象，确认写操作确实生效了"),(0,t.Uk)("\nconsole"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"log"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("baseObj"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"log"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("changedObjA"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"log"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("doNothingObj"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token comment"},"// 【源对象】 和 【借助 produce 对源对象执行过读操作后的对象】 还是同一个对象吗？"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token comment"},"// 答案为 true"),(0,t.Uk)("\nconsole"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"log"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("baseObj "),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(" doNothingObj"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token comment"},"// 【源对象】 和 【借助 produce 对源对象执行过写操作后的对象】 还是同一个对象吗？"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token comment"},"// 答案为 false"),(0,t.Uk)("\nconsole"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"log"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("baseObj "),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(" changedObjA"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token comment"},"// 源对象里没有被执行写操作的 b 属性，在 produce 执行前后是否会发生变化？"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token comment"},"// 输出为 true，说明不会发生变化"),(0,t.Uk)("\nconsole"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"log"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("baseObj"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("b "),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(" changedObjA"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("b"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"19"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"20"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"21"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"22"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"23"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"24"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"25"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"26"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"27"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"28"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"29"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"30"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"31"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"32"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"33"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"34"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"35"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"36"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"37"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"38"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"39"),(0,t._)("br")])],-1),b=(0,t.uE)('<p><code>produce</code> 借助 Proxy，将拷贝动作发生的时机和 <code>setter</code> 函数的触发时机牢牢绑定，确保了拷贝动作的精确性。 而逐层的浅拷贝，则间接地实现了数据在新老对象间的共享。</p><blockquote><p>Immer.js 是通过逐层的浅拷贝实现“知其所止”，这里关注于函数式思想，忽略了这个实现。</p></blockquote><h2 id="reduce" tabindex="-1"><a class="header-anchor" href="#reduce" aria-hidden="true">#</a> Reduce</h2><h3 id="reduce-推导-map" tabindex="-1"><a class="header-anchor" href="#reduce-推导-map" aria-hidden="true">#</a> <code>reduce</code> 推导 <code>map</code></h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add1AndPush</span><span class="token punctuation">(</span><span class="token parameter">previousValue<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// previousValue 是一个数组</span>\n    previousValue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> previousValue\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> newArray <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>add1AndPush<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>map()</code> 的过程本质上也是一个 <code>reduce()</code>的过程。</p><p>区别仅仅在于， <code>reduce()</code> 本体的回调函数入参可以是任何值，出参也可以是任何值；而 map 则是一个相对特殊的 <code>reduce() </code>,它锁定了一个数组作为每次回调的第一个入参，并且限定了 <code>reduce()</code> 的返回结果只能是数组。</p><h3 id="参数组合" tabindex="-1"><a class="header-anchor" href="#参数组合" aria-hidden="true">#</a> 参数组合</h3><ol><li>首先，就 reduce() 过程中的单个步骤来说，每一次回调执行，都会吃进 2 个参数，吐出 1 个结果。我们可以把每一次的调用看做是把 2 个入参被【<strong>组合</strong>】进了 callback 函数里，最后转化出 1 个出参的过程。</li><li>我们把数组中的 n 个元素看做 n 个参数，那么 <code>reduce()</code> 的过程，就是一个把 n 个参数逐步【<strong>组合</strong>】到一起，最终吐出 1 个结果的过程。</li></ol><p><em>reduce，动词，意为减少。这个【减少】可以理解为是参数个数的减少。</em></p><h3 id="函数-pipeline" tabindex="-1"><a class="header-anchor" href="#函数-pipeline" aria-hidden="true">#</a> 函数 pipeline</h3><p><code>reduce()</code> 函数发起的工作流，可以看作是一个函数 pipeline。</p><p>尽管每次调用的都是同一个函数，但上一个函数的输出，总是会成为下一个函数的输入。</p><p>同时，<code>reduce()</code> pipeline 里的每一个任务都是一样的，仅仅是入参不同，这极大地约束了 pipeline 的能力。</p><p><em>有没有可能把 pipeline 里的每一个函数也弄成不一样的呢？ JavaScript 函数可以作为参数</em></p><h2 id="声明式数据流" tabindex="-1"><a class="header-anchor" href="#声明式数据流" aria-hidden="true">#</a> 声明式数据流</h2><h3 id="链式调用" tabindex="-1"><a class="header-anchor" href="#链式调用" aria-hidden="true">#</a> 链式调用</h3>',17),m=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" filteredArr "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" arr"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"filter"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("biggerThan2"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("    \n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" multipledArr "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" filteredArr"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"map"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("multi2"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("    \n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" sum "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" multipledArr"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"reduce"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("add"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br")])],-1),d=(0,t._)("p",null,"命令式代码产生了不必要的计算中间态。",-1),U=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" sum "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" arr"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"filter"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("biggerThan2"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"map"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("multi2"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"reduce"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("add"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br")])],-1),f=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token comment"},"// 用于筛选大于2的数组元素"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t._)("span",{class:"token function-variable function"},"biggerThan2"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token parameter"},"num"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(" num "),(0,t._)("span",{class:"token operator"},">"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"2"),(0,t.Uk)("  \n"),(0,t._)("span",{class:"token comment"},"// 用于做乘以2计算"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t._)("span",{class:"token function-variable function"},"multi2"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token parameter"},"num"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(" num "),(0,t._)("span",{class:"token operator"},"*"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"2"),(0,t.Uk)("    \n"),(0,t._)("span",{class:"token comment"},"// 用于求和"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t._)("span",{class:"token function-variable function"},"add"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},[(0,t.Uk)("a"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" b")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(" a "),(0,t._)("span",{class:"token operator"},"+"),(0,t.Uk)(" b   \n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br")])],-1),g=(0,t.uE)('<hr><p>链式调用是声明式的。基于此构建出的数据流，就是声明式的数据流。</p><div class="custom-container tip"><p class="custom-container-title">链式调用的前提</p><ol><li>它们都<strong>挂载在 Array 原型的 Array.prototype</strong> 上</li><li>它们在计算结束后都会 return 一个新的 Array</li><li>既然 return 出来的也是 Array，那么自然可以继续访问原型 <strong>Array.prototype</strong> 上的方法</li></ol><blockquote><p>链式调用的本质 ，是通过在方法中返回对象实例本身的 this/ 与实例 this 相同类型的对象，达到多次调用其原型（链）上方法的目的。要对函数执行链式调用，前提是函数挂载在一个靠谱的宿主 Object 上。</p></blockquote></div><p>✅ 实现声明式的数据流，除了借助链式调用，还可以借助函数组合。</p><h3 id="独立函数" tabindex="-1"><a class="header-anchor" href="#独立函数" aria-hidden="true">#</a> 独立函数</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add4</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> num <span class="token operator">+</span> <span class="token number">4</span>\n<span class="token punctuation">}</span>  \n\n<span class="token keyword">function</span> <span class="token function">mutiply3</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> num<span class="token operator">*</span><span class="token number">3</span>\n<span class="token punctuation">}</span>  \n\n<span class="token keyword">function</span> <span class="token function">divide2</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> num<span class="token operator">/</span><span class="token number">2</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> sum <span class="token operator">=</span>  <span class="token function">add4</span><span class="token punctuation">(</span><span class="token function">mutiply</span><span class="token punctuation">(</span><span class="token function">divide2</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>🤡 独立函数无法使用链式调用，导致了回调地狱。</p><h2 id="函数组合" tabindex="-1"><a class="header-anchor" href="#函数组合" aria-hidden="true">#</a> 函数组合</h2><h3 id="pipe" tabindex="-1"><a class="header-anchor" href="#pipe" aria-hidden="true">#</a> pipe</h3>',9),h=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token comment"},"// 构建 pipeline"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"pipe"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},[(0,t._)("span",{class:"token operator"},"..."),(0,t.Uk)("funcs")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"callback"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},[(0,t.Uk)("input"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" func")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"func"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("input"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("  \n\n    "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"function"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"param"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(" funcs"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"reduce"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("callback"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" param"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" compute "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"pipe"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("add4"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" mutiply3"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" divide2"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token comment"},"// 执行 pipeline：21"),(0,t.Uk)("\nconsole"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"log"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token function"},"compute"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"10"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("add4"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" mutiply3"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" divide2"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"reduce"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},[(0,t.Uk)("result"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" func")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"func"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("result"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"10"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t._)("span",{class:"token comment"},"// 21"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br")])],-1),v=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"add4"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"num"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(" num "),(0,t._)("span",{class:"token operator"},"+"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"4"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("  \n\n"),(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"mutiply3"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"num"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(" num"),(0,t._)("span",{class:"token operator"},"*"),(0,t._)("span",{class:"token number"},"3"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("  \n\n"),(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"divide2"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"num"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(" num"),(0,t._)("span",{class:"token operator"},"/"),(0,t._)("span",{class:"token number"},"2"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br")])],-1),y=(0,t.uE)('<h3 id="compose" tabindex="-1"><a class="header-anchor" href="#compose" aria-hidden="true">#</a> compose</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// compose 则用于创建一个倒序的函数传送带</span>\n<span class="token keyword">function</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>funcs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token parameter">input<span class="token punctuation">,</span> func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>  \n\n    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> funcs<span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> param<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 21</span>\n<span class="token keyword">const</span> compute <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span>divide2<span class="token punctuation">,</span> mutiply3<span class="token punctuation">,</span> add4<span class="token punctuation">)</span>\n\n<span class="token punctuation">[</span>divide2<span class="token punctuation">,</span> mutiply3<span class="token punctuation">,</span> add4<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span> func</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token function">func</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>✅ 面向对象的核心在于继承，而<strong>函数式编程的核心则在于组合</strong>。</p><h2 id="多元函数解决方案" tabindex="-1"><a class="header-anchor" href="#多元函数解决方案" aria-hidden="true">#</a> 多元函数解决方案</h2><div class="custom-container tip"><p class="custom-container-title">偏函数和柯里化解决的最核心的问题有两个，分别是：</p><ul><li>函数组合链中的多元参数问题</li><li>函数逻辑复用的问题</li></ul><blockquote><p>函数参数里的“元数(Arity)”，指的其实就是函数参数的数量。来源于数学的“n元函数”。</p></blockquote></div><blockquote><p>对于函数组合链来说，它总是预期链上的函数是一元函数：函数吃进一个入参，吐出一个出参，然后这个出参又会作为下一个一元函数的入参......<strong>参数个数的对齐，是组合链能够运转的前提</strong>。</p></blockquote><p>🤡 一旦链上乱入了多元函数，那么多元函数的入参数量就无法和上一个函数的出参数量对齐，进而导致执行错误。</p><h3 id="柯里化" tabindex="-1"><a class="header-anchor" href="#柯里化" aria-hidden="true">#</a> 柯里化</h3><p>把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。</p><p>✅ 通俗来讲，它是这个意思： 柯里化是把 <strong>1 个 n 元函数</strong>改造为 <strong>n 个相互嵌套的一元函数</strong>的过程。</p>',10),w={href:"https://www.ijerrychen.com/note/manual.html#%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96",target:"_blank",rel:"noopener noreferrer"},x=(0,t.Uk)("柯里化的实现(opens new window)"),j=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token comment"},"// 定义高阶函数 curry"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"curry"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"addThreeNum"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"// 返回一个嵌套了三层的函数"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"addA"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"a"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token comment"},"// 第一层“记住”参数a"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"addB"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"b"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token comment"},"// 第二层“记住”参数b"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"addC"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"c"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n                "),(0,t._)("span",{class:"token comment"},"// 第三层直接调用现有函数 addThreeNum"),(0,t.Uk)("\n                "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"addThreeNum"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("a"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" b"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" c"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token comment"},"// 借助 curry 函数将 add"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" curriedAddThreeNum "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"curry"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("addThreeNum"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token comment"},"// 输出6，输出结果符合预期"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token function"},"curriedAddThreeNum"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"2"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"3"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"19"),(0,t._)("br")])],-1),M=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" compute "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"pipe"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token function"},"curriedAdd"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" \n    "),(0,t._)("span",{class:"token function"},"curriedMultiply"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"2"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"3"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" \n    "),(0,t._)("span",{class:"token function"},"curriedAddMore"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"2"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"3"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" \n    "),(0,t._)("span",{class:"token function"},"curriedDivide"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"300"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br")])],-1),S=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"add"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},[(0,t.Uk)("a"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" b")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(" a "),(0,t._)("span",{class:"token operator"},"+"),(0,t.Uk)(" b\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"multiply"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},[(0,t.Uk)("a"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" b"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" c")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(" a"),(0,t._)("span",{class:"token operator"},"*"),(0,t.Uk)("b"),(0,t._)("span",{class:"token operator"},"*"),(0,t.Uk)("c\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"addMore"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},[(0,t.Uk)("a"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" b"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" c"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" d")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(" a"),(0,t._)("span",{class:"token operator"},"+"),(0,t.Uk)("b"),(0,t._)("span",{class:"token operator"},"+"),(0,t.Uk)("c"),(0,t._)("span",{class:"token operator"},"+"),(0,t.Uk)("d\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"divide"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},[(0,t.Uk)("a"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" b")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(" a"),(0,t._)("span",{class:"token operator"},"/"),(0,t.Uk)("b\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br")])],-1),A=(0,t.uE)('<h3 id="偏函数" tabindex="-1"><a class="header-anchor" href="#偏函数" aria-hidden="true">#</a> 偏函数</h3><blockquote><p>tips: 偏函数英文是 partial application， 直译过来就是“部分应用”。</p></blockquote><ul><li>柯里化说的是一个 n 元函数变成 n 个一元函数。</li><li>偏函数，仅有函数的元发生了变化（减少了），函数的数量是不变的。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 定义一个包装函数，专门用来处理偏函数逻辑</span>\n<span class="token keyword">function</span> <span class="token function">wrapFunc</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> fixedValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 包装函数的目标输出是一个新的函数</span>\n    <span class="token keyword">function</span> <span class="token function">wrappedFunc</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// 这个函数会固定 fixedValue，然后把 input 作为动态参数读取</span>\n        <span class="token keyword">const</span> newFunc <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> fixedValue<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> newFunc\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> wrappedFunc\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> multiply3 <span class="token operator">=</span> <span class="token function">wrapFunc</span><span class="token punctuation">(</span>multiply<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 输出6</span>\n<span class="token function">multiply3</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>✅ 偏函数固定了一些入参，无需再还原逻辑。通过偏函数处理实现对存量逻辑的控制。减少重复代码的定义和重复传参。</p><h2 id="范畴论启发下的函数设计模式" tabindex="-1"><a class="header-anchor" href="#范畴论启发下的函数设计模式" aria-hidden="true">#</a> 范畴论启发下的函数设计模式</h2><p><code>Functor</code>、<code>Monad</code>、<code>Semigroup</code>、<code>Monoid</code>......这些由范畴论推导出来的编码模式，我们可以记为“范畴论设计模式”。</p><div class="custom-container tip"><p class="custom-container-title">盒子的共性</p><ul><li>盒子是一个存放数据的容器，它的内部肯定会维护一套数据。这套数据总是以盒子入参的形式传入，总是作为我们整个组合链的起点。</li><li>同时，盒子内部可以定义一系列操作数据的函数。这些函数未必需要具备【<strong>创建并返回新的盒子</strong>】的能力，但是<strong>关键的函数、决定盒子性质的那些函数</strong>，往往需要具备这个能力。</li></ul></div><h3 id="组合问题的链式解法" tabindex="-1"><a class="header-anchor" href="#组合问题的链式解法" aria-hidden="true">#</a> 组合问题的链式解法</h3><p>不借助 <code>compose/pipe</code> 函数，构造声明式的数据流。</p><p>✅ 构造一个【能够创造新盒子】盒子：</p>',11),F=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t._)("span",{class:"token function-variable function"},"Box"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token parameter"},"x"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token function-variable function"},"map"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token parameter"},"f"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"Box"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token function"},"f"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("x"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token function-variable function"},"valueOf"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(" x\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" newBox "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"Box"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"10"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"map"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("add4"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("  \n"),(0,t._)("span",{class:"token comment"},"// 输出 14"),(0,t.Uk)("\nnewBox"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"valueOf"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token comment"},"// 值为 21"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" computeBox "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"Box"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"10"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"map"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("add4"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"map"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("mutiply3"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"map"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("divide2"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"valueOf"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br")])],-1),W=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"add4"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"num"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(" num "),(0,t._)("span",{class:"token operator"},"+"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"4"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("  \n\n"),(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"mutiply3"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"num"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(" num"),(0,t._)("span",{class:"token operator"},"*"),(0,t._)("span",{class:"token number"},"3"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("  \n\n"),(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"divide2"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"num"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(" num"),(0,t._)("span",{class:"token operator"},"/"),(0,t._)("span",{class:"token number"},"2"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br")])],-1),O=(0,t.uE)('<p>✅ 范畴论对于函数式编程最关键的影响，就在于“复合”，或者说在于“函数的组合”。</p><details class="custom-container details"><summary>盒子 💡</summary><ul><li>此盒又名 <code>Functor</code>（函子），一个 <code>Functor</code> 就是一个能够被映射的“东西”。这里，<code>Functor</code> 指的是一个实现了 map 方法的数据结构。</li><li>产生函子，保证纯函数，方便统一接口，组合运算。map 更像提供一种集合的映射能力，map 接收的函数表示这段映射之间的关系。</li></ul></details><h2 id="functor-函子" tabindex="-1"><a class="header-anchor" href="#functor-函子" aria-hidden="true">#</a> Functor 函子</h2><p>Array 其实就是一种 Functor，它也是一种实现了 map 方法的数据结构：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;orange&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;papaya&#39;</span><span class="token punctuation">]</span>   \n\n<span class="token keyword">const</span> fruitsWithSugar <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">fruit</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Super Sweet </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fruit<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="identity-functor" tabindex="-1"><a class="header-anchor" href="#identity-functor" aria-hidden="true">#</a> Identity Functor</h3><p>为了标识 Functor 的类别，可以给它补充一个 inspect 函数：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">Identity</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token function-variable function">map</span><span class="token operator">:</span> <span class="token parameter">f</span> <span class="token operator">=&gt;</span> <span class="token function">Identity</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">valueOf</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">,</span>\n    <span class="token function-variable function">inspect</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Identity {</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">}</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>✅ 通过往 map 行为里“加料”，我们就可以制作出不同的 Functor</p><h3 id="maybe-functor" tabindex="-1"><a class="header-anchor" href="#maybe-functor" aria-hidden="true">#</a> Maybe Functor</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isEmpty</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> x <span class="token operator">===</span> <span class="token keyword">null</span>  \n\n<span class="token keyword">const</span> <span class="token function-variable function">Maybe</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token function-variable function">map</span><span class="token operator">:</span> <span class="token parameter">f</span> <span class="token operator">=&gt;</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">Maybe</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Maybe</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  \n    <span class="token function-variable function">valueOf</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">,</span>  \n    <span class="token function-variable function">inspect</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Maybe {</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">}</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>如果入参 x 为空（undefined 或者 null），那么 isEmpty 就会返回 true，接下来 map 方法就不会再执行 f 函数的，而是直接返回一个空的 Maybe 盒子。</p><p>✅ 将错误在内部进行捕捉处理，避免程序 crash</p><h3 id="合法的-functor" tabindex="-1"><a class="header-anchor" href="#合法的-functor" aria-hidden="true">#</a> 合法的 Functor</h3><div class="custom-container tip"><p class="custom-container-title">Functor 的“生存法则”，一个合法的 Functor 需要满足以下条件：</p><ol><li>恒等性（Identity）</li><li>可组合性（Composition）</li></ol></div>',15),T=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token comment"},"// const identity = x => x"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" originArr "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"2"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"3"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("  \n\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" identityArr "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" originArr"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"map"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"x"),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)("x"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("  \n\n"),(0,t._)("span",{class:"token comment"},"// 输出 [1, 2, 3] "),(0,t.Uk)("\nconsole"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"log"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("identityArr"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br")])],-1),E=(0,t._)("p",null,[(0,t.Uk)("✅ 将恒等函数传入 map 后，最终的映射结果 "),(0,t._)("code",null,"identityArr"),(0,t.Uk)(" 和源数据 "),(0,t._)("code",null,"originArr"),(0,t.Uk)(" 是等价的：")],-1),I=(0,t._)("ul",null,[(0,t._)("li",null,"确保你的 map 方法具备“创造一个新的盒子（Functor）”的能力"),(0,t._)("li",null,"确保你的 map 方法足够“干净”")],-1),L=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t.Uk)("Functor"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"map"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"x"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"f"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token function"},"g"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("x"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" Functor"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"map"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("g"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"map"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("f"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br")])],-1),q=(0,t._)("p",null,"✅ “盒子模式”是函数组合的另一种解法。",-1),C=(0,t.uE)('<h2 id="monad-单子" tabindex="-1"><a class="header-anchor" href="#monad-单子" aria-hidden="true">#</a> Monad 单子</h2><p>Monad 是一个同时实现了 map 方法和 <code>flatMap</code> 方法的盒子。</p><h3 id="嵌套盒子" tabindex="-1"><a class="header-anchor" href="#嵌套盒子" aria-hidden="true">#</a> 嵌套盒子</h3><p>嵌套的盒子，这里指的是在 Functor 内部嵌套 Functor 的情况。</p><div class="custom-container tip"><p class="custom-container-title">导致嵌套 Functor 的典型 case</p><ul><li>线性计算场景下的嵌套 Functor —— Functor 作为另一个 Functor 的计算中间态出现</li><li>非线性计算场景下的嵌套 Functor —— 两个 Functor 共同作为计算入参出现</li></ul></div>',5),B=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token comment"},"// 在任何情况下都会返回一个 Maybe Functor"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t._)("span",{class:"token function-variable function"},"getUserSafely"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token parameter"},"id"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("  \n    "),(0,t._)("span",{class:"token keyword"},"try"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" userInfo "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"getUser"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("id"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"Maybe"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("userInfo"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"catch"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("e"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"Maybe"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token keyword"},"null"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" targetUser "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    id"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"1100013"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("  \n    credits"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"2000"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("  \n    level"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"20"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" userContainer "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"Maybe"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("targetUser"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("  \n\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t._)("span",{class:"token function-variable function"},"extractUserId"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token parameter"},"user"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(" user "),(0,t._)("span",{class:"token operator"},"&&"),(0,t.Uk)(" user"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("id\n\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" userInfo "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" userContainer"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"map"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("extractUserId"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"map"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("getUserSafely"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"19"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"20"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"21"),(0,t._)("br")])],-1),N=(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("code",null,"map"),(0,t.Uk)(" 对每次计算的结果都会进行一次包装，确保链式调用的可能："),(0,t._)("code",null," Maybe(f(x))"),(0,t.Uk)("；")]),(0,t._)("li",null,[(0,t._)("code",null,"map(getUserSafely)"),(0,t.Uk)(" 的参数已经是一个 Maybe Functor, 通过 map 之后又被 Maybe Functor 包装了一次。；")]),(0,t._)("li",null,[(0,t._)("code",null,"userInfo"),(0,t.Uk)(" 的最终结果将是一个两层 Maybe Functor 嵌套的 "),(0,t._)("code",null,"userInfo"),(0,t.Uk)(" 数据结构。")])],-1),P=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t._)("span",{class:"token function-variable function"},"isEmpty"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token parameter"},"x"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(" x "),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"undefined"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"||"),(0,t.Uk)(" x "),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"null"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token comment"},"// Maybe Functor"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t._)("span",{class:"token function-variable function"},"Maybe"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token parameter"},"x"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token function-variable function"},"map"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token parameter"},"f"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"isEmpty"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("x"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"?"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"Maybe"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token keyword"},"null"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"Maybe"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token function"},"f"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("x"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("  \n    "),(0,t._)("span",{class:"token function-variable function"},"valueOf"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(" x"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("  \n    "),(0,t._)("span",{class:"token function-variable function"},"inspect"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t._)("span",{class:"token template-string"},[(0,t._)("span",{class:"token template-punctuation string"},"`"),(0,t._)("span",{class:"token string"},"Maybe {"),(0,t._)("span",{class:"token interpolation"},[(0,t._)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,t.Uk)("x"),(0,t._)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,t._)("span",{class:"token string"},"}"),(0,t._)("span",{class:"token template-punctuation string"},"`")]),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t._)("span",{class:"token function-variable function"},"isExisted"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token parameter"},"id"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(" id "),(0,t._)("span",{class:"token operator"},"%"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"3"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t._)("span",{class:"token function-variable function"},"getUser"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token parameter"},"id"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("  \n    "),(0,t._)("span",{class:"token keyword"},"if"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token function"},"isExisted"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("id"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n            id"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n            nickName"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"String"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("id"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"slice"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"3"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token keyword"},"throw"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t._)("span",{class:"token class-name"},"Error"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},'"User not found"'),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"19"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"20"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"21"),(0,t._)("br")])],-1),G=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token comment"},"// 该函数将对给定 score 作权重为 high 的计算处理"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t._)("span",{class:"token function-variable function"},"highWeights"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token parameter"},"score"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(" score"),(0,t._)("span",{class:"token operator"},"*"),(0,t._)("span",{class:"token number"},"0.8"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token comment"},"// 该函数将对给定 score 作权重为 low 的计算处理"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t._)("span",{class:"token function-variable function"},"lowWeights"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"score"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(" score"),(0,t._)("span",{class:"token operator"},"*"),(0,t._)("span",{class:"token number"},"0.5"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t._)("span",{class:"token function-variable function"},"computeFinalScore"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},[(0,t.Uk)("generalScore"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" healthScore")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" finalGeneralScore "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"highWeights"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("generalScore"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("  \n    "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" finalHealthScore "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"lowWeights"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("healthScore"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("  \n    "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(" finalGeneralScore "),(0,t._)("span",{class:"token operator"},"+"),(0,t.Uk)(" finalHealthScore\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t._)("span",{class:"token function-variable function"},"computeFinalScore1"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},[(0,t.Uk)("generalScore"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" healthScore")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(" \n"),(0,t._)("span",{class:"token function"},"Identity"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token function"},"highWeights"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("generalScore"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"map"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token parameter"},"finalGeneralScore"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(" \n    "),(0,t._)("span",{class:"token function"},"Identity"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token function"},"lowWeights"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("healthScore"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"map"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token parameter"},"finalhealthScore"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(" \n        finalGeneralScore "),(0,t._)("span",{class:"token operator"},"+"),(0,t.Uk)(" finalhealthScore\n    "),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"19"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"20"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"21"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"22"),(0,t._)("br")])],-1),J=(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("code",null,"generalScore"),(0,t.Uk)(" 和 "),(0,t._)("code",null,"healthScore"),(0,t.Uk)(" 同时作为数据源存在，都是 "),(0,t._)("code",null,"computeFinalScore"),(0,t.Uk)(" 函数的入参。从逻辑上来说，它们应该是"),(0,t._)("strong",null,"平行"),(0,t.Uk)("的关系。")]),(0,t._)("li",null,[(0,t.Uk)("当我们用盒子模式去实现非线性的计算过程的时候，就不得不像示例这样，把另一个数据源 "),(0,t._)("code",null,"healthScore"),(0,t.Uk)(" 也包装成一个盒子，放进 "),(0,t._)("code",null,"generalScore"),(0,t.Uk)(" 的 "),(0,t._)("code",null,"map"),(0,t.Uk)(" 里面去。导致嵌套 Functor 的产生")])],-1),$=(0,t._)("h3",{id:"flatmap",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#flatmap","aria-hidden":"true"},"#"),(0,t.Uk)(" flatMap")],-1),V=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t._)("span",{class:"token function-variable function"},"Monad"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token parameter"},"x"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token function-variable function"},"map"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token parameter"},"f"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"Monad"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token function"},"f"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("x"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"// flatMap 直接返回 f(x) 的执行结果"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token function-variable function"},"flatMap"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token parameter"},"f"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"f"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("x"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n\n    "),(0,t._)("span",{class:"token function-variable function"},"valueOf"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(" x"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token function-variable function"},"inspect"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t._)("span",{class:"token template-string"},[(0,t._)("span",{class:"token template-punctuation string"},"`"),(0,t._)("span",{class:"token string"},"Monad {"),(0,t._)("span",{class:"token interpolation"},[(0,t._)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,t.Uk)("x"),(0,t._)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,t._)("span",{class:"token string"},"}"),(0,t._)("span",{class:"token template-punctuation string"},"`")]),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br")])],-1),H=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"class"),(0,t.Uk)(),(0,t._)("span",{class:"token class-name"},"Monad"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" \n    "),(0,t._)("span",{class:"token function"},"constructor"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"x"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token keyword"},"this"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("val "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" x\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n\n    "),(0,t._)("span",{class:"token function"},"map"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"f"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" \n        "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(" Monad"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"of"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token function"},"f"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token keyword"},"this"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("val"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(" \n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(" \n\n    "),(0,t._)("span",{class:"token function"},"flatMap"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"f"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" \n        "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"this"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"map"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("f"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"valueOf"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n    "),(0,t._)("span",{class:"token function"},"valueOf"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"this"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("val\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\nMonad"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function-variable function"},"of"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"function"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"val"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t._)("span",{class:"token class-name"},"Monad"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("val"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("  \n\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" monad "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" Monad"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"of"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("  \n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" nestedMonad "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" Monad"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"of"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("monad"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("  \n\n"),(0,t._)("span",{class:"token comment"},"// 输出 Monad {val: 1}，符合“不嵌套”的预期"),(0,t.Uk)("\nconsole"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"log"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("nestedMonad"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"flatMap"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"x"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(" x"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"19"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"20"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"21"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"22"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"23"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"24"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"25"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"26"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"27"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"28"),(0,t._)("br")])],-1),R=(0,t.uE)('<p><code>flatMap</code> 就是一个打开盒子的过程，直接调用其参数函数 <code>x =&gt; f(x)</code>，返回值就是函数的计算结果。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">highWeights</span> <span class="token operator">=</span> <span class="token parameter">score</span> <span class="token operator">=&gt;</span> score<span class="token operator">*</span><span class="token number">0.8</span>\n<span class="token keyword">const</span> <span class="token function-variable function">lowWeights</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">score</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> score<span class="token operator">*</span><span class="token number">0.5</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">computeFinalScore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">generalScore<span class="token punctuation">,</span> healthScore</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> \n<span class="token function">Monad</span><span class="token punctuation">(</span><span class="token function">highWeights</span><span class="token punctuation">(</span>generalScore<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>\n    <span class="token parameter">finalGeneralScore</span> <span class="token operator">=&gt;</span> \n    <span class="token function">Monad</span><span class="token punctuation">(</span><span class="token function">lowWeights</span><span class="token punctuation">(</span>healthScore<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>\n        <span class="token parameter">finalhealthScore</span> <span class="token operator">=&gt;</span> \n        finalGeneralScore <span class="token operator">+</span> finalhealthScore\n    <span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n\n<span class="token comment">// Monad(highWeights(200)).flatMap(x=&gt;x) 160</span>\n<span class="token comment">// Monad(lowWeights(100)).flatMap(x=&gt;x) 50</span>\n\n<span class="token keyword">const</span> finalScore <span class="token operator">=</span> <span class="token function">computeFinalScore</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>  <span class="token comment">// 210</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">flatMap 和 map 其实很像，区别在于它们对回调函数 f(x) 的预期：</p><ul><li><code>map</code> 预期 <code>f(x)</code> 会输出一个具体的值。这个值会作为下一个“基础行为”的回调入参传递下去。</li><li>而 <code>flatMap</code> 预期 <code>f(x)</code> 会输出一个 Functor，它会像剥洋葱一样，把 Functor 里包裹的值给“剥”出来。确保最终传递给下一个“基础行为”的回调入参，仍然是一个具体的值。</li></ul></div><p>✅ 不管这个方法叫啥，只要它在 Functor 的基础上，实现了楼上描述的这个“剥洋葱”般的逻辑，它都足以将一个 Functor 拓展为 Monad。（行为决定性质）</p><h2 id="semigroup-与-monoid" tabindex="-1"><a class="header-anchor" href="#semigroup-与-monoid" aria-hidden="true">#</a> Semigroup 与 Monoid</h2><div class="custom-container tip"><p class="custom-container-title">加法和乘法有两个关键的共性：</p><ul><li><p>它们都满足结合律。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>(1 + 2) + 3 = 1 + (2 + 3)\n(1 * 2) * 3 = 1 * (2 * 3)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>它们都是闭合的。（在数学中，闭合意味着我们对某个集合的成员进行运算后，生成的仍然是这个集合的成员）</p><blockquote><p><code>1、2、3</code> 三个整数做完加法后，得到的计算结果 6 也是一个整数。<code>1 * 2 * 3</code> 三个整数做完乘法后，得到的计算结果 6 也是一个整数。这就是所谓的“闭合”。</p></blockquote></li></ul></div><h3 id="semigroup" tabindex="-1"><a class="header-anchor" href="#semigroup" aria-hidden="true">#</a> Semigroup</h3><p>在整数运算的加法/乘法中，<code>+ / *</code> 是一个运算符，可以用来计算两个任意的整数以获得另一个整数。因此，加法运算/乘法运算在所有可能的整数集合上形成一个 Semigroup。</p><div class="custom-container tip"><p class="custom-container-title">JavaScript 中的 SemiGroup:</p><ul><li>整数的加法和乘法</li><li>(boolean, &amp;&amp;)，布尔值的“与”运算</li><li>(boolean, ||)，布尔值的“或”运算</li><li>(string, +/concat) ，字符串的拼接（并集）运算。</li><li>(Array, concat)，数组的拼接（并集）运算</li></ul></div>',9),D=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token comment"},"// 定义一个类型为 Add 的 Semigroup 盒子"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t._)("span",{class:"token function-variable function"},"Add"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"value"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    value"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("  \n    "),(0,t._)("span",{class:"token comment"},"// concat 接收一个类型为 Add 的 Semigroup 盒子作为入参"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token function-variable function"},"concat"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"box"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"Add"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("value "),(0,t._)("span",{class:"token operator"},"+"),(0,t.Uk)(" box"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("value"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("   \n\n"),(0,t._)("span",{class:"token comment"},"// 输出一个 value=6 的 Add 盒子"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token function"},"Add"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"concat"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token function"},"Add"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"2"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"concat"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token function"},"Add"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"3"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br")])],-1),z=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token comment"},"// 定义一个类型为 Multi 的 Semigroup 盒子"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t._)("span",{class:"token function-variable function"},"Multi"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"value"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    value"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("  \n    "),(0,t._)("span",{class:"token comment"},"// concat 接收一个类型为 Multi 的Semigroup 盒子作为入参"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token function-variable function"},"concat"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"box"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"Multi"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("value "),(0,t._)("span",{class:"token operator"},"*"),(0,t.Uk)(" box"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("value"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("   \n\n"),(0,t._)("span",{class:"token comment"},"// 输出一个 value=60 的 Multi 盒子"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token function"},"Multi"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"3"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"concat"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token function"},"Multi"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"4"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"concat"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token function"},"Multi"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token number"},"5"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br")])],-1),Y=(0,t.uE)('<h3 id="monoid" tabindex="-1"><a class="header-anchor" href="#monoid" aria-hidden="true">#</a> Monoid</h3><ul><li>Monoid 是一个拥有了 <code>identity element</code> 的半群：<code>Monoid = Semigroup + identity element</code></li><li><code>identity element</code> “单位元”。它和任何运算数相结合时，都不会改变那个运算数。</li><li>在函数式编程中，单位元也是一个函数，我们一般把它记为 <code>empty()</code> 函数。也就是说，Monoid = Semigroup + <code>empty()</code> 函数。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 定义一个类型为 Add 的 Semigroup 盒子</span>\n<span class="token keyword">const</span> <span class="token function-variable function">Add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    value<span class="token punctuation">,</span>  \n    <span class="token comment">// concat 接收一个类型为 Add 的 Semigroup 盒子作为入参</span>\n    <span class="token function-variable function">concat</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">box</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">Add</span><span class="token punctuation">(</span>value <span class="token operator">+</span> box<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>   \n\n\n<span class="token comment">// 这个 empty() 函数就是加法运算的单位元</span>\nAdd<span class="token punctuation">.</span><span class="token function-variable function">empty</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 输出一个 value=3 的 Add 盒子</span>\nAdd<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',3),X={render:function(n,s){const a=(0,t.up)("CodeGroupItem"),X=(0,t.up)("CodeGroup"),Z=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[e,p,(0,t.Wm)(X,null,{default:(0,t.w5)((()=>[(0,t.Wm)(a,{title:"函数式编程"},{default:(0,t.w5)((()=>[o])),_:1}),(0,t.Wm)(a,{title:"命令式编程"},{default:(0,t.w5)((()=>[c])),_:1}),(0,t.Wm)(a,{title:"mockData"},{default:(0,t.w5)((()=>[l])),_:1})])),_:1}),u,(0,t.Wm)(X,null,{default:(0,t.w5)((()=>[(0,t.Wm)(a,{title:"Immer.js"},{default:(0,t.w5)((()=>[r])),_:1}),(0,t.Wm)(a,{title:"Proxy"},{default:(0,t.w5)((()=>[k])),_:1}),(0,t.Wm)(a,{title:"核心实现"},{default:(0,t.w5)((()=>[i])),_:1}),(0,t.Wm)(a,{title:"Useage"},{default:(0,t.w5)((()=>[_])),_:1})])),_:1}),b,(0,t.Wm)(X,null,{default:(0,t.w5)((()=>[(0,t.Wm)(a,{title:"命令式"},{default:(0,t.w5)((()=>[m,d])),_:1}),(0,t.Wm)(a,{title:"链式调用"},{default:(0,t.w5)((()=>[U])),_:1}),(0,t.Wm)(a,{title:"utils"},{default:(0,t.w5)((()=>[f])),_:1})])),_:1}),g,(0,t.Wm)(X,null,{default:(0,t.w5)((()=>[(0,t.Wm)(a,{title:"pipe"},{default:(0,t.w5)((()=>[h])),_:1}),(0,t.Wm)(a,{title:"utils"},{default:(0,t.w5)((()=>[v])),_:1})])),_:1}),y,(0,t._)("p",null,[(0,t._)("a",w,[x,(0,t.Wm)(Z)])]),(0,t.Wm)(X,null,{default:(0,t.w5)((()=>[(0,t.Wm)(a,{title:"表现"},{default:(0,t.w5)((()=>[j])),_:1}),(0,t.Wm)(a,{title:"useage"},{default:(0,t.w5)((()=>[M])),_:1}),(0,t.Wm)(a,{title:"utils"},{default:(0,t.w5)((()=>[S])),_:1})])),_:1}),A,(0,t.Wm)(X,null,{default:(0,t.w5)((()=>[(0,t.Wm)(a,{title:"Box"},{default:(0,t.w5)((()=>[F])),_:1}),(0,t.Wm)(a,{title:"utils"},{default:(0,t.w5)((()=>[W])),_:1})])),_:1}),O,(0,t.Wm)(X,null,{default:(0,t.w5)((()=>[(0,t.Wm)(a,{title:"Identity"},{default:(0,t.w5)((()=>[T,E,I])),_:1}),(0,t.Wm)(a,{title:"Composition"},{default:(0,t.w5)((()=>[L,q])),_:1})])),_:1}),C,(0,t.Wm)(X,null,{default:(0,t.w5)((()=>[(0,t.Wm)(a,{title:"线性计算场景下的嵌套"},{default:(0,t.w5)((()=>[B,N])),_:1}),(0,t.Wm)(a,{title:"+ utils"},{default:(0,t.w5)((()=>[P])),_:1}),(0,t.Wm)(a,{title:"非线性计算场景下的嵌套"},{default:(0,t.w5)((()=>[G,J])),_:1})])),_:1}),$,(0,t.Wm)(X,null,{default:(0,t.w5)((()=>[(0,t.Wm)(a,{title:"Monad"},{default:(0,t.w5)((()=>[V])),_:1}),(0,t.Wm)(a,{title:"Monad Class"},{default:(0,t.w5)((()=>[H])),_:1})])),_:1}),R,(0,t.Wm)(X,null,{default:(0,t.w5)((()=>[(0,t.Wm)(a,{title:"Add"},{default:(0,t.w5)((()=>[D])),_:1}),(0,t.Wm)(a,{title:"Multi"},{default:(0,t.w5)((()=>[z])),_:1})])),_:1}),Y],64)}}}}]);