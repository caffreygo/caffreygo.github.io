"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7699],{3327:(s,n,a)=>{a.r(n),a.d(n,{data:()=>p});const p={key:"v-72583ea4",path:"/typescript/grammar/typeTool.html",title:"类型工具",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"is",slug:"is",children:[]},{level:2,title:"keyof",slug:"keyof",children:[]},{level:2,title:"typeof",slug:"typeof",children:[]},{level:2,title:"in",slug:"in",children:[]},{level:2,title:"extends",slug:"extends",children:[{level:3,title:"类型继承",slug:"类型继承",children:[]},{level:3,title:"类型条件判断",slug:"类型条件判断",children:[]},{level:3,title:"✅ 根据索引名称过滤",slug:"✅-根据索引名称过滤",children:[]},{level:3,title:"✅ 根据值类型过滤",slug:"✅-根据值类型过滤",children:[]},{level:3,title:"泛型条件分配",slug:"泛型条件分配",children:[]}]},{level:2,title:"Exclude",slug:"exclude",children:[]},{level:2,title:"Extract",slug:"extract",children:[]},{level:2,title:"Pick",slug:"pick",children:[]},{level:2,title:"Omit",slug:"omit",children:[]},{level:2,title:"Partial",slug:"partial",children:[]},{level:2,title:"Record",slug:"record",children:[{level:3,title:"索引签名",slug:"索引签名",children:[]}]},{level:2,title:"交叉类型",slug:"交叉类型",children:[{level:3,title:"merge 方法",slug:"merge-方法",children:[]},{level:3,title:"联合类型",slug:"联合类型",children:[]}]},{level:2,title:"infer",slug:"infer",children:[]}],filePathRelative:"typescript/grammar/typeTool.md",git:{updatedTime:1660987752e3,contributors:[{name:"Jerry Chen",email:"caffreygo@163.com",commits:4},{name:"Jinrui Chen",email:"jinrui@kooboo.cn",commits:1}]}}},4248:(s,n,a)=>{a.r(n),a.d(n,{default:()=>e});const p=(0,a(6252).uE)('<h1 id="类型工具" tabindex="-1"><a class="header-anchor" href="#类型工具" aria-hidden="true">#</a> 类型工具</h1><div class="custom-container tip"><p class="custom-container-title">TypeScript</p><ul><li>JS 也有类型，但是类型数量比较少（number、string...）</li><li>TS 可以随意自定义类型，比如联合类型。TS 的类型是严格类型，可以对类型进行校验</li><li>TS 无限集合类型 <code>type JC = string | number</code></li><li>TS 有限集合类型 <code>type JC = &#39;hello&#39; | &#39;world&#39;</code></li></ul></div><h2 id="is" tabindex="-1"><a class="header-anchor" href="#is" aria-hidden="true">#</a> is</h2><p><code>is</code> 用于定义变量属于某个类型，下面判断时将出现类型错误提示：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> isString <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=&gt;</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span>\n\n<span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//error: 对象的类型为 &quot;unknown&quot;。</span>\n        a<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&#39;ab&#39;</span>\n\n<span class="token function">hello</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>现在重新定义 isString 函数，使用 is 来定义变量为某个类型。</p><p><code>x is string</code> 表示如果函数返回值为 true，则 x 为 string 类型</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> isString <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> x <span class="token keyword">is</span> <span class="token builtin">string</span> <span class="token operator">=&gt;</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span>\n\n<span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        a<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&#39;ab&#39;</span>\n\n<span class="token function">hello</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="keyof" tabindex="-1"><a class="header-anchor" href="#keyof" aria-hidden="true">#</a> keyof</h2><p>获取类、接口索引组成的<strong>联合类型</strong></p><blockquote><p><code>keyof</code> 可用于基本数据类型、any、class、interface、enum 等</p></blockquote><p>任何类型都可以使用 <code>keyof</code></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// keyof 基本数据类型 =&gt; 类型的属性方法</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">AMADA</span></span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token builtin">string</span>\n\n<span class="token keyword">let</span> jc<span class="token operator">:</span> <span class="token constant">AMADA</span> <span class="token operator">=</span> <span class="token string">&#39;match&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>索引类型使用 <code>keyof</code> 时，获取索引名</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// type AMADA = &#39;name&#39; | &#39;age&#39;</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">AMADA</span></span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> jc<span class="token operator">:</span> <span class="token constant">AMADA</span> <span class="token operator">=</span> <span class="token string">&#39;name&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>下面是获取<strong>对象的属性</strong>的函数类型定义</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">getAttribute</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;jerry&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span>\n<span class="token function">getAttribute</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// getAttribute(&#39;abc&#39;, &#39;includes&#39;)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>我们也可以用<strong>泛型</strong>定义索引类型</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">getAttribute</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">D</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token constant">D</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">D</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;jerry&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span>\n<span class="token function">getAttribute</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof" aria-hidden="true">#</a> typeof</h2><p>使用 typeof 可<strong>获取变量的类型</strong>，下面是获取字符串变量的类型</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> hello <span class="token operator">=</span> <span class="token string">&#39;jerry&#39;</span>\n\n<span class="token comment">// type AMADA = string</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">AMADA</span></span> <span class="token operator">=</span> <span class="token keyword">typeof</span> hello\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>下面使用 typeof 获取对象的 （在 JS 当中 <code>typeof {} === &#39;object&#39;</code>）</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> hello <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;jerry&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**\n type AMADA = <span class="token punctuation">{</span>\n  name: string;\n  age: number;\n */</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">AMADA</span></span> <span class="token operator">=</span> <span class="token keyword">typeof</span> hello\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>keyof 与 typeof 结合定义获取对象属性的函数</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// typeof obj =&gt; { name: string; age: number }</span>\n<span class="token comment">// keyof =&gt; &#39;name&#39; | &#39;age&#39;</span>\n<span class="token keyword">function</span> <span class="token function">getAttribute</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> object<span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key <span class="token keyword">as</span> <span class="token keyword">keyof</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> hello <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;helloworld&#39;</span> <span class="token punctuation">}</span>\n<span class="token function">getAttribute</span><span class="token punctuation">(</span>hello<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="in" tabindex="-1"><a class="header-anchor" href="#in" aria-hidden="true">#</a> in</h2><p>in 用于遍历接口或联合类型的属性</p><p><code>K in keyof T</code> 指 K 类型为 keyof T 获取的 T 类型索引组成的联合类型</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">USER</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">MEMBER</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> hello<span class="token operator">:</span> <span class="token constant">MEMBER</span><span class="token operator">&lt;</span><span class="token constant">USER</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> address<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    age<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;jerry&#39;</span><span class="token punctuation">,</span> address<span class="token operator">:</span> <span class="token string">&#39;上海&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="extends" tabindex="-1"><a class="header-anchor" href="#extends" aria-hidden="true">#</a> extends</h2><p>extends 在 TS 中拥有多个特性，下面我们来分别了解。</p><h3 id="类型继承" tabindex="-1"><a class="header-anchor" href="#类型继承" aria-hidden="true">#</a> 类型继承</h3><p>extends 实现类型的继承</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">GOLDENJADE</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">helloworld</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">GOLDENJADE</span></span> <span class="token punctuation">{</span>\n    age<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> hello<span class="token operator">:</span> helloworld <span class="token operator">=</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token number">33</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;jerry&#39;</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>extends 可用于泛型的类型限定，下例中 T 必须包含 id、render 属性，即 T 类型可赋予 extends 右侧类型</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">helloworld</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token function">render</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arr<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">helloworld</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">render</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> n <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="类型条件判断" tabindex="-1"><a class="header-anchor" href="#类型条件判断" aria-hidden="true">#</a> 类型条件判断</h3><p>extends 用于条件判断来决定返回什么类型，<code>A extends B ? true:false</code>。如果 A（狭窄类型） 可以赋予 B（宽泛类型） 类型则为 true。</p><p>下例的 hello 变量值必须为 false，因为 AMADA 不包含 GOLDENJADE 类型</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">GOLDENJADE</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">AMADA</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>\n<span class="token comment">// 窄类型的限制更多，更细。false</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">HEYTEA</span></span> <span class="token operator">=</span> <span class="token constant">AMADA</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">GOLDENJADE</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span>\n\n<span class="token keyword">const</span> hello<span class="token operator">:</span> <span class="token constant">HEYTEA</span> <span class="token operator">=</span> <span class="token boolean">false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>下面是联合类型的条件判断</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">GOLDENJADE</span></span> <span class="token operator">=</span> <span class="token builtin">string</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">AMADA</span></span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span>\n\n<span class="token keyword">const</span> hello<span class="token operator">:</span> <span class="token constant">AMADA</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">GOLDENJADE</span></span> <span class="token operator">?</span> <span class="token builtin">string</span> <span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token comment">// boolean</span>\n<span class="token comment">// 联合类型比单一类型更宽泛，可以被 extendss</span>\n<span class="token keyword">const</span> jc<span class="token operator">:</span> <span class="token constant">GOLDENJADE</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">AMADA</span></span> <span class="token operator">?</span> <span class="token builtin">string</span> <span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token string">&#39;jerry&#39;</span>  <span class="token comment">// string</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="✅-根据索引名称过滤" tabindex="-1"><a class="header-anchor" href="#✅-根据索引名称过滤" aria-hidden="true">#</a> ✅ 根据索引名称过滤</h3><p>根据联合类型过滤掉指定索引</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">User</span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// type K = &#39;name&#39; | &#39;age&#39; |  &#39;get&#39;</span>\n<span class="token comment">// Exclude&lt;K, &#39;name&#39;&gt; =&gt; never | &#39;age&#39; | &#39;get&#39; =&gt; &#39;age&#39; | &#39;get&#39;</span>\n<span class="token comment">// as never =&gt; neve, never 作为 key 会被过滤掉</span>\n<span class="token keyword">type</span> <span class="token class-name">FilterObjectProperty<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> Exclude<span class="token operator">&lt;</span><span class="token constant">K</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">HK</span></span> <span class="token operator">=</span> FilterObjectProperty<span class="token operator">&lt;</span>User<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;age&#39;</span><span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="✅-根据值类型过滤" tabindex="-1"><a class="header-anchor" href="#✅-根据值类型过滤" aria-hidden="true">#</a> ✅ 根据值类型过滤</h3><p>过滤掉指定的类型，以下代码含有下面几个含义</p><ul><li>根据类型获取索引组合成的联合类型</li><li>根据新的联合类型提取出指定的索引，组合成新的类型</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">USER</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">FilterProperty<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">K</span>\n<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span>\n\n<span class="token comment">// [keyof T] 获取到 key 的联合类型</span>\n<span class="token comment">// type ABC = FilterProperty&lt;USER, number&gt;;  &#39;name&#39; | &#39;get&#39;</span>\n<span class="token comment">// type UserType = { name: string }</span>\n<span class="token keyword">type</span> <span class="token class-name">UserType</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span><span class="token constant">USER</span><span class="token punctuation">,</span> FilterProperty<span class="token operator">&lt;</span><span class="token constant">USER</span><span class="token punctuation">,</span> <span class="token builtin">Function</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>💡 <code>[keyof T] </code>解析：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 在 JavaScript 当中，let a = { name: &#39;33&#39;}，a[&#39;name&#39;]可以取值</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">UU</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">;</span> age<span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span> get<span class="token operator">:</span> <span class="token string">&#39;get&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">AB</span></span> <span class="token operator">=</span> <span class="token constant">UU</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">UU</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// &#39;name&#39; | &#39;get&#39; | never =&gt; &#39;name&#39; | &#39;age&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="泛型条件分配" tabindex="-1"><a class="header-anchor" href="#泛型条件分配" aria-hidden="true">#</a> 泛型条件分配</h3><p>如果泛型是普通类型，则与上面一样也是判断左侧类型是否可赋予右侧类型</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">GOLDENJADE</span></span> <span class="token operator">=</span> <span class="token builtin">string</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">HEYTEA</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">GOLDENJADE</span></span> <span class="token operator">?</span> <span class="token builtin">string</span> <span class="token operator">:</span> <span class="token builtin">boolean</span>\n\n<span class="token keyword">const</span> hello<span class="token operator">:</span> <span class="token constant">HEYTEA</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token string">&#39;jerry&#39;</span> <span class="token comment">//string</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如果 extends 是泛型类型，并且传入的类型是联合类型。则<strong>分别进行判断</strong>，最后得到联合类型。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">GOLDENJADE</span></span> <span class="token operator">=</span> <span class="token builtin">string</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">HEYTEA</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">GOLDENJADE</span></span> <span class="token operator">?</span> <span class="token builtin">string</span> <span class="token operator">:</span> <span class="token builtin">boolean</span>\n\n<span class="token keyword">const</span> hello<span class="token operator">:</span> <span class="token constant">HEYTEA</span><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token comment">// string | boolean</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>条件判断也可以嵌套使用</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">GOLDENJADE</span></span> <span class="token operator">=</span> <span class="token builtin">string</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">AMADA</span></span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">HEYTEA</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span>\n\t<span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">GOLDENJADE</span></span> <span class="token operator">?</span> <span class="token builtin">string</span> <span class="token operator">:</span>\n\t<span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">AMADA</span></span> <span class="token operator">?</span> <span class="token builtin">symbol</span> <span class="token operator">:</span> <span class="token builtin">boolean</span>\n\n<span class="token keyword">const</span> hello<span class="token operator">:</span> <span class="token constant">HEYTEA</span><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token string">&#39;jerry&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>✅ 使用 <strong>[ ]</strong> 包裹类型，表示使用泛型的整体进行比较</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">GOLDENJADE</span></span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">AMADA</span></span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">HEYTEA</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token constant">GOLDENJADE</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token builtin">string</span> <span class="token operator">:</span> <span class="token builtin">boolean</span>\n\n<span class="token keyword">const</span> hello<span class="token operator">:</span> <span class="token constant">HEYTEA</span><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token string">&#39;jerry&#39;</span>  <span class="token comment">// string</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="exclude" tabindex="-1"><a class="header-anchor" href="#exclude" aria-hidden="true">#</a> Exclude</h2><p>我们利用上面的泛型类型的条件分配，可以创建一个类型用于进行类型的过滤。</p><ul><li>从 T 泛型类型 中过滤掉 U 的类型</li><li><strong>never 是任何类型的子类型</strong>，可以赋值给任何类型，没有类型是 never 的子类型或可以赋值给 never 类型(never 本身除外)</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">EXCLUDE</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">GOLDENJADE</span></span> <span class="token operator">=</span> <span class="token builtin">string</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">AMADA</span></span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span>\n\n<span class="token keyword">const</span> hello<span class="token operator">:</span> <span class="token constant">EXCLUDE</span><span class="token operator">&lt;</span><span class="token constant">AMADA</span><span class="token punctuation">,</span> <span class="token constant">GOLDENJADE</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>  <span class="token comment">// number</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>事实上 typescript 已经提供了 Exclude 关键字用于完成上面的工作，所以我们不需要单独定义 Exclude 类型了。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">GOLDENJADE</span></span> <span class="token operator">=</span> <span class="token builtin">string</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">AMADA</span></span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span>\n\n<span class="token keyword">const</span> hello<span class="token operator">:</span> Exclude<span class="token operator">&lt;</span><span class="token constant">AMADA</span><span class="token punctuation">,</span> <span class="token constant">GOLDENJADE</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="extract" tabindex="-1"><a class="header-anchor" href="#extract" aria-hidden="true">#</a> Extract</h2><p>Extract 与 Exclude 相反，用于获取相交的类型。(v. 提炼)</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">EXTRACT</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">AMADA</span></span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span>\n\n<span class="token keyword">const</span> hello<span class="token operator">:</span> <span class="token constant">EXTRACT</span><span class="token operator">&lt;</span><span class="token constant">AMADA</span><span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token string">&#39;jerry&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>下面是取两个类型相同的属性名</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">AMADA</span></span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span>\n\n<span class="token keyword">const</span> hello<span class="token operator">:</span> Extract<span class="token operator">&lt;</span><span class="token constant">AMADA</span><span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token string">&#39;jerry&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="pick" tabindex="-1"><a class="header-anchor" href="#pick" aria-hidden="true">#</a> Pick</h2><p>pick 可以用于从属性中挑选出一组属性，组成新的类型。</p><p>下面定义 pick 类型用于从 AMADA 类型中挑选出 name 与 age 类型。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">AMADA</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> skill<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>\n<span class="token comment">// keyof T: name | age | skill</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">PICK</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">U</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// type HK = { name: string; age: number; }</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">HK</span></span> <span class="token operator">=</span> <span class="token constant">PICK</span><span class="token operator">&lt;</span><span class="token constant">AMADA</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;age&#39;</span><span class="token operator">&gt;</span>\n<span class="token keyword">const</span> jc<span class="token operator">:</span> <span class="token constant">HK</span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;jerry&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">33</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>同样 typescript 已经原生提供了 Pick 类型，所以我们不用像上面那样自己定义了</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">AMADA</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> skill<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">HK</span></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span><span class="token constant">AMADA</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;age&#39;</span><span class="token operator">&gt;</span>\n<span class="token keyword">const</span> jc<span class="token operator">:</span> <span class="token constant">HK</span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;jerry&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">33</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="omit" tabindex="-1"><a class="header-anchor" href="#omit" aria-hidden="true">#</a> Omit</h2><p>从类型中<strong>过滤掉指定属性</strong>，这与 Pick 类型工具功能相反</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">HK</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> city<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">MyOmit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">K</span>\n<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>\n\n<span class="token comment">// { [K in keyof T]: K extends U ? never : K }</span>\n<span class="token comment">// { name: never ; age: never; city: &#39;city&#39; }</span>\n<span class="token comment">// 最后通过 [keyof T] 提取出值的联合类型：never | never | &#39;city&#39; =&gt; &#39;city&#39;</span>\n<span class="token comment">// 结果为：Pick&lt;HK, &#39;city&#39;&gt;</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">XJ</span></span> <span class="token operator">=</span> MyOmit<span class="token operator">&lt;</span><span class="token constant">HK</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;age&#39;</span><span class="token operator">&gt;</span>  <span class="token comment">// {city:string}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>可以将上面代码使用 Exclude 优化</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">HK</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> city<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">MyOmit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> Exclude<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;&gt;</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">XJ</span></span> <span class="token operator">=</span> MyOmit<span class="token operator">&lt;</span><span class="token constant">HK</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;age&#39;</span><span class="token operator">&gt;</span>  <span class="token comment">// {city:string}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>typescript 已经提供了类型工具 Omit</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">HK</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> city<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">XJ</span></span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span><span class="token constant">HK</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;age&#39;</span><span class="token operator">&gt;</span>  <span class="token comment">// {city:string}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="partial" tabindex="-1"><a class="header-anchor" href="#partial" aria-hidden="true">#</a> Partial</h2><p>下面定义 Partial 类型，用于将全部属性设置为可选</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">GOLDENJADE</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">PARTIAL</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> hello<span class="token operator">:</span> <span class="token constant">PARTIAL</span><span class="token operator">&lt;</span><span class="token constant">GOLDENJADE</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;小强&#39;</span> <span class="token punctuation">}</span> <span class="token comment">// {name?:string,age?:number}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Typescript 原生提供了 Partial 的支持，所以我们不用自己定义了</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">GOLDENJADE</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> hello<span class="token operator">:</span> Partial<span class="token operator">&lt;</span><span class="token constant">GOLDENJADE</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;小强&#39;</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="record" tabindex="-1"><a class="header-anchor" href="#record" aria-hidden="true">#</a> Record</h2><p>✅ Record 常用于<strong>快速定义对象类型</strong>使用</p><p>下面我们来手动实现一个 Record，RECORD 类型的第一个参数为索引，第二个为类型</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">RECORD</span><span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">,</span> <span class="token constant">V</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">V</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// type HK = { name: string | number; age: string | number }</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">HK</span></span> <span class="token operator">=</span> <span class="token constant">RECORD</span><span class="token operator">&lt;</span><span class="token string">&#39;name&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">MN</span></span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;</span>\n\n<span class="token keyword">const</span> jc<span class="token operator">:</span> <span class="token constant">HK</span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;jerry&quot;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>typescript 原生已经提供了 Record 类型，下面定义 MEMBER 类型，索引为字符串，值为任何类型</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">HK</span></span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span><span class="token string">&#39;name&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span>\n\n<span class="token keyword">const</span> jc<span class="token operator">:</span> <span class="token constant">HK</span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;jerry&quot;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="索引签名" tabindex="-1"><a class="header-anchor" href="#索引签名" aria-hidden="true">#</a> 索引签名</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">HELLO</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>x<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">Jc</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  city<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> jc <span class="token operator">=</span> <span class="token constant">HELLO</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  nameJc<span class="token operator">:</span> <span class="token string">&#39;Jerry&#39;</span><span class="token punctuation">,</span>\n  city<span class="token operator">:</span> <span class="token string">&#39;XIAMEN&#39;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">25</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// type ABC = string | number | symbol</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">ABC</span></span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token builtin">any</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="交叉类型" tabindex="-1"><a class="header-anchor" href="#交叉类型" aria-hidden="true">#</a> 交叉类型</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span>\n<span class="token keyword">let</span> c<span class="token operator">:</span> <span class="token constant">A</span> <span class="token operator">&amp;</span> <span class="token constant">B</span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Jerry&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// 类型不一致无法交叉，结果就是没有类型：never</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">JC</span></span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">&amp;</span> <span class="token builtin">number</span>  <span class="token comment">// never</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">JC</span></span> <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">&amp;</span> <span class="token string">&#39;b&#39;</span>  <span class="token comment">// never</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>类型不一致报错：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// type AB = A &amp; B</span>\n<span class="token comment">// name 报错，不能将类型“string”分配给类型“never”</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">AB</span></span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token operator">&amp;</span> Pick<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token operator">&gt;</span>\n<span class="token keyword">let</span> hi<span class="token operator">:</span> <span class="token constant">AB</span> <span class="token operator">=</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;Jerry&#39;</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>交叉类型的实际应用：（类型拓展）</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">User</span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">Member</span> <span class="token operator">=</span> <span class="token punctuation">{</span> avatar<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">}</span> <span class="token operator">&amp;</span> User\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="merge-方法" tabindex="-1"><a class="header-anchor" href="#merge-方法" aria-hidden="true">#</a> merge 方法</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">merge</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token constant">U</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token constant">U</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// a[key as Extract&lt;keyof U, &#39;string&#39;&gt;] = b[key] as any</span>\n    a<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token builtin">any</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> a\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="联合类型" tabindex="-1"><a class="header-anchor" href="#联合类型" aria-hidden="true">#</a> 联合类型</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>tyoe <span class="token constant">HK</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token comment">// a | never =&gt; a</span>\n\n<span class="token comment">// &#39;b&#39;是单个字符串类型，是字符串的子类， &#39;b&#39; &amp; string =&gt; &#39;b&#39;</span>\ntyoe <span class="token constant">HK</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token comment">// a | b</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="infer" tabindex="-1"><a class="header-anchor" href="#infer" aria-hidden="true">#</a> infer</h2><div class="custom-container tip"><p class="custom-container-title">infer</p><ul><li>infer 只能在 extends 中使用</li><li>infer 的类型变量，<strong>只能在 extends 条件的 true 中使用</strong> 🚨</li></ul></div><p>下面使用 infer <strong>推断</strong>属性值类型</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">HK</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// type AttrType&lt;T&gt; = T extends { name: infer M, age: infer N } ? [M, N] : T</span>\n<span class="token keyword">type</span> <span class="token class-name">AttrType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">M</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">M</span> <span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token constant">M</span> <span class="token operator">:</span> <span class="token constant">T</span>\n\n<span class="token keyword">type</span> <span class="token class-name">valueType</span> <span class="token operator">=</span> AttrType<span class="token operator">&lt;</span><span class="token constant">HK</span><span class="token operator">&gt;</span>  <span class="token comment">// string | number</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>下面使用 infer 获取值类型</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">USER</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">GetType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  \t<span class="token comment">// infer 会动态改变：string -&gt; number -&gt; ((a: string) =&gt; void)</span>\n    <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token keyword">infer</span> <span class="token constant">U</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> <span class="token constant">K</span>\n<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span>\n\n<span class="token comment">// 最后通过 [keyof T] 获取到值联合类型：string | number | ((a: string) =&gt; void)</span>\n<span class="token keyword">type</span> <span class="token class-name">valueType</span> <span class="token operator">=</span> GetType<span class="token operator">&lt;</span><span class="token constant">USER</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>下面是获取<strong>函数返回值</strong>类型</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">HK</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n<span class="token keyword">type</span> <span class="token class-name">GetFunctionReturnValue<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token keyword">infer</span> <span class="token constant">U</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> <span class="token constant">T</span>\n\n<span class="token comment">// number</span>\n<span class="token keyword">type</span> <span class="token class-name">valueType</span> <span class="token operator">=</span> GetFunctionReturnValue<span class="token operator">&lt;</span><span class="token constant">HK</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// number[]</span>\n<span class="token comment">// type GetFunctionReturnValue&lt;T&gt; = T extends ((...args: any) =&gt; (infer U)) ? U : T</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',116),e={render:function(s,n){return p}}}}]);