"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9352],{9698:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-72f37c5c",path:"/VueJs3/section3/chapter10.html",title:"双端 Diff 算法",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"双端比较原理",slug:"双端比较原理",children:[{level:3,title:"简单 Diff",slug:"简单-diff",children:[]},{level:3,title:"双端 Diff",slug:"双端-diff",children:[]}]},{level:2,title:"双端比较的优势",slug:"双端比较的优势",children:[]},{level:2,title:"非理性状况的处理方式",slug:"非理性状况的处理方式",children:[]},{level:2,title:"添加新元素",slug:"添加新元素",children:[{level:3,title:"一轮未匹配",slug:"一轮未匹配",children:[]},{level:3,title:"遍历被遗漏",slug:"遍历被遗漏",children:[]}]},{level:2,title:"移除不存在的元素",slug:"移除不存在的元素",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"VueJs3/section3/chapter10.md",git:{updatedTime:1653556071e3,contributors:[{name:"Jinrui Chen",email:"jinrui@kooboo.cn",commits:7}]}}},479:(n,s,a)=>{a.r(s),a.d(s,{default:()=>u});var t=a(6252);const p=(0,t.uE)('<h1 id="双端-diff-算法" tabindex="-1"><a class="header-anchor" href="#双端-diff-算法" aria-hidden="true">#</a> 双端 Diff 算法</h1><h2 id="双端比较原理" tabindex="-1"><a class="header-anchor" href="#双端比较原理" aria-hidden="true">#</a> 双端比较原理</h2><h3 id="简单-diff" tabindex="-1"><a class="header-anchor" href="#简单-diff" aria-hidden="true">#</a> 简单 Diff</h3><p>简单 Diff 算法的问题在于，它对 DOM 的移动操作并不是最优的。以下面这个子节点列表更新为例： <img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/Vuejs3/simpleDiff.png" alt=""></p><p>如图可见，使用简单 diff 算法在本次比较过程中需要两次 DOM 移动操作，分别是将 p-1 和 p-2 移动到 p-3 之后。</p><p><img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/Vuejs3/10.1.1.png" alt=""></p><p>然而，上述更新过程并非<strong>最优解</strong>。实际上，我们只要一次 DOM 移动操作即可完成更新，即将真实 DOM 节点 p-3 移动到真实 DOM 节点 p-1 前面。</p><h3 id="双端-diff" tabindex="-1"><a class="header-anchor" href="#双端-diff" aria-hidden="true">#</a> 双端 Diff</h3><div class="custom-container tip"><p class="custom-container-title">双端 Diff 算法，顾名思义就是使用四个指针，分别指向新旧子节点数组的头尾，然后按照一定的顺序从头尾向中间进行遍历处理：</p><ul><li>路线 1 匹配，自增 newStartIdx 和 oldStartIdx</li><li>路线 2 匹配，自减 newEndIdx 和 oldEndIdx</li><li>路线 3 匹配，表示原本在头部的节点现在要移动到尾部，那么移动真实 DOM 的 oldStartIdx 对应节点到 oldEndIdx 节点之后</li><li>路线 4 匹配，表示原本在尾部的节点现在要移动到头部，那么移动真实 DOM 的 oldEndIdx 对应节点到 oldStartIdx 节点之前</li></ul></div><p><img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/Vuejs3/10.1.2.png" alt=""></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">patchKeyedChildren</span><span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> oldChildren <span class="token operator">=</span> n1<span class="token punctuation">.</span>children\n    <span class="token keyword">const</span> newChildren <span class="token operator">=</span> n2<span class="token punctuation">.</span>children\n\n    <span class="token keyword">let</span> oldStartIdx <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">let</span> oldEndIdx <span class="token operator">=</span> oldChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>\n    <span class="token keyword">let</span> newStartIdx <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">let</span> newEndIdx <span class="token operator">=</span> newChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>\n\n    <span class="token keyword">let</span> oldStartVNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>oldStartIdx<span class="token punctuation">]</span>\n    <span class="token keyword">let</span> oldEndVNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>oldEndIdx<span class="token punctuation">]</span>\n    <span class="token keyword">let</span> newStartVNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>newStartIdx<span class="token punctuation">]</span>\n    <span class="token keyword">let</span> newEndVNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>newEndIdx<span class="token punctuation">]</span>\n\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIdx <span class="token operator">&lt;=</span> oldEndIdx <span class="token operator">&amp;&amp;</span> newStartIdx <span class="token operator">&lt;=</span> newEndIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartVNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartVNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">patch</span><span class="token punctuation">(</span>oldStartVNode<span class="token punctuation">,</span> newStartVNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>\n            oldStartVNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIdx<span class="token punctuation">]</span>\n            newStartVNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">++</span>newStartIdx<span class="token punctuation">]</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndVNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndVNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">patch</span><span class="token punctuation">(</span>oldEndVNode<span class="token punctuation">,</span> newEndVNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>\n            oldEndVNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIdx<span class="token punctuation">]</span>\n            newEndVNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">--</span>newEndIdx<span class="token punctuation">]</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartVNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndVNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">patch</span><span class="token punctuation">(</span>oldStartVNode<span class="token punctuation">,</span> newEndVNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>\n            <span class="token function">insert</span><span class="token punctuation">(</span>oldStartVNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> container<span class="token punctuation">,</span> newEndVNode<span class="token punctuation">.</span>el<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span>\n            oldStartVNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIdx<span class="token punctuation">]</span>\n            newEndVNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">--</span>newEndIdx<span class="token punctuation">]</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndVNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartVNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">patch</span><span class="token punctuation">(</span>oldEndVNode<span class="token punctuation">,</span> newStartVNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>\n            <span class="token function">insert</span><span class="token punctuation">(</span>oldEndVNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> container<span class="token punctuation">,</span> oldStartVNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span>\n            oldEndVNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIdx<span class="token punctuation">]</span>\n            newStartVNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">++</span>newStartIdx<span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p><img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/Vuejs3/diff.png" alt=""></p><p>此时，真实 DOM 节点的顺序与新的一组子节点的顺序相同了：p-4、p-2、p-1、p-3。</p><p>另外，在这一轮更新完成之后，所有 newStartIdx 和所有 oldStartIdx 的值都小于 newEndIdx 和 oldEndIdx。循环终止，双端 Diff 执行完毕。</p><h2 id="双端比较的优势" tabindex="-1"><a class="header-anchor" href="#双端比较的优势" aria-hidden="true">#</a> 双端比较的优势</h2><p>经过分析双端 Diff 算法，现在我们只需要<strong>一次</strong> DOM 移动操作，而之前的简单 Diff 算法需要两次移动操作。</p><p><img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/Vuejs3/10.1.1.png" alt=""></p><h2 id="非理性状况的处理方式" tabindex="-1"><a class="header-anchor" href="#非理性状况的处理方式" aria-hidden="true">#</a> 非理性状况的处理方式</h2><p>在之前的例子当中，我们使用的是比较理性的例子。Diff 过程中总会命中四个步骤中的一个，这是非常理想的情况。但实际上，并非所有情况都这么理想：</p><p><img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/Vuejs3/10.3.1.png" alt=""></p><p>使用目前的双端 Diff 算法进行处理，会发现无法命中四个步骤的任何一步。针对这种情况，我们只能增加额外的步骤来处理这种情况</p><p>🚀 具体的做法是，拿新的一组子节点中的头部节点去旧的一组子节点中寻找。如果找到了可复用的旧节点，把这个节点移动到头部，并把这个旧节点标记为 undefined，后续执行如果遇到 undefined 旧节点直接跳过即可。</p><p><img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/Vuejs3/10.3.2.png" alt=""></p><p>代码需要新增一个分支来处理为命中的情况，另外需要跳过旧子节点为 undefined 的情况：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">patchKeyedChildren</span><span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIdx <span class="token operator">&lt;=</span> oldEndIdx <span class="token operator">&amp;&amp;</span> newStartIdx <span class="token operator">&lt;=</span> newEndIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 如果旧节点为 undefined，跳过</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldStartVNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            oldStartVNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIdx<span class="token punctuation">]</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldEndVNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            oldEndVNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIdx<span class="token punctuation">]</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartVNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartVNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">patch</span><span class="token punctuation">(</span>oldStartVNode<span class="token punctuation">,</span> newStartVNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>\n            oldStartVNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIdx<span class="token punctuation">]</span>\n            newStartVNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">++</span>newStartIdx<span class="token punctuation">]</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndVNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndVNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">patch</span><span class="token punctuation">(</span>oldEndVNode<span class="token punctuation">,</span> newEndVNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>\n            oldEndVNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIdx<span class="token punctuation">]</span>\n            newEndVNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">--</span>newEndIdx<span class="token punctuation">]</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartVNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndVNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">patch</span><span class="token punctuation">(</span>oldStartVNode<span class="token punctuation">,</span> newEndVNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>\n            <span class="token function">insert</span><span class="token punctuation">(</span>oldStartVNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> container<span class="token punctuation">,</span> newEndVNode<span class="token punctuation">.</span>el<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span>\n            oldStartVNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIdx<span class="token punctuation">]</span>\n            newEndVNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">--</span>newEndIdx<span class="token punctuation">]</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndVNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartVNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">patch</span><span class="token punctuation">(</span>oldEndVNode<span class="token punctuation">,</span> newStartVNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>\n            <span class="token function">insert</span><span class="token punctuation">(</span>oldEndVNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> container<span class="token punctuation">,</span> oldStartVNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span>\n            oldEndVNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIdx<span class="token punctuation">]</span>\n            newStartVNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">++</span>newStartIdx<span class="token punctuation">]</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 遍历旧 children，试图寻找与 newStartVNode 拥有相同 key 值的元素</span>\n            <span class="token keyword">const</span> idxInOld <span class="token operator">=</span> oldChildren<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>\n                <span class="token parameter">node</span> <span class="token operator">=&gt;</span> node<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartVNode<span class="token punctuation">.</span>key\n            <span class="token punctuation">)</span>\n            <span class="token comment">// 移动该节点到子节点头部，并标记为 undefined</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>idxInOld <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">const</span> vnodeToMove <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>idxInOld<span class="token punctuation">]</span>\n                <span class="token function">patch</span><span class="token punctuation">(</span>vnodeToMove<span class="token punctuation">,</span> newStartVNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>\n                <span class="token function">insert</span><span class="token punctuation">(</span>vnodeToMove<span class="token punctuation">.</span>el<span class="token punctuation">,</span> container<span class="token punctuation">,</span> oldStartVNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span>\n                oldChildren<span class="token punctuation">[</span>idxInOld<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>\n                newStartVNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">++</span>newStartIdx<span class="token punctuation">]</span>\n            <span class="token punctuation">}</span>\n\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><p>最后，对于目前的这个例子，后续的处理步骤如下：</p><p><img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/Vuejs3/10.3.3.png" alt=""></p><h2 id="添加新元素" tabindex="-1"><a class="header-anchor" href="#添加新元素" aria-hidden="true">#</a> 添加新元素</h2><h3 id="一轮未匹配" tabindex="-1"><a class="header-anchor" href="#一轮未匹配" aria-hidden="true">#</a> 一轮未匹配</h3><p>在之前的处理中，如果在<strong>一轮比较</strong>中，代码不会命中四个步骤的任何一步。这时，我们会拿新子节点的第一个节点去旧子节点列表中寻找可复用节点，然而并非总是能找到：p-4、p-1、p-3、p-2</p><p><img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/Vuejs3/10.4.1.png" alt=""></p><p>首先，我们尝试一轮比较，发现在四个步骤的比较中都找不打可复用的节点。于是我们尝试拿新的一组子节点的第一个节点 p-4 去旧的一组子节点当中寻找可复用节点，但是在旧的一组子节点当中并没有匹配到 key 相同的节点。</p><p>🚀 说明这个节点是新子节点，并且是新子节点的头部节点，我们只需要把这个节点<strong>挂载到当前的头部节点</strong>即可。</p><h3 id="遍历被遗漏" tabindex="-1"><a class="header-anchor" href="#遍历被遗漏" aria-hidden="true">#</a> 遍历被遗漏</h3><p>除了在一轮比较当中未匹配步骤的情况，我们更改之前的例子为：p-4、p-1、p-2、p-3</p><p><img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/Vuejs3/10.4.2.png" alt=""></p><p>当双端 Diff 多轮处理完毕之后，剩下了一个 p-4节点，这个节点在整个更新过程中被遗漏了，没有得到任何处理，说明目前的算法还有缺陷需要额外处理。</p><p>🚀 遗漏的新子节点都是要新增的新子节点，按序遍历挂载到头部即可。</p>',38),e=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" idxInOld "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" oldChildren"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"findIndex"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token parameter"},"node"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(" node"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("key "),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(" newStartVNode"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("key\n"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("idxInOld "),(0,t._)("span",{class:"token operator"},">"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" vnodeToMove "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" oldChildren"),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("idxInOld"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token function"},"patch"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("vnodeToMove"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" newStartVNode"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" container"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token function"},"insert"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("vnodeToMove"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("el"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" container"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" oldStartVNode"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("el"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    oldChildren"),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("idxInOld"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"undefined"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"// 如果未找到可复用节点，将当前节点挂载在头部即可"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token function"},"patch"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token keyword"},"null"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" newStartVNode"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" container"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" oldStartVNode"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("el"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\nnewStartVNode "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" newChildren"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token operator"},"++"),(0,t.Uk)("newStartIdx"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br")])],-1),o=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("oldEndIdx "),(0,t._)("span",{class:"token operator"},"<"),(0,t.Uk)(" oldStartIdx "),(0,t._)("span",{class:"token operator"},"&&"),(0,t.Uk)(" newStartIdx "),(0,t._)("span",{class:"token operator"},"<="),(0,t.Uk)(" newEndIdx"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"// 如果新子节点列表有处理遗漏的节点，则添加"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"for"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" i "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" newStartIdx"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i "),(0,t._)("span",{class:"token operator"},"<="),(0,t.Uk)(" newEndIdx"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i"),(0,t._)("span",{class:"token operator"},"++"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token function"},"patch"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token keyword"},"null"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" newChildren"),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("i"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" container"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" oldStartVNode"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("el"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br")])],-1),c=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"patchKeyedChildren"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},[(0,t.Uk)("n1"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" n2"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" container")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" oldChildren "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" n1"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("children\n    "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" newChildren "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" n2"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("children\n    "),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" oldStartIdx "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" oldEndIdx "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" oldChildren"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("length "),(0,t._)("span",{class:"token operator"},"-"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"1"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" newStartIdx "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" newEndIdx "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" newChildren"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("length "),(0,t._)("span",{class:"token operator"},"-"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"1"),(0,t.Uk)("\n\n    "),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" oldStartVNode "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" oldChildren"),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("oldStartIdx"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" oldEndVNode "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" oldChildren"),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("oldEndIdx"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" newStartVNode "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" newChildren"),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("newStartIdx"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" newEndVNode "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" newChildren"),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("newEndIdx"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n\n    "),(0,t._)("span",{class:"token keyword"},"while"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("oldStartIdx "),(0,t._)("span",{class:"token operator"},"<="),(0,t.Uk)(" oldEndIdx "),(0,t._)("span",{class:"token operator"},"&&"),(0,t.Uk)(" newStartIdx "),(0,t._)("span",{class:"token operator"},"<="),(0,t.Uk)(" newEndIdx"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token operator"},"!"),(0,t.Uk)("oldStartVNode"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n            oldStartVNode "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" oldChildren"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token operator"},"++"),(0,t.Uk)("oldStartIdx"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token operator"},"!"),(0,t.Uk)("oldEndVNode"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n            oldEndVNode "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" newChildren"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token operator"},"--"),(0,t.Uk)("oldEndIdx"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("oldStartVNode"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("key "),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(" newStartVNode"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("key"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token function"},"patch"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("oldStartVNode"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" newStartVNode"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" container"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n            oldStartVNode "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" oldChildren"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token operator"},"++"),(0,t.Uk)("oldStartIdx"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n            newStartVNode "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" newChildren"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token operator"},"++"),(0,t.Uk)("newStartIdx"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("oldEndVNode"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("key "),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(" newEndVNode"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("key"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token function"},"patch"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("oldEndVNode"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" newEndVNode"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" container"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n            oldEndVNode "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" oldChildren"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token operator"},"--"),(0,t.Uk)("oldEndIdx"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n            newEndVNode "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" newChildren"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token operator"},"--"),(0,t.Uk)("newEndIdx"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("oldStartVNode"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("key "),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(" newEndVNode"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("key"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token function"},"patch"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("oldStartVNode"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" newEndVNode"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" container"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token function"},"insert"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("oldStartVNode"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("el"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" container"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" oldEndVNode"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("el"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("nextSibling"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\n            oldStartVNode "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" oldChildren"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token operator"},"++"),(0,t.Uk)("oldStartIdx"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n            newEndVNode "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" newChildren"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token operator"},"--"),(0,t.Uk)("newEndIdx"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("oldEndVNode"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("key "),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(" newStartVNode"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("key"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token function"},"patch"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("oldEndVNode"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" newStartVNode"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" container"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token function"},"insert"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("oldEndVNode"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("el"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" container"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" oldStartVNode"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("el"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n            \n            oldEndVNode "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" oldChildren"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token operator"},"--"),(0,t.Uk)("oldEndIdx"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n            newStartVNode "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" newChildren"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token operator"},"++"),(0,t.Uk)("newStartIdx"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" idxInOld "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" oldChildren"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"findIndex"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("\n                "),(0,t._)("span",{class:"token parameter"},"node"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(" node"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("key "),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(" newStartVNode"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("key\n            "),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("idxInOld "),(0,t._)("span",{class:"token operator"},">"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n                "),(0,t._)("span",{class:"token comment"},"// 找到可复用的头部节点，patch & 移动到头部"),(0,t.Uk)("\n                "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" vnodeToMove "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" oldChildren"),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("idxInOld"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n                "),(0,t._)("span",{class:"token function"},"patch"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("vnodeToMove"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" newStartVNode"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" container"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n                "),(0,t._)("span",{class:"token function"},"insert"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("vnodeToMove"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("el"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" container"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" oldStartVNode"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("el"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n                oldChildren"),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("idxInOld"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"undefined"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n                "),(0,t._)("span",{class:"token comment"},"// 如果未找到可复用节点，将当前节点挂载在头部即可"),(0,t.Uk)("\n                "),(0,t._)("span",{class:"token function"},"patch"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token keyword"},"null"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" newStartVNode"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" container"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" oldStartVNode"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("el"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n            newStartVNode "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" newChildren"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token operator"},"++"),(0,t.Uk)("newStartIdx"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\t\n    "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("oldEndIdx "),(0,t._)("span",{class:"token operator"},"<"),(0,t.Uk)(" oldStartIdx "),(0,t._)("span",{class:"token operator"},"&&"),(0,t.Uk)(" newStartIdx "),(0,t._)("span",{class:"token operator"},"<="),(0,t.Uk)(" newEndIdx"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token comment"},"// 如果新子节点列表有处理遗漏的节点，则添加"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token keyword"},"for"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" i "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" newStartIdx"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i "),(0,t._)("span",{class:"token operator"},"<="),(0,t.Uk)(" newEndIdx"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i"),(0,t._)("span",{class:"token operator"},"++"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token function"},"patch"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token keyword"},"null"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" newChildren"),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("i"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" container"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" oldStartVNode"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("el"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("newEndIdx "),(0,t._)("span",{class:"token operator"},"<"),(0,t.Uk)(" newStartIdx "),(0,t._)("span",{class:"token operator"},"&&"),(0,t.Uk)(" oldStartIdx "),(0,t._)("span",{class:"token operator"},"<="),(0,t.Uk)(" oldEndIdx"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token comment"},"// 如果旧子节点列表有处理遗漏的节点，则卸载"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token keyword"},"for"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" i "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" oldStartIdx"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i "),(0,t._)("span",{class:"token operator"},"<="),(0,t.Uk)(" oldEndIdx"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i"),(0,t._)("span",{class:"token operator"},"++"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token function"},"unmount"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("oldChildren"),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("i"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"19"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"20"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"21"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"22"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"23"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"24"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"25"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"26"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"27"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"28"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"29"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"30"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"31"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"32"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"33"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"34"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"35"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"36"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"37"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"38"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"39"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"40"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"41"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"42"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"43"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"44"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"45"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"46"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"47"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"48"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"49"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"50"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"51"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"52"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"53"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"54"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"55"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"56"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"57"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"58"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"59"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"60"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"61"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"62"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"63"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"64"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"65"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"66"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"67"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"68"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"69"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"70"),(0,t._)("br")])],-1),l=(0,t.uE)('<h2 id="移除不存在的元素" tabindex="-1"><a class="header-anchor" href="#移除不存在的元素" aria-hidden="true">#</a> 移除不存在的元素</h2><p>在双端 Diff 处理过程中，未被复用的旧子节点就是需要卸载的节点。</p><p><img src="https://raw.githubusercontent.com/caffreygo/static/main/blog/Vuejs3/10.5.1.png" alt=""></p><p>🚀 如上图所示，当 diff 多轮处理完毕之后，p-2 这个节点处在 [oldStartIdx, oldEndIdx] 区间内，说明这个节点未被复用到，应该被卸载。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndIdx <span class="token operator">&lt;</span> oldStartIdx <span class="token operator">&amp;&amp;</span> newStartIdx <span class="token operator">&lt;=</span> newEndIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 添加新节点</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> newStartIdx<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> newEndIdx<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> newChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> container<span class="token punctuation">,</span> oldStartVNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newEndIdx <span class="token operator">&lt;</span> newStartIdx <span class="token operator">&amp;&amp;</span> oldStartIdx <span class="token operator">&lt;=</span> oldEndIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 移除旧节点</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> oldStartIdx<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> oldEndIdx<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">unmount</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>双端 Diff 指的是，在新旧两组子节点的四个端点之间分别进行比较，并试图找到可以复用的节点。相比简单 Diff 算法，双端 Diff 算法的优势在于，对于同样的更新场景，执行的 <strong>DOM 移动操作次数更少</strong>。</p>',7),u={render:function(n,s){const a=(0,t.up)("CodeGroupItem"),u=(0,t.up)("CodeGroup");return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,(0,t.Wm)(u,null,{default:(0,t.w5)((()=>[(0,t.Wm)(a,{title:"一轮未匹配"},{default:(0,t.w5)((()=>[e])),_:1}),(0,t.Wm)(a,{title:"遍历被遗漏"},{default:(0,t.w5)((()=>[o])),_:1}),(0,t.Wm)(a,{title:"完整代码"},{default:(0,t.w5)((()=>[c])),_:1})])),_:1}),l],64)}}}}]);