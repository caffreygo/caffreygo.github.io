"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4083],{5468:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-5b1686d8",path:"/javascript/symbol.html",title:"Symbol",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"声明",slug:"声明",children:[]},{level:2,title:"Symbol作key",slug:"symbol作key",children:[]},{level:2,title:"属性遍历",slug:"属性遍历",children:[]}],filePathRelative:"javascript/symbol.md",git:{updatedTime:1629212875e3,contributors:[{name:"Jinrui Chen",email:"jinrui@kooboo.cn",commits:1}]}}},9837:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="symbol" tabindex="-1"><a class="header-anchor" href="#symbol" aria-hidden="true">#</a> Symbol</h1><h2 id="声明" tabindex="-1"><a class="header-anchor" href="#声明" aria-hidden="true">#</a> 声明</h2><p><code>Symbol()</code>产生一个唯一的数据，类似字符串</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>         <span class="token comment">// a: Symbol(a)</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span>     <span class="token comment">// b: Symbol(b)</span>\n\n<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>      \t  <span class="token comment">// c: Symbol(a)</span>\n<span class="token keyword">const</span> d <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span>     <span class="token comment">// d: Symbol(b)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">==</span>c<span class="token punctuation">)</span>  <span class="token comment">// false 普通声明的参数只是个描述，无其他作用</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token operator">==</span>d<span class="token punctuation">)</span>  \n<span class="token comment">// true  Symbol.for(key)会在全局内存中记录这个key的Symbol,再次声明会直接返回原来声明过的</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// undefined</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// b  Symbol.keyFor获取key</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="symbol作key" tabindex="-1"><a class="header-anchor" href="#symbol作key" aria-hidden="true">#</a> Symbol作key</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> u1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token string">&quot;Jerry&quot;</span><span class="token punctuation">,</span>\n    key<span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> u2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token string">&quot;Jerry&quot;</span><span class="token punctuation">,</span>\n    key<span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> grade <span class="token operator">=</span><span class="token punctuation">{</span>\n    <span class="token punctuation">[</span>u1<span class="token punctuation">.</span>key<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">{</span>js<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> css<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span>u2<span class="token punctuation">.</span>key<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">{</span>js<span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span> css<span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>grade<span class="token punctuation">[</span>u2<span class="token punctuation">.</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">//  {js: 60, css: 80}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="属性遍历" tabindex="-1"><a class="header-anchor" href="#属性遍历" aria-hidden="true">#</a> 属性遍历</h2><p>Symbol类型作key是不能被for in/of遍历到的</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&quot;haha&quot;</span><span class="token punctuation">,</span>\n    one<span class="token operator">:</span> <span class="token string">&quot;hello&quot;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nObject<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    two<span class="token operator">:</span> <span class="token punctuation">{</span>enumerable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nObject<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// [&quot;one&quot;]</span>\nObject<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// [&quot;one&quot;, &quot;two&quot;]</span>\nObject<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// [Symbol()]</span>\nReflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// [&quot;one&quot;, &quot;two&quot;, Symbol()]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li><code>Object.keys</code>：获取自身上的可枚举属性</li><li><code>Object.getOwnPropertyNames</code>：获取自身上的属性</li><li><code>Object.getOwnPropertySymbols</code>: 获取自身上的Symbol属性</li><li><code>Reflect.ownKeys(a)</code></li></ul>',10),t={render:function(n,s){return p}}}}]);