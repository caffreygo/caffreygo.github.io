"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3673],{7263:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-0bff266c",path:"/note/engineering.html",title:"前端工程化",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Babel",slug:"babel",children:[{level:3,title:"preset-env",slug:"preset-env",children:[]},{level:3,title:"browserslist",slug:"browserslist",children:[]},{level:3,title:"core-js",slug:"core-js",children:[]},{level:3,title:"babel.config.json",slug:"babel-config-json",children:[]}]},{level:2,title:"Vite",slug:"vite",children:[{level:3,title:"依赖预构建",slug:"依赖预构建",children:[]},{level:3,title:"Dev server 启动",slug:"dev-server-启动",children:[]}]},{level:2,title:"CSS 工程化",slug:"css-工程化",children:[{level:3,title:"原生 CSS 存在的问题",slug:"原生-css-存在的问题",children:[]},{level:3,title:"CSS 工程化解决方案",slug:"css-工程化解决方案",children:[]}]}],filePathRelative:"note/engineering.md",git:{updatedTime:1672206931e3,contributors:[{name:"Jinrui Chen",email:"jinrui@kooboo.cn",commits:6}]}}},6962:(s,n,a)=>{a.r(n),a.d(n,{default:()=>c});var e=a(6252);const t=(0,e.uE)('<h1 id="前端工程化" tabindex="-1"><a class="header-anchor" href="#前端工程化" aria-hidden="true">#</a> 前端工程化</h1><h2 id="babel" tabindex="-1"><a class="header-anchor" href="#babel" aria-hidden="true">#</a> Babel</h2><p>Babel 能够实现语法转换。转换并不能解决所有问题，涉及到某个对象的 api，比如 Array.prototype.find，这种 api 的兼容并不是需要转换语法，而是要在环境中注入我们实现的 api，也就是 polyfill。</p><p>Babel 插件需要转换的语法包括 es 标准语法、proposal 阶段的语法，还有 react、flow、typescript 等特有语法。</p><ul><li><code>@babel/preset-env</code>，可以设置 targets，减少很多没必要的转换和 polyfill。但会全局引入，造成污染。</li><li>使用 <code>@babel/plugin-transform-runtime</code> 以模块化方式引入，避免造成全局污染，但不支持根据 targets 的过滤。</li><li>babel 8，解决了 <code>@babel/plugin-transform-runtime</code> 和 <code>@babel/preset-env</code> 的配合问题，不再需要 <code>@babel/plugin-transform-runtime</code></li></ul><div class="custom-container tip"><p class="custom-container-title">概述</p><ul><li><p>@babel/preset-env 就是要转换的 ES6 特性的一个合集，不需要 plugins 一个个添加。</p><ol><li>useBuiltIns 指定 babel 如何从 core-js 中提取合适的 ES6 新特性的实现 usage/entry；</li><li>corejs 指定 core-js 的版本；</li></ol></li><li><p>browserslist 提供了一种项目<strong>共享的目标环境配置</strong>，整个项目的babel、eslint，ts等都可以读取到。</p><p>有了 browserslist 的配置，我们就可以不用配置 @babel/preset-env 的 target了</p></li><li><p>babel 只是用来将 ES6+ 的语法转为 ES5，它并不处理 ES6 新增的 API。core-js 处理 ES6 新增的 API。</p></li></ul><blockquote><p>@babel/preset-env 提供了针对 browserslist 指定的老旧浏览器来转换 ES6 到 ES5</p><p>同时还能根据 browserslist 指定的环境从 core-js 中提取需要的 ES6 新增 API 的实现。</p></blockquote></div><h3 id="preset-env" tabindex="-1"><a class="header-anchor" href="#preset-env" aria-hidden="true">#</a> preset-env</h3><p>从名称看有个env，这里就是包含“环境”之意。</p><p>在preset-env出来之前，我们需要自己知道要用什么es6的特性，然后自己去babel的配置文件中加进去，如：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token string">&quot;@babel/plugin-transform-arrow-functions&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;@babel/plugin-transform-classes&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;@babel/plugin-transform-spread&quot;</span><span class="token punctuation">,</span>\n      ...\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这样做非常繁琐，开发体验也不好。再后来，后来就出现了@babel/preset-env。</p><p>@babel/preset-env 可以通过 target 属性配置一个<strong>目标环境</strong>，babel会根据环境来转换那些它不支持的语法，这样就不需要我们一个一个的去自己加入所要支持的es6特性。如</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">[</span><span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n            <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                <span class="token property">&quot;browsers&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;last 2 versions&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ie &gt;= 7&quot;</span><span class="token punctuation">]</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>所以，@babel/preset-env 的作用就是将常用的ES6特性放到一起了，然后添加一个可以配置的目标环境，它自己决定要转换那些ES6特性，这样开发体验就好很多。</p><blockquote><p>这样虽然不需要我们配置ES6特性，但需要我们自己配置目标环境，且这个环境只是babel自己知道，如果还有其他应用，如ESLint，TS等等，其他应用也需要读取目标环境来决定行为，还得配置……所以browserslist出现了。</p></blockquote><h3 id="browserslist" tabindex="-1"><a class="header-anchor" href="#browserslist" aria-hidden="true">#</a> browserslist</h3><p>browserlist 提供特性支持的环境的最低版本的数据，有了具体的版本，那么过滤出来的就是目标环境不支持的特性。 然后引入它们对应的插件即可。这就是 preset-env 做的事情 (按照目标环境按需引入插件)。</p><p>browserslist提供了一种项目共享的目标环境配置，整个项目的babel、eslint，ts等都可以读取到。如：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code># Browsers that we support\n\n[modern]\nFirefox &gt;= 53\nEdge &gt;= 15\nChrome &gt;= 58\niOS &gt;= 10.1\n\n[legacy]\n&gt; 1%\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>它有自己的配置语法，一看就会，它有多种具体文档：https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fbrowserslist%2Fbrowserslist</p><p>有了 browserslist 的配置，我们就可以不用配置 @babel/preset-env 的 target了。browserslist的配置可以写在package.json里面也可以用独立的.browserslistrc文件。</p><blockquote><p>preset-env 需要用户指定babel的目标环境，browserlist 的设置会方便很多</p></blockquote><h3 id="core-js" tabindex="-1"><a class="header-anchor" href="#core-js" aria-hidden="true">#</a> core-js</h3><p>我们已经有babel了，为何还要core-js呢？如果你这么想，那就是有个关键的概念没有搞清楚。一般babel只是用来将ES6+的语法转为ES5，它并不处理ES6新增的API，如</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> x <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>转换后</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> _console<span class="token punctuation">;</span>\n<span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">(</span>_console <span class="token operator">=</span> console<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_console<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> x <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上面的扩展运算符是属于语法的范畴，而数组的includes方法是属于ES6新增的API，所以babel只是转换了扩展运算符，而并没有处理includes方法。所以当我们在比较老旧的浏览器中运行时会报错，如何让这些老旧的浏览器也能认识ES6新增的这些API，这就是core-js要做的事情了。</p><h3 id="babel-config-json" tabindex="-1"><a class="header-anchor" href="#babel-config-json" aria-hidden="true">#</a> babel.config.json</h3><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">[</span><span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n            <span class="token property">&quot;useBuiltIns&quot;</span><span class="token operator">:</span> <span class="token string">&quot;usage&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;corejs&quot;</span><span class="token operator">:</span> <span class="token string">&quot;3&quot;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="usebuiltins" tabindex="-1"><a class="header-anchor" href="#usebuiltins" aria-hidden="true">#</a> useBuiltIns</h4><p>主要用于指定babel如何从core-js中提取合适的ES6新特性的实现，有两种模式：</p><ul><li>usage：我们不需要在入口处导入core-js，babel会根据代码中使用的ES6 API来决定提取哪些。</li><li>entry：我们通过import在入口引入core-js，babel会根据引入的core-js模块来识别和拆分更细的导入</li></ul>',33),p=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token string"},'"use strict"'),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"require"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"core-js/modules/es.symbol.js"'),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"require"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"core-js/modules/es.symbol.description.js"'),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"require"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"core-js/modules/es.symbol.iterator.js"'),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"require"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"core-js/modules/es.array.from.js"'),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"require"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"core-js/modules/es.array.slice.js"'),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"require"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"core-js/modules/es.function.name.js"'),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"require"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"core-js/modules/es.regexp.exec.js"'),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"require"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"regenerator-runtime/runtime.js"'),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// ..."),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br")])],-1),o=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"// 源文件"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"import"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"core-js/es/array"'),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"import"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"core-js/proposals/math-extensions"'),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token comment"},"// 输出"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"import"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"core-js/modules/es.array.unscopables.flat"'),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"import"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"core-js/modules/es.array.unscopables.flat-map"'),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"import"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"core-js/modules/esnext.math.clamp"'),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"import"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"core-js/modules/esnext.math.deg-per-rad"'),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"import"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"core-js/modules/esnext.math.degrees"'),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"import"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"core-js/modules/esnext.math.fscale"'),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"import"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"core-js/modules/esnext.math.rad-per-deg"'),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"import"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"core-js/modules/esnext.math.radians"'),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"import"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"core-js/modules/esnext.math.scale"'),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br")])],-1),l=(0,e.uE)('<h4 id="corejs" tabindex="-1"><a class="header-anchor" href="#corejs" aria-hidden="true">#</a> corejs</h4><p>用于指定core-js的版本，因为core-js有2和3的版本，这里babel默认会使用2的版本，这里建议用3的版本。babel还建议指定core-js的minor版本，这样能将最新实现的API包含进来。默认情况下，babel只会提取稳定的API实现，如果你想将还在提案阶段的API也包含进来，可以这样配置：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;corejs&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> version<span class="token operator">:</span> <span class="token string">&quot;3.8&quot;</span><span class="token punctuation">,</span> proposals<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>总的来说，useBuiltIns配置为usage，corejs配置为{ version: &quot;3.8&quot;, proposals: true }会是大部分场景的选择。</p><h2 id="vite" tabindex="-1"><a class="header-anchor" href="#vite" aria-hidden="true">#</a> Vite</h2><p>第一步是依赖预构建，第二步才是 Dev Server 的启动。</p><h3 id="依赖预构建" tabindex="-1"><a class="header-anchor" href="#依赖预构建" aria-hidden="true">#</a> 依赖预构建</h3><p>模块代码其实分为两部分，一部分是源代码，也就是业务代码，另一部分是第三方依赖的代码，即 node_modules 中的代码。</p><p>所谓的 no-bundle 只是对于源代码。对于第三方依赖，Vite 还是选择 bundle(打包)，并且使用速度极快的打包器 Esbuild 来完成这一过程，达到秒级的依赖编译速度。</p><div class="custom-container tip"><p class="custom-container-title">依赖预构建主要做了两件事情：</p><ol><li><p>将其他格式(如 UMD 和 CommonJS)的产物转换为 ESM 格式，使其在浏览器通过<code> &lt;script type=&quot;module&quot;&gt;&lt;script&gt;</code>的方式正常加载。</p></li><li><p>打包第三方库的代码，将各个第三方库分散的文件合并到一起，减少 HTTP 请求数量，避免页面加载性能劣化。</p></li></ol></div><p>而这两件事情全部由性能优异的 Esbuild (基于 Golang 开发)完成，而不是传统的 Webpack/Rollup，所以也不会有明显的打包性能问题，反而是 Vite 项目启动飞快(秒级启动)的一个核心原因。</p><blockquote><p>项目启动成功后，在 node_modules 中的 .vite 文件夹，就是预构建产物文件存放的目录</p><p>该依赖会设置 http 缓存，同时文件在 .vite 文件夹下也进行了缓存</p></blockquote><h3 id="dev-server-启动" tabindex="-1"><a class="header-anchor" href="#dev-server-启动" aria-hidden="true">#</a> Dev server 启动</h3><h2 id="css-工程化" tabindex="-1"><a class="header-anchor" href="#css-工程化" aria-hidden="true">#</a> CSS 工程化</h2><h3 id="原生-css-存在的问题" tabindex="-1"><a class="header-anchor" href="#原生-css-存在的问题" aria-hidden="true">#</a> 原生 CSS 存在的问题</h3><ol><li><strong>开发体验</strong>欠佳。比如原生 CSS 不支持选择器的嵌套:</li></ol><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">// 选择器只能平铺，不能嵌套\n.container .header .nav .title .text</span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.container .header .nav .box</span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid grey<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ol><li><strong>样式污染</strong>问题。如果出现同样的类名，很容易造成不同的样式互相覆盖和污染。</li></ol><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">// a.css\n.container</span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">// b.css\n// 很有可能覆盖 a.css 的样式！\n.container</span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ol><li><strong>浏览器兼容</strong>问题。为了兼容不同的浏览器，我们需要对一些属性(如<code>transition</code>)加上不同的浏览器前缀，比如 <code>-webkit-</code>、<code>-moz-</code>、<code>-ms-</code>、<code>-o-</code>，意味着开发者要针对同一个样式属性写很多的冗余代码。</li><li>打包后的<strong>代码体积</strong>问题。如果不用任何的 CSS 工程化方案，所有的 CSS 代码都将打包到产物中，即使有部分样式并没有在代码中使用，导致产物体积过大。</li></ol><h3 id="css-工程化解决方案" tabindex="-1"><a class="header-anchor" href="#css-工程化解决方案" aria-hidden="true">#</a> CSS 工程化解决方案</h3><p>针对如上原生 CSS 的痛点，社区中诞生了不少解决方案，常见的有 5 类。</p><ol><li><code>CSS 预处理器</code>：主流的包括<code>Sass/Scss</code>、<code>Less</code>和<code>Stylus</code>。这些方案各自定义了一套语法，让 CSS 也能使用嵌套规则，甚至能像编程语言一样定义变量、写条件判断和循环语句，大大增强了样式语言的灵活性，解决原生 CSS 的<strong>开发体验问题</strong>。</li><li><code>CSS Modules</code>：能将 CSS 类名处理成哈希值，这样就可以避免同名的情况下<strong>样式污染</strong>的问题。</li><li>CSS 后处理器<code>PostCSS</code>，用来解析和处理 CSS 代码，可以实现的功能非常丰富，比如将 <code>px</code> 转换为 <code>rem</code>、根据目标浏览器情况自动加上类似于<code>--moz--</code>、<code>-o-</code>的属性前缀等等。（常用的 PostCSS 插件——<code>autoprefixer</code>）</li><li><code>CSS in JS</code> 方案，主流的包括<code>emotion</code>、<code>styled-components</code>等等，顾名思义，这类方案可以实现直接在 JS 中写样式代码，基本包含<code>CSS 预处理器</code>和 <code>CSS Modules</code> 的各项优点，非常灵活，解决了开发体验和全局样式污染的问题。</li><li>CSS 原子化框架，如<code>Tailwind CSS</code>、<code>Windi CSS</code>，通过类名来指定样式，大大简化了样式写法，提高了样式开发的效率，主要解决了原生 CSS <strong>开发体验</strong>的问题。</li></ol><blockquote><p>由于有 CSS 代码的 AST (抽象语法树)解析能力，PostCSS 可以做的事情非常多，甚至能实现 CSS 预处理器语法和 CSS Modules，社区当中也有不少的 PostCSS 插件，除了刚刚提到的autoprefixer插件，常见的插件还包括：</p><p>postcss-pxtorem： 用来将 px 转换为 rem 单位，在适配移动端的场景下很常用。 postcss-preset-env: 通过它，你可以编写最新的 CSS 语法，不用担心兼容性问题。 cssnano: 主要用来压缩 CSS 代码，跟常规的代码压缩工具不一样，它能做得更加智能，比如提取一些公共样式进行复用、缩短一些常见的属性值等等。</p></blockquote>',24),c={render:function(s,n){const a=(0,e.up)("CodeGroupItem"),c=(0,e.up)("CodeGroup");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,(0,e.Wm)(c,null,{default:(0,e.w5)((()=>[(0,e.Wm)(a,{title:"usage"},{default:(0,e.w5)((()=>[p])),_:1}),(0,e.Wm)(a,{title:"entry"},{default:(0,e.w5)((()=>[o])),_:1})])),_:1}),l],64)}}}}]);