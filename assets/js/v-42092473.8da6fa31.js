"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1453],{3997:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-42092473",path:"/VueJs3/section5/chapter17.html",title:"编译优化",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"动态节点收集与补丁标志",slug:"动态节点收集与补丁标志",children:[{level:3,title:"传统 Dif 算法的问题",slug:"传统-dif-算法的问题",children:[]},{level:3,title:"Block 与 PatchFlags",slug:"block-与-patchflags",children:[]},{level:3,title:"收集动态节点",slug:"收集动态节点",children:[]},{level:3,title:"渲染器的运行时支持",slug:"渲染器的运行时支持",children:[]}]},{level:2,title:"Block 树",slug:"block-树",children:[{level:3,title:"带有 v-if 指令的节点",slug:"带有-v-if-指令的节点",children:[]},{level:3,title:"带有 v-for 指令的节点",slug:"带有-v-for-指令的节点",children:[]}]},{level:2,title:"Fragment 的稳定性",slug:"fragment-的稳定性",children:[]},{level:2,title:"静态提升",slug:"静态提升",children:[]},{level:2,title:"预字符串化",slug:"预字符串化",children:[]},{level:2,title:"缓存内联事件处理函数",slug:"缓存内联事件处理函数",children:[]},{level:2,title:"v-once",slug:"v-once",children:[]}],filePathRelative:"VueJs3/section5/chapter17.md",git:{updatedTime:1656170487e3,contributors:[{name:"Jerry Chen",email:"caffreygo@163.com",commits:2},{name:"Jinrui Chen",email:"jinrui@kooboo.cn",commits:1}]}}},6125:(n,s,a)=>{a.r(s),a.d(s,{default:()=>yn});var t=a(6252);const e=(0,t.uE)('<h1 id="编译优化" tabindex="-1"><a class="header-anchor" href="#编译优化" aria-hidden="true">#</a> 编译优化</h1><p><strong>编译优化指的是编译器将模板编译为渲染函数的过程中，尽可能多地提取关键信息，并以此指导生成最优代码的过程</strong>。编译优化的策略与具体实现是由框架的设计思路所决定的，不同的框架具有不同的设计思路，因此编泽优化的策略也不尽相同。</p><p>✅ 但优化的方向基本一致，即尽可能地区分动态内容利静态内容，并针对不同的内容采用不同的优化策略。</p><h2 id="动态节点收集与补丁标志" tabindex="-1"><a class="header-anchor" href="#动态节点收集与补丁标志" aria-hidden="true">#</a> 动态节点收集与补丁标志</h2><div class="custom-container tip"><p class="custom-container-title">概述</p><p>编译优化的核心在于，区分动态节点与静态节点。vue.js 3 会为动态节点打上补丁标志，即 <code>patchFlag</code>。同时，Vue.js 3 还提出了 Block 的概念，一个 Block 本质上也是一个虚拟节点，但与普通虛拟节点相比，会多出一个 <code>dynamiChildren</code> 数组。该数组用来收集所有动态子代节点。这利用了 <code>createVNode</code> 函数和 <code>createBlock</code> 函数层层嵌套调用的特点，即以“由内向外”的力式执行。再配合一个用来临时存储动态节点的节点栈，即可完成动态子代节点的收集。</p></div><blockquote><p>补丁标志实现了动态节点的靶向更新；</p><p>Block 是对所有动态子节点收集的一个特殊 VNode。</p></blockquote><h3 id="传统-dif-算法的问题" tabindex="-1"><a class="header-anchor" href="#传统-dif-算法的问题" aria-hidden="true">#</a> 传统 Dif 算法的问题</h3><p>之前共介绍了三种关于传统虚拟 DOM 的 Diff 算法。但无论哪一种 Diff 算法，当它在比对新旧两棵虚拟 DOM 树的时候，总是要按照虚拟 DOM的层级结构<strong>一层一层</strong>地遍历。举个例子，假设我们有如下模板：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>foo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bar<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    {{ text }}\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在上面这段模板中，唯一可能变化的就是 p 标签的文本子节点的内容。也就是说，当响应式数据 <code>text</code> 的值发生变化时，最高效的更新方式就是直接设置 p 标签的文本内容。但传统 Diff 算法显然做不到如此高效，当响应式数据 <code>text</code> 发生变化时，会产生一棵新的虚拟 DOM 树，</p><div class="custom-container tip"><p class="custom-container-title">传统 Diff 算法对比新旧两棵虚拟 DOM树的过程如下：</p><ol><li>对比 div 节点，以及该节点的属性和子节点。</li><li>对比 p 节点，以及该节点的属性和子节点。</li><li>对比 p 节点的文本子节点，如果文本子节点的内容变了，则更新之，否则什么都不做。</li></ol><p>可以看到，与直接更新 p 标签的文本内容相比，传统 Diff 算法存在很多<strong>无意义的比对操作</strong>。如果能够跳过这此无意义的操作，性能将会大幅提升。而这就是 vue.js3 编译优化的思路来源。</p></div><p>实际上，模板的结构非常稳定。通过编译手段，我们可以分析出很多关键信息，例如哪些节点是静态的，哪些节点是动态的。结合这些关键信息，编译器可以直接生成原生 DOM 操作的代码，这样甚至能够抛弃掉虚拟 DOM，从而避免虚拟 DOM 带来的性能开销。但是，考虑到渲染函数的灵活性，以及 Vue js 2 的兼容题，vue.js 3 最终还是选择了保留虚拟 DOM。这样一来，就必然要面临它所带来的额外性能开销。</p><p>✅ 那么，为什么虛拟 DOM 会产生额外的性能开销呢？根本原因在于，渲染器在运行时得不到足够的信息。传统 Diff 算法无法利用编译时提取到的任何关键信息，这导致渲染器在运行时不可能去做相关的优化。而 Vue.js 3 的编译器会将编译时得到的<strong>关键信息“附着”在它生成的虚拟 DoM上</strong>，这些信息会通过虚拟 DOM 传递给渲染器。最终，渲染器会根据这些关键信息执行“快捷路径”，从而提升运行时的性能。</p><h3 id="block-与-patchflags" tabindex="-1"><a class="header-anchor" href="#block-与-patchflags" aria-hidden="true">#</a> Block 与 PatchFlags</h3><p>✅ 传统 Diff 算法无法避免新旧虚拟 DOM 树间无用的比较操作，是因为它在运行时得不到足够的关键信息，从而无法区分动态内容和静态内容。换句话说，只要运行时能够区分动态内容和静态内容，即可实现极致的优化策略。</p><div class="custom-container tip"><p class="custom-container-title">Block 节点</p><ul><li>有了 Block 这个概念之后，渲染器的更新操作将会以 Block 为维度。也就是说，渲染器在更新一个 Block 的时候，会直接找到该虚拟节点的<code>dynamicChildren</code>数组，并更新该数组中的动态节点。这样，在更新时就实现<strong>跳过了静态内容</strong>，只更新动态内容。</li><li>同时，由于动态节点当中存在对应的补丁标志，所以在更新动态节点的时候，也能够做到<strong>靶向更新</strong>。例如，当一个动态节点的 <code>patchFlat</code>的值为 1 时，我们知道它只存在动态的文本节点，所以只需要更新它的文本内容即可。</li><li>当我们编写模板代码的时候，所有模板的根节点都会是一个 Block 节点。同时，任何带有<code>v-for</code>、<code>v-if/v-else-if\\v-else</code>等指令的节点都会被当做 Block 节点。</li></ul></div>',16),p=(0,t._)("div",{class:"language-html ext-html line-numbers-mode"},[(0,t._)("pre",{class:"language-html"},[(0,t._)("code",null,[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("div")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n\t"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("div")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("foo"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("div")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("p")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("{{ bar }}"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("p")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("div")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"highlight-lines"},[(0,t._)("br"),(0,t._)("br"),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("br")]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br")])],-1),c=(0,t._)("p",null,"这段模板当中只有 bar 是动态内容，所以理想的情况下，当响应式数据更新时，只需要更改 p 标签的文本节点即可。",-1),o=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" vnode "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n\ttag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'div'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    children"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" tag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'div'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" children"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'foo'"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" tag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'p'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" children"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(" ctx"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("bar "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"highlight-lines"},[(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("br"),(0,t._)("br")]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br")])],-1),l=(0,t._)("p",null,"为了实现这个目标，我们需要从虚拟 DOM 的结构入手，补充内容标志体现出节点的动态性。",-1),u=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" patchFlag "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token constant"},"TEXT"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("  "),(0,t._)("span",{class:"token comment"},"// 代表节点有动态的 textContent"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token constant"},"CLASS"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"2"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("  "),(0,t._)("span",{class:"token comment"},"// 代表节点有动态的 class"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token constant"},"STYLE"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"3"),(0,t.Uk)("  "),(0,t._)("span",{class:"token comment"},"// 代表节点有动态的 style"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"// ..."),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" vnode "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n\ttag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'div'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    children"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" tag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'div'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" children"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'foo'"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" tag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'p'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" children"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(" ctx"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("bar"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" patchFlag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(" patchFlag"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("Text "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    dynamicChildren"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token comment"},"// p 标签具有 patchFlag 属性，因此它是动态节点"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" tag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'p'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" children"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(" ctx"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("bar"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" patchFlag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(" patchFlag"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("Text "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"highlight-lines"},[(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("br"),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("br")]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br")])],-1),k=(0,t._)("p",null,[(0,t.Uk)("Block 本质上也是一个虚拟 DOM 节点，只不过它比普通的虚拟节点多出耦合用来存储动态子节点的"),(0,t._)("code",null,"dynamicChildren"),(0,t.Uk)("属性。同时，一个 Block 不仅能够收集它的直接动态子节点，还能收集"),(0,t._)("strong",null,"所有的动态子节点"),(0,t.Uk)("。")],-1),i=(0,t._)("div",{class:"language-html ext-html line-numbers-mode"},[(0,t._)("pre",{class:"language-html"},[(0,t._)("code",null,[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("div")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n\t"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("div")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("p")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("{{ bar }}"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("p")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n   \t"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("div")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("div")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br")])],-1),_=(0,t._)("p",null,"Bock：",-1),r=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" vnode "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    tag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'div'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    children"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" tag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'div'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" children"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'foo'"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        children"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("\n        \t"),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" tag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'p'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" children"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(" ctx"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("bar"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" patchFlag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(" patchFlag"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("Text "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\t\t"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n\t"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    dynamicChildren"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token comment"},"// Block 可以收集所有的动态子节点"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" tag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'p'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" children"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(" ctx"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("bar"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" patchFlag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(" patchFlag"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("Text "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"highlight-lines"},[(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("br"),(0,t._)("br"),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("br")]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br")])],-1),b=(0,t._)("div",{class:"language-html ext-html line-numbers-mode"},[(0,t._)("pre",{class:"language-html"},[(0,t._)("code",null,[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("template")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"\x3c!-- 这个 div 是一个 Block --\x3e"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("div")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token comment"},"\x3c!-- 这个 p 不是是一个 Block，因为它不是根节点 --\x3e"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("p")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("{{ bar }}"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("p")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("div")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"\x3c!-- 这个 h1 是一个 Block --\x3e"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("h1")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token comment"},"\x3c!-- 这个 span 不是是一个 Block，因为它不是根节点 --\x3e"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("span")]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},":id"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},"'"),(0,t.Uk)("dynamicId"),(0,t._)("span",{class:"token punctuation"},"'")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("span")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("h1")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("template")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br")])],-1),d=(0,t._)("h3",{id:"收集动态节点",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#收集动态节点","aria-hidden":"true"},"#"),(0,t.Uk)(" 收集动态节点")],-1),U=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token function"},"render"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"createNode"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'div'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" id"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'foo'"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("\n   \t\t"),(0,t._)("span",{class:"token function"},"createNode"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'p'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"null"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'hello world'"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"highlight-lines"},[(0,t._)("br"),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("br"),(0,t._)("br")]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br")])],-1),m=(0,t._)("p",null,"编译器生成渲染函数时，并不会直接包含用来描述虚拟节点的数据结构，而是包含着用来创建虚拟 DOM 节点的辅助函数。",-1),g=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"createVNode"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},[(0,t.Uk)("tag"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" props"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" children")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" key "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" props "),(0,t._)("span",{class:"token operator"},"&&"),(0,t.Uk)(" props"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("key\n    props "),(0,t._)("span",{class:"token operator"},"&&"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"delete"),(0,t.Uk)(" props"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("key\n\n    "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        tag"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        props"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        children"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        key\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br")])],-1),h=(0,t._)("p",null,[(0,t._)("code",null,"createVNode"),(0,t.Uk)("函数就是用来创建虚拟 DOM 节点的辅助函数，它的基本实现如上。它的返回值是一个虚拟 DOM 节点，内部对 props 和 children 还会做一些额外的处理工作。")],-1),v=(0,t._)("div",{class:"language-html ext-html line-numbers-mode"},[(0,t._)("pre",{class:"language-html"},[(0,t._)("code",null,[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("div")]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"id"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("foo"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("p")]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"class"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("bar"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("{{ text }}"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("p")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("div")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br")])],-1),f=(0,t._)("p",null,[(0,t.Uk)("假如我们有如上这个模板，编译器在对这段模板进行编译优化之后，会生成带有"),(0,t._)("strong",null,"补丁标志"),(0,t.Uk)("（patch tag）的渲染函数：")],-1),y=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token function"},"render"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"createNode"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'div'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" id"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'foo'"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token comment"},"// PatchFlags 就是补丁标志"),(0,t.Uk)("\n   \t\t"),(0,t._)("span",{class:"token function"},"createNode"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'p'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"class"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'bar'"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" text"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" PatchFlags"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token constant"},"TEXT"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"highlight-lines"},[(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("br"),(0,t._)("br")]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br")])],-1),w=(0,t._)("p",null,[(0,t.Uk)("用于创建 p 标签的"),(0,t._)("code",null,"createVNode"),(0,t.Uk)("函数补充了第四个参数，即"),(0,t._)("code",null,"PatchFlags.TEXT"),(0,t.Uk)("。")],-1),x=(0,t._)("p",null,"这个参数就是所谓的补丁标志，它代表当前虚拟节点是一个动态节点，并且动态因素是：具有动态文本节点。这样就实现了对动态节点的标志。",-1),B=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token function"},"render"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"createVNode"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'div'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token function"},"createVNode"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'div'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token function"},"createVNode"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'div'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("\n                "),(0,t._)("span",{class:"token function"},"createVNode"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'div'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("\n                    "),(0,t._)("span",{class:"token function"},"createVNode"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'div'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("\n                        "),(0,t._)("span",{class:"token comment"},"// ..."),(0,t.Uk)("\n                    "),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n                "),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br")])],-1),j=(0,t._)("p",null,"如何将根节点变成一个 Block？如何将动态子节点收集到该 Block 当中？",-1),C=(0,t._)("p",null,[(0,t.Uk)("在渲染函数里，对"),(0,t._)("code",null,"createVNode"),(0,t.Uk)("函数的调用是层层嵌套的结构，并且该函数的执行顺序是“"),(0,t._)("strong",null,"内层先执行，外层后执行"),(0,t.Uk)("”。")],-1),D=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token comment"},"// 动态节点栈"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" dynamicChildrenStack "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token comment"},"// 当前动态节点集合"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" currentDynamicChildren "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"null"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token comment"},"// openBlock 用来创建一个新的动态节点集合，并将该集合压入栈中"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"openBlock"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    dynamicChildrenStack"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"push"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("currentDynamicChildren "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token comment"},"// closeBlock 用来将通过 openBlock 创建的动弹节点集合从栈中弹出"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"closeBlock"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    currentDynamicChildren "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" dynamicChildrenStack"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"pop"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br")])],-1),N=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"createVNode"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},[(0,t.Uk)("tag"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" props"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" children"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" flags")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" key "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" props "),(0,t._)("span",{class:"token operator"},"&&"),(0,t.Uk)(" props"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("key\n    props "),(0,t._)("span",{class:"token operator"},"&&"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"delete"),(0,t.Uk)(" props"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("key\n\n    "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" vnode "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        tag"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        props"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        children"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        key"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        patchFlags\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n    "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token keyword"},"typeof"),(0,t.Uk)(" flags "),(0,t._)("span",{class:"token operator"},"!=="),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'undefined'"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"&&"),(0,t.Uk)(" currentDynamicChildren"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token comment"},"// 收集动态节点"),(0,t.Uk)("\n        currentDynamicChildren"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"push"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("vnode"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n    "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(" vnode\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"highlight-lines"},[(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br")]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"19"),(0,t._)("br")])],-1),V=(0,t._)("p",null,[(0,t.Uk)("当外层的"),(0,t._)("code",null,"createVNode"),(0,t.Uk)("函数执行时，内层的函数已经执行完毕了。因此，外层 Block 节点能够收集到内层动态节点，就需要一个"),(0,t._)("strong",null,"栈结构"),(0,t.Uk)("的数据来存储内层的动态节点。")],-1),O=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token function"},"render"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"// 1. 调用 openBlock 开启一个动态节点集合"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"// 2. createBlock 参数执行 createVNode, 进行动态节点的收集"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"// 3. 最后 createBlock 进行动态节点的赋值，以及栈元素的移除"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token function"},"openBlock"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"createBlock"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'div'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"null"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token function"},"createVNode"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'p'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"class"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'foo'"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"null"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token function"},"createVNode"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'p'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"class"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'bar'"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"null"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"createBlock"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},[(0,t.Uk)("tag"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" props"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" children")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"// Block 本质上也是一个 VNode"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" block "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"createVNode"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("tag"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" props"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" children"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    block"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("dynamicChildren "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" currentDynamicChildren\n\n    "),(0,t._)("span",{class:"token function"},"closeBlock"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\n    "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(" block\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"highlight-lines"},[(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("br")]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"19"),(0,t._)("br")])],-1),F=(0,t._)("p",null,[(0,t._)("code",null,"createVNode"),(0,t.Uk)("会先执行，在这个过程中进行动态子节点的收集工作；")],-1),W=(0,t._)("p",null,[(0,t.Uk)("当"),(0,t._)("code",null,"createBlock"),(0,t.Uk)("执行时，便能拿到当前的所有动态子节点集合。")],-1),M=(0,t._)("blockquote",null,[(0,t._)("p",null,"这里利用逗号运算符的性质来保证渲染函数的返回值仍然是 VNdode 对象。"),(0,t._)("p",null,"currentDynamicChidlren 数组所存储的就是属于当前 Block 的所有动态子节点。")],-1),q=(0,t._)("h3",{id:"渲染器的运行时支持",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#渲染器的运行时支持","aria-hidden":"true"},"#"),(0,t.Uk)(" 渲染器的运行时支持")],-1),P=(0,t._)("p",null,[(0,t.Uk)("✅ 现在，我们已经有了动态节点集合"),(0,t._)("code",null,"vnode.dynamicChildren"),(0,t.Uk)("，以及附着其上的补丁标志。基于这两点，即可在渲染器中实现"),(0,t._)("strong",null,"靶向更新"),(0,t.Uk)("。")],-1),E=(0,t.Uk)("🌐 "),S={href:"https://www.ijerrychen.com/VueJs3/section3/chapter8.html#%E6%9B%B4%E6%96%B0%E5%AD%90%E8%8A%82%E7%82%B9",target:"_blank",rel:"noopener noreferrer"},T=(0,t.Uk)("patchElement & patchChildren (opens new window)"),A=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"patchElement"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},[(0,t.Uk)("n1"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" n2")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" el "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" n2"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("el "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" n1"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("el\n    "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" oldProps "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" n1"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("props\n    "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" newProps "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" n2"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("props\n    "),(0,t._)("span",{class:"token comment"},"// 省略部分代码"),(0,t.Uk)("\n\n    "),(0,t._)("span",{class:"token keyword"},"if"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("n2"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("dynamicChidlren"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token function"},"patchBlockChildren"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("n1"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" n2"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token function"},"patchChildren"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("n1"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" n2"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" el"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"patchBlockChildren"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},[(0,t.Uk)("n1"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" n2")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"// 只更新动态子节点即可"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"for"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token keyword"},"let"),(0,t.Uk)(" i "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i "),(0,t._)("span",{class:"token operator"},"<"),(0,t.Uk)(" n2"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("dynamicChildren"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i"),(0,t._)("span",{class:"token operator"},"++"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token function"},"patchElement"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("n1"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("dynamicChildren"),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("i"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" n2"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("dynamicChildren"),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("i"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"19"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"20"),(0,t._)("br")])],-1),H=(0,t._)("p",null,[(0,t.Uk)("渲染器在更新节点时，使用"),(0,t._)("code",null,"patchChildren"),(0,t.Uk)("函数来更新标签的子节点。该函数会使用传统的 Diff 算法进行更新，这样做效率比较低。有了"),(0,t._)("code",null,"dynamicChildren"),(0,t.Uk)("之后，我们可以"),(0,t._)("strong",null,"直接对比动态子节点"),(0,t.Uk)("。")],-1),I=(0,t._)("p",null,[(0,t.Uk)("✅ 我们优先检测虚拟 DOM 是否存在动态节点集合，即"),(0,t._)("code",null,"dynamicChildren"),(0,t.Uk)("数组。如果存在，则直接调用"),(0,t._)("code",null,"patchChildren"),(0,t.Uk)("函数完成更新。这样，渲染函数只会对动态节点进行更新，而跳过所有静态节点。")],-1),J=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"patchElement"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},[(0,t.Uk)("n1"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" n2")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" el "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" n2"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("el "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" n1"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("el\n    "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" oldProps "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" n1"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("props\n    "),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" newProps "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" n2"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("props\n\n    "),(0,t._)("span",{class:"token keyword"},"if"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("n2"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("PatchFlags"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("n2"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("PatchFlags "),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n\t\t\t"),(0,t._)("span",{class:"token comment"},"// 只需要更新文本子节点"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("n2"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("PatchFlags "),(0,t._)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"2"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token comment"},"// 只需要更新 class"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"if"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token operator"},"..."),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token comment"},"// ..."),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token comment"},"// 全量更新"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token comment"},"// 第一步：更新 props，属性打补丁+属性卸载"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token keyword"},"for"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" key "),(0,t._)("span",{class:"token keyword"},"in"),(0,t.Uk)(" newProps"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("newProps"),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("key"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"!=="),(0,t.Uk)(" oldProps"),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("key"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n                "),(0,t._)("span",{class:"token function"},"patchProps"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("el"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" key"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" oldProps"),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("key"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" newProps"),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("key"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token keyword"},"for"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" key "),(0,t._)("span",{class:"token keyword"},"in"),(0,t.Uk)(" oldProps"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token operator"},"!"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("key "),(0,t._)("span",{class:"token keyword"},"in"),(0,t.Uk)(" newProps"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n                "),(0,t._)("span",{class:"token function"},"patchProps"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("el"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" key"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" oldProps"),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("key"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"null"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token comment"},"// 第二步：更新 children"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token function"},"patchChildren"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("n1"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" n2"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" el"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"19"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"20"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"21"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"22"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"23"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"24"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"25"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"26"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"27"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"28"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"29"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"30"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"31"),(0,t._)("br")])],-1),L=(0,t._)("p",null,[(0,t.Uk)("✅ 动态节点集合能够使得渲染器在执行更新时跳过静态节点，而对于"),(0,t._)("strong",null,"单个动态节点"),(0,t.Uk)("的更新来说，由于它存在对应的补丁标志，因此我们可以针对性完成靶向更新：")],-1),X=(0,t.uE)('<h2 id="block-树" tabindex="-1"><a class="header-anchor" href="#block-树" aria-hidden="true">#</a> Block 树</h2><div class="custom-container tip"><p class="custom-container-title">概述</p><p>由于 Block 会收集所有动态子代节点，所以对动态节点的比对操作是忽略 DOM 层级结构的。这会带来额外的问题，即 <code>v-if</code> 、<code>v-for</code> 等结构化指令会影响 DOM 层级结构，使之不稳定。这会间接导致基于 Block 树的比对算法失效。而解决的方式很简单，只需要让带有 <code>v-if</code> 、<code>v-for</code> 等指令的节点也作为 Block 角色即可。</p></div><blockquote><p>除了根节点会被当中 Block 之外，带有<code>v-for</code>、<code>v-if v-else-if v-else</code>等指令的节点也会被当做 Block 节点。这就形成了 Block 树。</p></blockquote><h3 id="带有-v-if-指令的节点" tabindex="-1"><a class="header-anchor" href="#带有-v-if-指令的节点" aria-hidden="true">#</a> 带有 v-if 指令的节点</h3>',4),G=(0,t._)("div",{class:"language-html ext-html line-numbers-mode"},[(0,t._)("pre",{class:"language-html"},[(0,t._)("code",null,[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("div")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("section")]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"v-if"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("foo"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("p")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("{{ a }}"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("p")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("section")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("div")]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"v-else"),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("p")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("{{ a }}"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("p")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("div")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("div")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br")])],-1),Y=(0,t._)("p",null,[(0,t.Uk)("foo 的值改变，block 收集的动态节点是不变的，这意味着在 Diff 阶段不会做任何更新。但是，实际上这两个 p 标签的父元素是不同的。更新前后的"),(0,t._)("strong",null,"标签不同"),(0,t.Uk)("，如果不做更新，将产生 Bug。")],-1),z=(0,t._)("div",{class:"language-html ext-html line-numbers-mode"},[(0,t._)("pre",{class:"language-html"},[(0,t._)("code",null,[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("div")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("section")]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"v-if"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("foo"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("p")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("{{ a }}"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("p")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("section")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("section")]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"v-else"),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("div")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n            "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("p")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("{{ a }}"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("p")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("div")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("section")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("div")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br")])],-1),R=(0,t._)("p",null,[(0,t.Uk)("上面这段模板的 "),(0,t._)("strong",null,"DOM 数结构"),(0,t.Uk)("根据 foo 值改变是不同的，然而 block 收集到的动态子节点确是一样的，同样会产生 Bug。")],-1),$=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" block "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    tag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'div'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    dynamicChildren"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" tag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'p'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" children"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(" ctx"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("a"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" patchFlags"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"1"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"// ..."),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br")])],-1),K=(0,t.uE)('<hr><p>根本原因在于，<code>dynamicChildren</code>数组中收集的动态节点是忽略虚拟 DOM 数层级的。换句话说，结构化指令会导致更新前后模板的结构发生变化，即模板结构不稳定。</p><p>✅ 为了解决这个问题，让虚拟 DOM 树的结构变稳定，只需要让这些<strong>带有结构化指令的节点也作为 Block 角色</strong>即可。</p><p>以之前的问题模板 2 为例，如果我们把<code>v-if</code>、<code>v-else</code>指令所在的标签也作为 Block 处理，那么将构成一棵 Block 树：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Block(div)\n\t- Block(Section v-if)\n\t- Block(Section v-else)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>父级 Block 除了会手机动态子节点之外，也会收集子 Block。因此，两个字 Block 将会被父级 Block 收集到其<code>dynamicChildren</code>数组中：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> block <span class="token operator">=</span> <span class="token punctuation">{</span>\n    tag<span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>\n    dynamicChildren<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token comment">// Block(Section v-if) 或者 Block(Section v-else)</span>\n        <span class="token comment">// key 值会根据不同的 Block 而发生变化</span>\n        <span class="token punctuation">{</span> tag<span class="token operator">:</span> <span class="token string">&#39;section&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> key<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> dynamicChildren<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这样，根据<code>v-if\\v-else</code>的条件不同，父级 Block 收集到的子 Block 也会不同。在 Diff 过程中，渲染器能够根据 Block 的 key 值区分出更新前后的两个 Block 是不同的，并使用新的 Block 替换旧的 Block。这样就解决了 DOM 结构不稳定引起的更新问题。</p><h3 id="带有-v-for-指令的节点" tabindex="-1"><a class="header-anchor" href="#带有-v-for-指令的节点" aria-hidden="true">#</a> 带有 v-for 指令的节点</h3>',9),Q=(0,t._)("div",{class:"language-html ext-html line-numbers-mode"},[(0,t._)("pre",{class:"language-html"},[(0,t._)("code",null,[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("div")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("p")]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"v-for"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("item in list"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("{{ item }}"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("p")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("i")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("{{ foo }}"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("i")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("i")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("{{ bar }}"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("i")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("div")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br")])],-1),Z=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token comment"},"// 更新前 [1, 2]"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" preBlock "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    tag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'div'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    dynamicChildren"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" tag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'p'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" children"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"1"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" tag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'p'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" children"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"2"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"1"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" tag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'i'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" children"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(" ctx"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("foo"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"1"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" tag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'i'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" children"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(" ctx"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("abar"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"1"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token comment"},"// 更新后 [1]"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" nextBlock "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    tag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'div'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    dynamicChildren"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" tag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'p'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" children"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"1"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" tag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'i'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" children"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(" ctx"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("foo"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"1"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" tag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'i'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" children"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(" ctx"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("abar"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"1"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"19"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"20"),(0,t._)("br")])],-1),nn=(0,t.uE)('<p>✅ 这里 list 更新前后会使得 Block 有不同数量的动态子节点，不能使用传统的 Diff 算法对<code>dynamicChildren</code>进行更新。因为进行 Diff 操作的节点必须是同层级节点，而<code>dynamicChildren</code>内的节点未必是同层级的。所以我们同样需要把<code>v-for</code>所在的标签也作为 Block 角色处理。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> block <span class="token operator">=</span> <span class="token punctuation">{</span>\n    tag<span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>\n    dynamicChildren<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span> tag<span class="token operator">:</span> Fragment<span class="token punctuation">,</span> dynamicChildren<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">/* v-for 的节点 */</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span> tag<span class="token operator">:</span> <span class="token string">&#39;i&#39;</span><span class="token punctuation">,</span> children<span class="token operator">:</span> ctx<span class="token punctuation">.</span>foo<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span> tag<span class="token operator">:</span> <span class="token string">&#39;i&#39;</span><span class="token punctuation">,</span> children<span class="token operator">:</span> ctx<span class="token punctuation">.</span>abar<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>由于<code>v-for</code>指令渲染的是一个片段，所以我们需要使用类型为<code>Fragment</code>的节点来表达<code>v-for</code>指令的渲染结果，并作为 Block 角色。</p><h2 id="fragment-的稳定性" tabindex="-1"><a class="header-anchor" href="#fragment-的稳定性" aria-hidden="true">#</a> Fragment 的稳定性</h2><blockquote><ol><li>Fragment 的作为<code>v-for</code>的表达方式，其动态子节点的结构如果是不稳定的，要回退到传统的 Diff 操作，而不是使用 dynamicChildren；</li><li>Fragment 的子节点（children）仍然可以是由 Block 组成的数组；</li><li>也存在稳定的 Fragment，可以作为 Block 处理。</li></ol></blockquote>',5),sn=(0,t._)("div",{class:"language-html ext-html line-numbers-mode"},[(0,t._)("pre",{class:"language-html"},[(0,t._)("code",null,[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("p")]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"v-for"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("item in list"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("{{ item }}"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("p")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br")])],-1),an=(0,t._)("p",null,"其更新前后的模板如下：",-1),tn=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token comment"},"// 更新前 [1, 2]"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" preBlock "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    tag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(" Fragment"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    dynamicChildren"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" tag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'p'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" children"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(" item"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"1"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" tag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'p'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" children"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(" item"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"1"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token comment"},"// 更新后 [1]"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" preBlock "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    tag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(" Fragment"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    dynamicChildren"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" tag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'p'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" children"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(" item"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"1"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br")])],-1),en=(0,t._)("p",null,[(0,t.Uk)("Fragment 本身收集的动态节点仍然面临结构不稳定的情况。所谓结构不稳定，从结果上看，"),(0,t._)("strong",null,"指的是更新前后一个 block 的 dynamicChildren 数组中收集的动态节点的数量或顺序不一致"),(0,t.Uk)("。这种不一致会导致我们无法直接进行靶向更新，这种情况下我们只能回退到传统虚拟 DOM 的 Diff 手段，即直接使用 Fragment 的 children 而非 dynamicChidlren 来进行 Diff 操作。")],-1),pn=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" block "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    tag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(" Fragment"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    dynamicChildren"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" tag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'p'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" children"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(" item"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" dynamicChildren"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token operator"},"..."),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" tag"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'p'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" children"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(" item"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" dynamicChildren"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token operator"},"..."),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br")])],-1),cn=(0,t._)("div",{class:"language-html ext-html line-numbers-mode"},[(0,t._)("pre",{class:"language-html"},[(0,t._)("code",null,[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("p")]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"v-for"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("item in 10"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("{{ item }}"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("p")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("p")]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"v-for"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("item in "),(0,t._)("span",{class:"token punctuation"},"'"),(0,t.Uk)("abc"),(0,t._)("span",{class:"token punctuation"},"'"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("{{ item }}"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("p")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br")])],-1),on=(0,t._)("p",null,"或",-1),ln=(0,t._)("div",{class:"language-html ext-html line-numbers-mode"},[(0,t._)("pre",{class:"language-html"},[(0,t._)("code",null,[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("template")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("div")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("div")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("p")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("p")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("template")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br")])],-1),un=(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("code",null,"v-for"),(0,t.Uk)("指令的表达式是常量")]),(0,t._)("li",null,"模板中有多个根节点。")],-1),kn=(0,t._)("h2",{id:"静态提升",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#静态提升","aria-hidden":"true"},"#"),(0,t.Uk)(" 静态提升")],-1),_n=(0,t._)("p",null,[(0,t.Uk)("✅ 静态提升就是把纯静态的"),(0,t._)("strong",null,"子节点树"),(0,t.Uk)("或者"),(0,t._)("strong",null,"属性"),(0,t.Uk)("提升到渲染函数之外，避免这些节点在更新时被再次创建为虚拟 DOM 所带来的性能开销。")],-1),rn=(0,t._)("blockquote",null,[(0,t._)("p",null,"hoist：提升")],-1),bn=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token comment"},"// 把静态节点提升到渲染函数之外"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"const"),(0,t.Uk)(" hoist1 "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"createVNode"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'p'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"null"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'Static text'"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"render"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token function"},"openBlock"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"createBlock"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'div'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"null"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("\n    hoist1"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("  "),(0,t._)("span",{class:"token comment"},"// 静态节点引用"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token function"},"createVNode"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'p'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"null"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" ctx"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("title"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"highlight-lines"},[(0,t._)("br"),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("br"),(0,t._)("br"),(0,t._)("br"),(0,t._)("div",{class:"highlight-line"}," "),(0,t._)("br"),(0,t._)("br"),(0,t._)("br")]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br")])],-1),dn=(0,t._)("div",{class:"language-html ext-html line-numbers-mode"},[(0,t._)("pre",{class:"language-html"},[(0,t._)("code",null,[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("div")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("p")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("Static text"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("p")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("p")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("{{ title }}"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("p")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("div")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br")])],-1),Un=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"render"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token function"},"openBlock"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"createBlock"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'div'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"null"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token function"},"createVNode"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'p'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"null"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'Static text'"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token function"},"createVNode"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'p'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"null"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" ctx"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("title"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br")])],-1),mn=(0,t.uE)('<p>需要注意的是，静态提升是以树为单位的，以下面的模板为例：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>abc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在上面这段模板中，除了根节点的 div 标签会作为 Block 角色而不可被提升之外，整个<code>&lt;section&gt;</code>元素及其子代节点都会被提升。如果我们把上面模板中的静态字符串 abc 替换成动态绑定的响应式数据，那么整棵树都不会被提升。</p><p>虽然包含动态绑定的节点本身不会被提升，但是该动态节点上仍然可能存在纯静态的属性，如下面的模板所示：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">foo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bar<span class="token punctuation">&quot;</span></span> <span class="token attr-name">a</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>b</span><span class="token punctuation">&gt;</span></span>{{ text }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>因为<code>p</code>标签存在动态绑定的文本内容，因此整个节点都不会被静态提升。该节点所有的 <code>props</code> 都是静态的，因此在最终生成渲染函数时，我们可以将纯静态的 <code>props</code> 提升到渲染函数之外，如下面的代码所示：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> hoistProp <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> a<span class="token operator">:</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">createBlock</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n    <span class="token function">createVNode</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> hoistProp<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="预字符串化" tabindex="-1"><a class="header-anchor" href="#预字符串化" aria-hidden="true">#</a> 预字符串化</h2><p>基于静态提升，我们还可以进一步采用预字符串化的优化手段。预字符串化是基于静态提升的一种优化策略。静态提升的虚拟接地那或虚拟节点树本身是静态的：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n  <span class="token comment">&lt;!-- 20 个 p 标签 ... --&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>假设上面的模板中包含大量连续存静态的标签节点，当采用了静态提升优化策略时，其编译后的代码如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> hoist1 <span class="token operator">=</span> <span class="token function">createVNode</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> PatchFlags<span class="token punctuation">,</span><span class="token constant">HOISTED</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> hoist2 <span class="token operator">=</span> <span class="token function">createVNode</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> PatchFlags<span class="token punctuation">,</span><span class="token constant">HOISTED</span><span class="token punctuation">)</span>\n<span class="token comment">// ...</span>\n<span class="token keyword">const</span> hoist20 <span class="token operator">=</span> <span class="token function">createVNode</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> PatchFlags<span class="token punctuation">,</span><span class="token constant">HOISTED</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">createBlock</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n    hoist1<span class="token punctuation">,</span> hoist2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> hoist20\n  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>预字符串化能将这些静态节点序列化为字符串，并生成一个 Static 类型的 VNode：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> hoistStatic <span class="token operator">=</span> <span class="token function">createStaticVNode</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;...&lt;p&gt;&lt;/p&gt;&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">createBlock</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n    hoistStatic\n  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">✅ 这么做有几个明显的优势：</p><ul><li>大块的静态内容可以通过 innerHTML 进行设置，在性能上具有一定优势。</li><li>减少创建虚拟节点产生的性能开销。</li><li>减少内存占用。</li></ul></div><h2 id="缓存内联事件处理函数" tabindex="-1"><a class="header-anchor" href="#缓存内联事件处理函数" aria-hidden="true">#</a> 缓存内联事件处理函数</h2><p>✅ 每次重新渲染时（即 <code>render</code> 函数重新执行时），都会为<code>Comp</code>组将创建一个全新的 <code>props</code> 对象。同时， <code>props</code> 对象中<code>onChange</code>属性的值也会是全新的函数。这会导致渲染器对<code>Comp</code>组件进行更新，造成额外的性能开销。为了避免这类无用的更新，我们需要对内联事件处理函数进行缓存。</p><blockquote><p>缓存内联事件处理函数可以避免不必要的更新。</p></blockquote>',18),gn=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"render"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},[(0,t.Uk)("ctx"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" cache")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"h"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("Comp"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"// 将内联事件处理函数缓存到 cache 数组中"),(0,t.Uk)("\n    onChange"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(" cache"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"||"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("cache"),(0,t._)("span",{class:"token punctuation"},"["),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"$event"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("ctx"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("a "),(0,t._)("span",{class:"token operator"},"+"),(0,t.Uk)(" ctx"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("b"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br")])],-1),hn=(0,t._)("div",{class:"language-html ext-html line-numbers-mode"},[(0,t._)("pre",{class:"language-html"},[(0,t._)("code",null,[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("Comp")]),(0,t.Uk)(),(0,t._)("span",{class:"token attr-name"},"@change"),(0,t._)("span",{class:"token attr-value"},[(0,t._)("span",{class:"token punctuation attr-equals"},"="),(0,t._)("span",{class:"token punctuation"},'"'),(0,t.Uk)("a + b"),(0,t._)("span",{class:"token punctuation"},'"')]),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"/>")]),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br")])],-1),vn=(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"render"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},[(0,t.Uk)("ctx"),(0,t._)("span",{class:"token punctuation"},",")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"h"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("Comp"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token function-variable function"},"onChange"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("ctx"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("a "),(0,t._)("span",{class:"token operator"},"+"),(0,t.Uk)(" ctx"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("b"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br")])],-1),fn=(0,t.uE)('<p>渲染函数的第二个参数是一个数组<code>cache</code>，该数组来自于数组实例，我们可以把内联事件处理函数添加到<code>cache</code>数组中。这样，当渲染函数重新执行并创建新的虚拟 DOM 树时，会优先读取缓存中的事件处理函数。这样，无论执行多少次渲染函数，<code>props</code> 对象中<code>onChange</code>属性的值始终不变，于是就不会触发<code>Comp</code>组件更新了。</p><h2 id="v-once" tabindex="-1"><a class="header-anchor" href="#v-once" aria-hidden="true">#</a> v-once</h2><div class="custom-container tip"><p class="custom-container-title">✅ v-once 的性能提升</p><ul><li>避免组件更新时重新创建虚拟 DOM 带来的性能开销。因为虚拟 DOM 被缓存了，所以更新时无需重新创建。</li><li>避免无用的 Diff 开销。这时因为被 <code>v-once</code> 编辑的虚拟 DOM 树不会被父级 Block 接待收集。</li></ul></div><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-once</span><span class="token punctuation">&gt;</span></span>{{ foo }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>上面这段模板中，<code>div</code>标签存在动态绑定的文本内容。但是它被<code>v-once</code>指令标记，所以这段模板会被编译为：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> cache</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">createBlock</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n    cache<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">createVNode</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>foo<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>div</code>标签对应的虚拟节点被缓存到了<code>cache</code>数组中。后续更新导致渲染函数重新执行时，会优先读取缓存内容，而不会重新创建虚拟节点。</p><p>既然虚拟节点被缓存，这就意味着更新前后的虚拟节点不会发生变化，因此也就<strong>不需要这些被缓存的虚拟节点参与 Diff 操作</strong>了。所以在实际编译后的代码会出现下面这段内容：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> cache</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">createBlock</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n    cache<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>\n    \t<span class="token function">setBlockTracking</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 阻止这段 VNode 被 Block 收集</span>\n      cache<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">createVNode</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>foo<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">setBlockTracking</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 恢复收集</span>\n      cache<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment">// 整个表达式的值</span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>使用<code>v-once</code>包裹的动态节点不会被父级 Block 收集。因此，被<code>v-once</code>包裹的动态节点在组件更新时，自然不会参与 Diff 操作。</p><p><code>v-once</code>指令通常用于不会发生改变的动态绑定中（例如绑定一个常量），这样可以避免虚拟节点的重新创建和参与 Diff 过程，提升性能：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token comment">&lt;!-- &lt;div&gt;{{ SOME_CONSTANT }}&lt;/div&gt; --&gt;</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-once</span><span class="token punctuation">&gt;</span></span>{{ SOME_CONSTANT }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',12),yn={render:function(n,s){const a=(0,t.up)("CodeGroupItem"),yn=(0,t.up)("CodeGroup"),wn=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[e,(0,t.Wm)(yn,null,{default:(0,t.w5)((()=>[(0,t.Wm)(a,{title:"模板"},{default:(0,t.w5)((()=>[p,c])),_:1}),(0,t.Wm)(a,{title:"传统虚拟 DOM"},{default:(0,t.w5)((()=>[o,l])),_:1}),(0,t.Wm)(a,{title:"Block"},{default:(0,t.w5)((()=>[u,k])),_:1}),(0,t.Wm)(a,{title:"动态子节点收集"},{default:(0,t.w5)((()=>[i,_,r])),_:1}),(0,t.Wm)(a,{title:"Blocks"},{default:(0,t.w5)((()=>[b])),_:1})])),_:1}),d,(0,t.Wm)(yn,null,{default:(0,t.w5)((()=>[(0,t.Wm)(a,{title:"render"},{default:(0,t.w5)((()=>[U,m,g,h])),_:1}),(0,t.Wm)(a,{title:"增加补丁标签"},{default:(0,t.w5)((()=>[v,f,y,w,x])),_:1}),(0,t.Wm)(a,{title:"createVNode 由内向外"},{default:(0,t.w5)((()=>[B,j,C])),_:1}),(0,t.Wm)(a,{title:"动态节点栈"},{default:(0,t.w5)((()=>[D])),_:1}),(0,t.Wm)(a,{title:"createVNode 收集动态子节点"},{default:(0,t.w5)((()=>[N,V])),_:1}),(0,t.Wm)(a,{title:"渲染函数"},{default:(0,t.w5)((()=>[O,F,W,M])),_:1})])),_:1}),q,P,(0,t._)("p",null,[E,(0,t._)("a",S,[T,(0,t.Wm)(wn)])]),(0,t.Wm)(yn,null,{default:(0,t.w5)((()=>[(0,t.Wm)(a,{title:"Block 靶向更新"},{default:(0,t.w5)((()=>[A,H,I])),_:1}),(0,t.Wm)(a,{title:"节点靶向更新"},{default:(0,t.w5)((()=>[J,L])),_:1})])),_:1}),X,(0,t.Wm)(yn,null,{default:(0,t.w5)((()=>[(0,t.Wm)(a,{title:"问题模板 1"},{default:(0,t.w5)((()=>[G,Y])),_:1}),(0,t.Wm)(a,{title:"问题模板 2"},{default:(0,t.w5)((()=>[z,R])),_:1}),(0,t.Wm)(a,{title:"Block"},{default:(0,t.w5)((()=>[$])),_:1})])),_:1}),K,(0,t.Wm)(yn,null,{default:(0,t.w5)((()=>[(0,t.Wm)(a,{title:"模板"},{default:(0,t.w5)((()=>[Q])),_:1}),(0,t.Wm)(a,{title:"list 更新前后的 Block"},{default:(0,t.w5)((()=>[Z])),_:1})])),_:1}),nn,(0,t.Wm)(yn,null,{default:(0,t.w5)((()=>[(0,t.Wm)(a,{title:"不稳定结构"},{default:(0,t.w5)((()=>[sn,an,tn,en])),_:1}),(0,t.Wm)(a,{title:"Block 数组"},{default:(0,t.w5)((()=>[pn])),_:1}),(0,t.Wm)(a,{title:"稳定结构"},{default:(0,t.w5)((()=>[cn,on,ln,un])),_:1})])),_:1}),kn,_n,rn,(0,t.Wm)(yn,null,{default:(0,t.w5)((()=>[(0,t.Wm)(a,{title:"静态提升后的渲染函数"},{default:(0,t.w5)((()=>[bn])),_:1}),(0,t.Wm)(a,{title:"模板"},{default:(0,t.w5)((()=>[dn])),_:1}),(0,t.Wm)(a,{title:"之前的渲染函数"},{default:(0,t.w5)((()=>[Un])),_:1})])),_:1}),mn,(0,t.Wm)(yn,null,{default:(0,t.w5)((()=>[(0,t.Wm)(a,{title:"缓存内联事件处理函数"},{default:(0,t.w5)((()=>[gn])),_:1}),(0,t.Wm)(a,{title:"模板"},{default:(0,t.w5)((()=>[hn])),_:1}),(0,t.Wm)(a,{title:"之前的渲染函数"},{default:(0,t.w5)((()=>[vn])),_:1})])),_:1}),fn],64)}}}}]);