"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1836],{2267:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-ba215f6e",path:"/note/module.html",title:"模块化",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"发展历程",slug:"发展历程",children:[]},{level:2,title:"早期“假”模块化时代",slug:"早期-假-模块化时代",children:[{level:3,title:"函数模式",slug:"函数模式",children:[]},{level:3,title:"对象模式",slug:"对象模式",children:[]}]},{level:2,title:"规范标准时代",slug:"规范标准时代",children:[{level:3,title:"CommonJS",slug:"commonjs",children:[]},{level:3,title:"AMD",slug:"amd",children:[]},{level:3,title:"CMD",slug:"cmd",children:[]},{level:3,title:"UMD",slug:"umd",children:[]}]},{level:2,title:"ES 原生时代和 tree shaking",slug:"es-原生时代和-tree-shaking",children:[{level:3,title:"ES 模块化为什么要设计成静态的",slug:"es-模块化为什么要设计成静态的",children:[]},{level:3,title:"tree shaking",slug:"tree-shaking",children:[]},{level:3,title:"tree shaking 使用注意",slug:"tree-shaking-使用注意",children:[]},{level:3,title:"💡 ES 的 export",slug:"💡-es-的-export",children:[]}]},{level:2,title:"未来趋势和思考",slug:"未来趋势和思考",children:[{level:3,title:"浏览器中使用 ESM",slug:"浏览器中使用-esm",children:[]},{level:3,title:"Node.js中使用 ESM",slug:"node-js中使用-esm",children:[]}]}],filePathRelative:"note/module.md",git:{updatedTime:1649575492e3,contributors:[{name:"Jerry Chen",email:"caffreygo@163.com",commits:1}]}}},6731:(n,s,a)=>{a.r(s),a.d(s,{default:()=>T});var p=a(6252);const t=(0,p.uE)('<h1 id="模块化" tabindex="-1"><a class="header-anchor" href="#模块化" aria-hidden="true">#</a> 模块化</h1><p>📗 对于一个复杂的应用程序，与其将所有代码一股脑地放在一个文件当中，不如按照一定的语法，遵循确定的规则（规范）拆分成几个互相独立的文件。这些文件应该具有原子特性，也就是说，其内部完成共同的或者类似的逻辑，通过对外暴露一些数据或调用方法，与外部完成整合。</p><ol><li>可复用性</li><li>可组合型</li><li>中心化</li><li>独立性</li></ol><blockquote><p>总结于《前端开发核心知识进阶》</p></blockquote><h2 id="发展历程" tabindex="-1"><a class="header-anchor" href="#发展历程" aria-hidden="true">#</a> 发展历程</h2><div class="custom-container tip"><p class="custom-container-title">前端模块化主要经历了以下三个阶段：</p><ul><li>早期“假”模块化时代：IIFE + 闭包</li><li>规范标准时代</li><li>ES原生时代</li></ul></div><h2 id="早期-假-模块化时代" tabindex="-1"><a class="header-anchor" href="#早期-假-模块化时代" aria-hidden="true">#</a> 早期“假”模块化时代</h2><h3 id="函数模式" tabindex="-1"><a class="header-anchor" href="#函数模式" aria-hidden="true">#</a> 函数模式</h3><p>在早期，JavaScript 属于运行在浏览器端的玩具脚本，它只负责实现一些简单的交互。随着互联网技术的演进，这样的设计逐渐不能满足业务的需求。这时候开发者往往从代码可读性上，借助函数作用域来模拟实现“假”的模块化，我称其为 <strong>函数模式</strong> ，即将不同功能封装成不同的函数：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">//...</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">//...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这样的方式其实根本不算模块化，各个函数在同一个文件中，混乱地互相调用，而且存在<strong>命名冲突</strong>的风险。这没有在根本上解决问题，只是从代码编写的角度，拆分成了更小的<strong>函数单元</strong>而已。</p><h3 id="对象模式" tabindex="-1"><a class="header-anchor" href="#对象模式" aria-hidden="true">#</a> 对象模式</h3><p>于是，开发者很快就想出了第二种方式，姑且称它为 <strong>对象模式</strong> ，即利用对象，实现命名空间的概念：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> module1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n    foo<span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">f11</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">f11</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//... },</span>\n    <span class="token function-variable function">f12</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">f12</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//... },</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> module2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n    data<span class="token operator">:</span> <span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">f21</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">f21</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//... },</span>\n    <span class="token function-variable function">f22</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">f22</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//... },</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>这样我们模拟了简单的 module1、module2 命名空间，在函数主体中可以调用：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module1<span class="token punctuation">.</span><span class="token function">f11</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module2<span class="token punctuation">.</span>data<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>对象内部成员可以随意被改写，极易出现 bug。那么有什么手段能弥补这个不足呢？</p><p>从某种角度上看，闭包简直就是一个天生解决数据访问性问题的方案。通过立即执行函数（IIFE），我们构造一个私有的作用域，再通过闭包，将需要对外暴露的数据和接口输出，我们称此为 <strong>IIFE 模式</strong> 。立即执行函数结合闭包实现的代码如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> module <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span>\n    <span class="token keyword">var</span> <span class="token function-variable function">fn1</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// ...</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">var</span> <span class="token function-variable function">fn2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// ...</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        fn1<span class="token operator">:</span> fn1<span class="token punctuation">,</span>\n        fn2<span class="token operator">:</span> fn2\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>如果想要访问变量 foo：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>是访问不到具体数据的。 了解了这种模式，我们可以在此基础上“玩出另外一个花”来，该方式的变种：结合顶层 window 对象，我们再来看：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">window</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">&#39;data&#39;</span>\n\n    <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">foo executing, data is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        data <span class="token operator">=</span> <span class="token string">&#39;modified data&#39;</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bar executing, data is now </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    window<span class="token punctuation">.</span>module1 <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">,</span> bar <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>这样的实现，数据 data 完全做到了私有，外界无法修改 data 值。那么如何访问 data 呢？这时候需要模块内部设计并暴露相关接口。上述代码中，只需要调用模块 module1 暴露给外界（window）的函数即可:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module1<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// foo executing, data is data</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>修改 data 值的途径，也只能由模块 module1 提供：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module1<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// bar executing, data is now modified data </span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如此一来，已经初具“模块化”的实质，实现了模块化所应该具备的初级功能。</p><p>我们再进一步思考，如果 module1 依赖外部模块 module2，该怎么办？请参考代码：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">window<span class="token punctuation">,</span> $</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">&#39;data&#39;</span>\n\n    <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">foo executing, data is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        data <span class="token operator">=</span> <span class="token string">&#39;modified data&#39;</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bar executing, data is now </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    window<span class="token punctuation">.</span>module1 <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">,</span> bar <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> jQuery<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><strong>事实上，这就是现代模块化方案的基石。到此为止，我们经历了模块化的第一阶段：“假”模块化时代。</strong> 这种实现极具阿 Q 精神，它并不是<u>语言原生层面上的实现</u>，而是开发者利用语言，借助 JavaScript 特性，模拟了类似的功能，为后续方案打开了大门。请继续阅读。</p><h2 id="规范标准时代" tabindex="-1"><a class="header-anchor" href="#规范标准时代" aria-hidden="true">#</a> 规范标准时代</h2><h3 id="commonjs" tabindex="-1"><a class="header-anchor" href="#commonjs" aria-hidden="true">#</a> CommonJS</h3><p>📗 Node.js 无疑对前端的发展具有极大的促进作用，它带来的 <code>CommonJS </code>模块化规范像一股“改革春风”：在 Node.js 中，每一个文件就是一个模块，具有单独的作用域，对其他文件是不可见的。</p><div class="custom-container tip"><p class="custom-container-title">CommonJS</p><ul><li>文件即模块，文件内所有代码都运行在独立的作用域，因此不会污染全局空间。</li><li>模块可以被多次引用、加载。在第一次被加载时，<strong>会被缓存</strong> ，之后都从缓存中直接读取结果。</li><li>加载某个模块，就是引入该模块的 module.exports 属性。</li><li>module.exports 属性 <strong>输出的是值的拷贝</strong> ，一旦这个值被输出，模块内再发生变化不会影响到输出的值。</li><li>模块加载顺序按照代码引入的顺序。</li><li>注意 module.exports 和 exports 的区别</li></ul></div><p>CommonJS 规范用代码如何在浏览器端实现呢？其实就是实现 module.exports 和 require 方法。</p><p>实现思路：根据 require 的文件路径，加载文件内容并执行，同时将对外接口进行缓存。因此我们需要定义：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> module <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>借助立即执行函数，将 module 和 module.exports 对象进行赋值：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...  </span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="amd" tabindex="-1"><a class="header-anchor" href="#amd" aria-hidden="true">#</a> AMD</h3><p>​ 由于 Node.js 运行于服务器上，所有的文件一般都已经存在了本地硬盘中，不需要额外的网络请求去异步加载，因而 CommonJS 规范加载模块是<strong>同步</strong>的。只有加载完成，才执行后续操作。</p><p>​ 但是，如果放在浏览器环境中，我们都需要从服务器端获取模块文件，此时再采用同步的方式，显然就不合适了。这时候，社区上推出了 AMD 规范。</p><p>📗 AMD 规范，全称为：Asynchronous Module Definition，看到 “Asynchronous”，我们就能够反映到它的模块化标准不同于 CommonJS，是<strong>异步</strong>的，完全贴合浏览器的。</p><p>它规定了如何定义模块，如何对外输出，如何引入依赖。这一切都需要代码去实现，因此一个著名的库 —— require.js 应运而生，require.js 实现很简单：通过 define 方法，将代码定义为模块；通过 require 方法，实现代码的模块加载。</p>',45),e=(0,p.Uk)("define 和 require 就是 require.js 在全局注入的函数。"),o={href:"https://github.com/requirejs/requirejs",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("require.js 源码"),l=(0,p.uE)('<p>在熟练使用的基础上，建议读者参考</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> require<span class="token punctuation">,</span> define<span class="token punctuation">;</span>\n<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">global<span class="token punctuation">,</span> setTimeout</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> setTimeout <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span> <span class="token operator">?</span> <span class="token keyword">undefined</span> <span class="token operator">:</span> setTimeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>我们看到，require.js 在全局定义了 require 和 define 两个方法，也是利用立即执行函数，将全局对象（this）和 setTimeout 传入函数体内。其中：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function-variable function">define</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> deps<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        context<span class="token punctuation">.</span>defQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>name<span class="token punctuation">,</span> deps<span class="token punctuation">,</span> callback<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        context<span class="token punctuation">.</span>defQueueMap<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        globalDefQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>name<span class="token punctuation">,</span> deps<span class="token punctuation">,</span> callback<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>这里主要是将依赖注入到依赖队列。而 require 的主要作用是完成创建 script 标签去请求相应的模块，对模块进行加载和执行：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>req<span class="token punctuation">.</span><span class="token function-variable function">load</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> moduleName<span class="token punctuation">,</span> url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token punctuation">(</span>context <span class="token operator">&amp;&amp;</span> context<span class="token punctuation">.</span>config<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    node<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>isBrowser<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//create a async script element</span>\n        node <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">createNode</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> moduleName<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//add Events [onreadystatechange,load,error]</span>\n        <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\n        <span class="token comment">//set url for loading</span>\n        node<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>\n\n        <span class="token comment">//insert script element to head and start load</span>\n        currentlyAddingScript <span class="token operator">=</span> node<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>baseElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            head<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> baseElement<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        currentlyAddingScript <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> node<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isWebWorker<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nreq<span class="token punctuation">.</span><span class="token function-variable function">createNode</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">config<span class="token punctuation">,</span> moduleName<span class="token punctuation">,</span> url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> node <span class="token operator">=</span> config<span class="token punctuation">.</span>xhtml <span class="token operator">?</span>\n        document<span class="token punctuation">.</span><span class="token function">createElementNS</span><span class="token punctuation">(</span><span class="token string">&#39;http://www.w3.org/1999/xhtml&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;html:script&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span>\n        document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    node<span class="token punctuation">.</span>type <span class="token operator">=</span> config<span class="token punctuation">.</span>scriptType <span class="token operator">||</span> <span class="token string">&#39;text/javascript&#39;</span><span class="token punctuation">;</span>\n    node<span class="token punctuation">.</span>charset <span class="token operator">=</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">;</span>\n    node<span class="token punctuation">.</span>async <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> node<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p>细心的读者可能会有疑问：在我们使用 require.js 之后，并没有发现额外多出来的 script 标签，这个秘密就在于 checkLoaded 方法会把已经加载完毕的脚本删除，因为我们需要的是模块内容，一旦加载之后，没有必要保留有 script 标签了：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">removeScript</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>isBrowser<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">each</span><span class="token punctuation">(</span><span class="token function">scripts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">scriptNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>scriptNode<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-requiremodule&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> name <span class="token operator">&amp;&amp;</span>\n                    scriptNode<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-requirecontext&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> context<span class="token punctuation">.</span>contextName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                scriptNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>scriptNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="cmd" tabindex="-1"><a class="header-anchor" href="#cmd" aria-hidden="true">#</a> CMD</h3><p>📗 CMD 规范整合了 CommonJS 和 AMD 规范的特点。它的全称为：Common Module Definition，类似 require.js，CMD 规范的实现为 sea.js。</p><div class="custom-container tip"><p class="custom-container-title">AMD 和 CMD 的两个主要区别如下。</p><ul><li>AMD 需要异步加载模块，而 CMD 在 require 依赖的时候，可以通过同步的形式（require），也可以通过异步的形式（require.async）。</li><li>CMD 遵循依赖就近原则，AMD 遵循依赖前置原则。也就是说，在 AMD 中，我们需要把模块所需要的依赖都提前在依赖数组中声明。而在 CMD 中，我们只需要在具体代码逻辑内，使用依赖前，把依赖的模块 require 进来。</li></ul></div><p>具体到代码实现，sea.js 与 require.js 并没有本质差别，这里不再另做分析。</p><h3 id="umd" tabindex="-1"><a class="header-anchor" href="#umd" aria-hidden="true">#</a> UMD</h3><p>UMD 全称：Universal Module Definition，看到 “Universal”，我们可以猜到它允许在环境中同时使用 AMD 与 CommonJS 规范，相当于一个整合。该模式的 <strong>核心思想</strong> 在于利用立即执行函数根据环境来判断需要的参数类别，譬如在 CommonJS 环境下，上述代码会以如下方式执行：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">factory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>而如果是在 AMD 模块规范下，函数的参数就变成了 define，适用 AMD 规范。</p><p>具体代码：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> factory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// AMD 规范</span>\n        <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> module <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 类 Node 环境，并不支持完全严格的 CommonJS 规范</span>\n        <span class="token comment">// 但是属于 CommonJS-like 环境，支持 module.exports 用法</span>\n        module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 浏览器环境</span>\n        root<span class="token punctuation">.</span>returnExports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 返回值作为 export 内容</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="es-原生时代和-tree-shaking" tabindex="-1"><a class="header-anchor" href="#es-原生时代和-tree-shaking" aria-hidden="true">#</a> ES 原生时代和 tree shaking</h2><p>1️⃣ ES 模块的设计思想是尽量 <strong>静态化</strong> ，这样能保证在编译时就确定模块之间的依赖关系，每个模块的输入和输出变量也都是确定的。CommonJS 和 AMD 模块，无法保证前置即确定这些内容，只能在运行时确定。这是 ES 模块化和其他规范的显著不同。</p><p>2️⃣ 第二个差别在于，CommonJS 模块输出的是一个值的 <strong>拷贝</strong> ，ES 模块输出的是值的 <strong>引用</strong> 。我们来具体看一下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// data.js</span>\n<span class="token keyword">export</span> <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">&#39;data&#39;</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">modifyData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    data <span class="token operator">=</span> <span class="token string">&#39;modified data&#39;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// index.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> modifyData <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./lib&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment">// data</span>\n<span class="token function">modifyData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment">// modified data  ESM值引用，修改会对应影响</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>我们在 index.js 中调用了 modifyData 方法，之后查询 data 值，得到了最新的变化。</p><p>而同样的逻辑，在 CommonJS 规范下的表现为：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// data.js</span>\n<span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">&#39;data&#39;</span>\n<span class="token keyword">function</span> <span class="token function">modifyData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    data <span class="token operator">=</span> <span class="token string">&#39;modified data&#39;</span>\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    data<span class="token operator">:</span> data<span class="token punctuation">,</span>\n    modifyData<span class="token operator">:</span> modifyData\n<span class="token punctuation">}</span>\n\n<span class="token comment">// index.js</span>\n<span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./data&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data\n<span class="token keyword">var</span> modifyData <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./data&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>modifyData\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment">// data</span>\n<span class="token function">modifyData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment">// data CommonJS值拷贝，修改后不影响原始值</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>因为 CommonJS 是输出了值的拷贝，而非引用，因此在调用 modifyData 之后，index.js 的 data 值并没有发生变化，其值为一个全新的拷贝。</p><h3 id="es-模块化为什么要设计成静态的" tabindex="-1"><a class="header-anchor" href="#es-模块化为什么要设计成静态的" aria-hidden="true">#</a> <strong>ES 模块化为什么要设计成静态的</strong></h3><p>✅ 一个明显的优势是：通过静态分析，<u>我们能够分析出导入的依赖</u>。如果导入的模块没有被使用，我们便可以通过 tree shaking 等手段减少代码体积，进而提升运行性能。这就是基于 ESM 实现 tree shaking 的基础。</p><div class="custom-container tip"><p class="custom-container-title">ES 模块化的静态性带来了限制：</p><ul><li>只能在文件顶部 import 依赖</li><li>export 导出的变量类型严格限制</li><li>变量不允许被重新绑定，import 的模块名只能是字符串常量，即不可以动态确定依赖</li></ul></div><p>这样的限制在语言层面带来的便利之一是：我们可以通过作用域分析，分析出代码里变量所属的作用域以及它们之间的引用关系，进而可以推导出变量和导入依赖变量的引用关系，在没有明显引用时，就可以进行去冗余。</p><h3 id="tree-shaking" tabindex="-1"><a class="header-anchor" href="#tree-shaking" aria-hidden="true">#</a> <strong>tree shaking</strong></h3><p>上面说到的“在没有明显引用时，就可以进行去冗余”，就是我们经常提到的 <strong>tree shaking</strong> ，它的目的就是减少应用中写出，但没有被实际运用的 JavaScript 代码。这样一来，无用代码的清除，意味着更小的代码体积，bundle size 的缩减，对用户体验起到了积极作用。</p>',32),u=(0,p.Uk)("在计算机科学当中，一个典型去除无用代码、冗余代码的手段是 "),i={href:"https://en.wikipedia.org/wiki/Dead_code_elimination",target:"_blank",rel:"noopener noreferrer"},r=(0,p.Uk)("DCE"),k=(0,p.Uk)("，dead code elimination。 "),d=(0,p._)("strong",null,"那么 tree shaking 和 DCE（Dead Code Elemination）有什么区别？",-1),m=(0,p._)("blockquote",null,[(0,p._)("p",null,"Rollup 的主要贡献者 Rich Harris 做过这样的比喻：假设我们用鸡蛋做蛋糕。显然，我们不需要蛋壳而只需要蛋清和蛋黄，那么如何去除蛋壳呢？DCE 是这样做的：直接把整个鸡蛋放到碗里搅拌，蛋糕做完后再慢慢地从里面挑出蛋壳")],-1),b=(0,p._)("p",null,"相反，与 DCE 不同，tree shaking 是开始阶段就把蛋壳剥离，留下蛋清和蛋黄。事实上，也可以将 tree shaking 理解为广义 DCE 的一种，它在前置打包时即排除掉不会用到的代码。",-1),g=(0,p._)("p",null,"当然说到底，tree shaking 只是一种辅助手段，良好的模块拆分和设计才是减少代码体积的关键。",-1),f=(0,p._)("p",null,[(0,p.Uk)("⚠️ Tree shaking 也有"),(0,p._)("strong",null,"局限性"),(0,p.Uk)("，它还有很多不能清除无用代码的场景，比如 Rollup 的 tree shaking 实现只处理函数和顶层的 "),(0,p._)("code",null,"import/export"),(0,p.Uk)(" 导入的变量，不能把没用到的类的方法消除；对于 tree shaking 来说，具有副作用的脚本无法被优化。")],-1),h=(0,p._)("p",null,"更多情况可以参考：",-1),v={href:"https://juejin.im/post/5a64724df265da3e5a575d65",target:"_blank",rel:"noopener noreferrer"},y=(0,p.Uk)("tree-shaking 不完全指南"),j={href:"https://github.com/indutny/webpack-common-shake#limitations",target:"_blank",rel:"noopener noreferrer"},w=(0,p.Uk)("webpack-common-shake"),x={href:"https://juejin.im/post/5a5652d8f265da3e497ff3de",target:"_blank",rel:"noopener noreferrer"},S=(0,p.Uk)("你的 Tree-Shaking 并没什么卵用"),D={href:"https://juejin.im/post/5bb8ef58f265da0a972e3434",target:"_blank",rel:"noopener noreferrer"},E=(0,p.Uk)("Webpack Tree shaking 深入探究"),_=(0,p._)("h3",{id:"tree-shaking-使用注意",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#tree-shaking-使用注意","aria-hidden":"true"},"#"),(0,p.Uk)(),(0,p._)("strong",null,"tree shaking 使用注意")],-1),q=(0,p._)("p",null,"webpack 和 Rollup 构建工具目都有成熟的方案，但是并不建议马上引入到项目中。事实上，是否要在成熟的项目上立即实施 tree shaking 需要妥善考虑。这里我也提供几篇收藏的文章，介绍了 tree shaking 的使用方法，这些基本操作内容，我们不再展开，可以按照官方文档实施，我也在文档之外推荐这些内容供大家学习。",-1),C={href:"https://mp.weixin.qq.com/s/Y4v7tAWUeDNs_FWpUnKmAw",target:"_blank",rel:"noopener noreferrer"},M=(0,p.Uk)("Webpack 之 treeShaking"),N={href:"https://juejin.im/post/5b8ce49df265da438151b468",target:"_blank",rel:"noopener noreferrer"},J=(0,p.Uk)("体积减少80%！释放 webpack tree-shaking 的真正潜力"),U={href:"https://juejin.im/post/5a4dc842518825698e7279a9",target:"_blank",rel:"noopener noreferrer"},A=(0,p.Uk)("Tree-Shaking 性能优化实践 - 原理篇"),W=(0,p.uE)('<h3 id="💡-es-的-export" tabindex="-1"><a class="header-anchor" href="#💡-es-的-export" aria-hidden="true">#</a> 💡 ES 的 export</h3><p>💡 模块化导出有 export 和 export default 两种。这里我们建议减少使用 export default 导出，原因是一方面 export default 导出整体对象结果，不利于 tree shaking 进行分析；另一方面，export default 导出的结果可以随意命名变量，不利于团队统一管理。</p><h2 id="未来趋势和思考" tabindex="-1"><a class="header-anchor" href="#未来趋势和思考" aria-hidden="true">#</a> 未来趋势和思考</h2><p>ES 模块化是未来不可避免的发展趋势，它的优点毫无争议，比如开箱即用的 tree shaking 和未来浏览器兼容性支持。Node.js 的 CommonJS 模块化方案甚至也会慢慢过渡到 ES 模块化上。如果你正在使用 webpack 构建应用项目，那么 ES 模块化是首选；如果你的项目是一个前端库，也建议使用 ES 模块化。</p><p>这么看来，或许只有在编写 Node.js 程序时，才需要考虑 CommonJS。</p><h3 id="浏览器中使用-esm" tabindex="-1"><a class="header-anchor" href="#浏览器中使用-esm" aria-hidden="true">#</a> 浏览器中使用 ESM</h3><p>目前各大浏览器较新版本都已经开始逐步支持 ES 模块了。如果我们想在浏览器中使用原生 ES 模块方案，只需要在 script 标签上添加一个 type=&quot;module&quot; 属性。通过该属性，浏览器知道这个文件是以模块化的方式运行的。而对于不支持的浏览器，需要通过 nomodule 属性来指定某脚本为 fallback 方案：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">import</span> module1 <span class="token keyword">from</span> <span class="token string">&#39;./module1&#39;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">nomodule</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;你的浏览器不支持 ES 模块，请先升级！&#39;</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>使用 type=&quot;module&quot; 的另一个作用是进行 ES Next 兼容性的嗅探。因为支持 ES 模块化的浏览器，都支持 ES Promise 等特性，基于此，应用场景较多。</p><h3 id="node-js中使用-esm" tabindex="-1"><a class="header-anchor" href="#node-js中使用-esm" aria-hidden="true">#</a> Node.js中使用 ESM</h3><p>Node.js 从 9.0 版本开始支持 ES 模块，执行脚本需要启动时加上 --experimental- modules，不过这一用法要求相应的文件后缀名必须为 *.mjs：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>node <span class="token operator">--</span>experimental<span class="token operator">-</span>modules module1<span class="token punctuation">.</span>mjs\n<span class="token keyword">import</span> module1 <span class="token keyword">from</span> <span class="token string">&#39;./module1.mjs&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module1<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>或：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>npx babel<span class="token operator">-</span>node \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',14),T={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("p",null,[e,(0,p._)("a",o,[c,(0,p.Wm)(a)])]),l,(0,p._)("p",null,[u,(0,p._)("a",i,[r,(0,p.Wm)(a)]),k,d]),m,b,g,f,h,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("a",v,[y,(0,p.Wm)(a)])]),(0,p._)("li",null,[(0,p._)("a",j,[w,(0,p.Wm)(a)])]),(0,p._)("li",null,[(0,p._)("a",x,[S,(0,p.Wm)(a)])]),(0,p._)("li",null,[(0,p._)("a",D,[E,(0,p.Wm)(a)])])]),_,q,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("a",C,[M,(0,p.Wm)(a)])]),(0,p._)("li",null,[(0,p._)("a",N,[J,(0,p.Wm)(a)])]),(0,p._)("li",null,[(0,p._)("a",U,[A,(0,p.Wm)(a)])])]),W],64)}}}}]);