"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8327],{8228:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-175dd75b",path:"/nest/prisma.html",title:"prisma",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Getting Start",slug:"getting-start",children:[{level:3,title:"安装依赖",slug:"安装依赖",children:[]},{level:3,title:"数据库连接",slug:"数据库连接",children:[]}]},{level:2,title:"迁移文件",slug:"迁移文件",children:[{level:3,title:"结构定义",slug:"结构定义",children:[]},{level:3,title:"生成迁移",slug:"生成迁移",children:[]},{level:3,title:"重置数据库",slug:"重置数据库",children:[]}]},{level:2,title:"查询构造器",slug:"查询构造器",children:[]},{level:2,title:"数据填充",slug:"数据填充",children:[{level:3,title:"环境配置",slug:"环境配置",children:[]},{level:3,title:"代码逻辑",slug:"代码逻辑",children:[]},{level:3,title:"填充命令",slug:"填充命令",children:[]},{level:3,title:"外键约束",slug:"外键约束",children:[]}]},{level:2,title:"常用命令",slug:"常用命令",children:[]},{level:2,title:"定义模块",slug:"定义模块",children:[{level:3,title:"提供者/LOG",slug:"提供者-log",children:[]},{level:3,title:"使用",slug:"使用",children:[]}]},{level:2,title:"常见问题",slug:"常见问题",children:[]}],filePathRelative:"nest/prisma.md",git:{updatedTime:1681892817e3,contributors:[{name:"jinrui-kooboo",email:"jinrui@kooboo.cn",commits:3}]}}},9077:(n,s,a)=>{a.r(s),a.d(s,{default:()=>Y});var e=a(6252);const p=(0,e.uE)('<h1 id="prisma" tabindex="-1"><a class="header-anchor" href="#prisma" aria-hidden="true">#</a> prisma</h1><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 初始化 prisma 目录结构</span>\nnpx prisma init\n<span class="token comment"># 自动识别 schema 生成外键等声明</span>\nnpx prisma <span class="token function">format</span>\n<span class="token comment"># 生成迁移文件、数据库更新、生成 PrismaClient</span>\nnpx prisma migrate dev\n<span class="token comment"># 运行数据填充脚本</span>\nnpx prisma db seed\n<span class="token comment"># 重置数据库并填充数据</span>\nnpx prisma migrate reset\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="getting-start" tabindex="-1"><a class="header-anchor" href="#getting-start" aria-hidden="true">#</a> Getting Start</h2><p>Prisma 可以方便的管理数据表，包含数据迁移、数据填充、查询生成器等好用的功能。</p><h3 id="安装依赖" tabindex="-1"><a class="header-anchor" href="#安装依赖" aria-hidden="true">#</a> 安装依赖</h3><p>安装 Prisma CLI 等扩展包</p>',6),t=(0,e.Uk)("使用"),o={href:"http://mockjs.com/examples.html",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("mockjs (opens new window)"),l=(0,e.Uk)("生成随机数据"),r=(0,e.Uk)("使用 "),i={href:"https://www.npmjs.com/package/argon2",target:"_blank",rel:"noopener noreferrer"},u=(0,e.Uk)("argon2 (opens new window)"),k=(0,e.Uk)("加密密码"),d=(0,e.uE)('<p>安装所需的包</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> prisma-binding @prisma/client mockjs argon2\n<span class="token function">pnpm</span> <span class="token function">add</span> -D prisma typescript @types/node @types/mockjs\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="数据库连接" tabindex="-1"><a class="header-anchor" href="#数据库连接" aria-hidden="true">#</a> 数据库连接</h3><p>执行以上命令后初始化 prisma</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>npx prisma init\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>会创建<code>.env</code>文件与<code>prisma</code>文件夹</p><ul><li>.env 用于定义数据库连接</li><li>prisma 用于定义模型结构与数据迁移与数据填充文件</li></ul><p>修改<code>.env</code>文件设置 mysql 连接，以下连接请根据情况修改</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">DATABASE_URL</span><span class="token operator">=</span><span class="token string">&quot;mysql://root:admin888@127.0.0.1:3306/nest&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="迁移文件" tabindex="-1"><a class="header-anchor" href="#迁移文件" aria-hidden="true">#</a> 迁移文件</h2><p>迁移文件 migrate 用于构建数据表结构变化，他是数据库的<strong>版本控制</strong>机制，每次表结构的修改都有单独文件记录。</p><h3 id="结构定义" tabindex="-1"><a class="header-anchor" href="#结构定义" aria-hidden="true">#</a> 结构定义</h3><p>在 <code>prisman/schema.prisma</code> 文件内定义表结构:</p>',13),m=(0,e.Uk)("你可以查看"),b={href:"https://prisma.yoga/concepts/components/prisma-schema/data-model#%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7",target:"_blank",rel:"noopener noreferrer"},g=(0,e.Uk)("数据模型 (opens new window)"),h=(0,e.Uk)("或 "),v={href:"https://prisma.yoga/reference/api-reference/prisma-schema-reference#model-%E5%AD%97%E6%AE%B5",target:"_blank",rel:"noopener noreferrer"},y=(0,e.Uk)("字段类型 (opens new window)"),w=(0,e.Uk)("文档了解使用方法。"),f=(0,e.uE)('<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>generator client {\n  provider = &quot;prisma-client-js&quot;\n}\n\ndatasource db {\n  provider = &quot;mysql&quot;\n  url      = env(&quot;DATABASE_URL&quot;)\n}\n\nmodel user {\n  // BigInt类型\t主键 自增值\t非负BitInt\n  id       BigInt    @id @default(autoincrement()) @db.UnsignedBigInt()\n  // 字符串，默认为varchar(191)\n  email    String\n  password String\n  // 添加时自动设置时间，即设置Mysql默认值为CURRENT_TIMESTAMP\n  createdAt DateTime @default(now())\n  // 让Prisma在添加与更新时自动维护该字段\n  updatedAt DateTime @updatedAt\n}\n\nmodel category {\n  id       Int       @id @default(autoincrement()) @db.UnsignedInt()\n  title    String\n  articles article[]\n  created_at DateTime @default(now())\n  updated_at DateTime @updatedAt\n}\n\nmodel article {\n  id         Int      @id @default(autoincrement()) @db.UnsignedInt()\n  title      String\n  content    String   @db.Text()\n  // 类型category\t关联定义(本表字段catgoryId,关联category表id,主表记录删除时同时删除关联表数据）\n  // 通过 vicode prisma插件自动生成，或者 npm prisma format\n  category   category @relation(fields: [categoryId], references: [id], onDelete: Cascade)\n  categoryId Int      @db.UnsignedInt()\n  created_at DateTime @default(now())\n  updated_at DateTime @updatedAt\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p>执行以下命令，将自动根据已经存在的数据库生成文件 <code>prisman/schema.prisma</code> ，而不需要向上面一样手动定义。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>npx prisma db pull\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="生成迁移" tabindex="-1"><a class="header-anchor" href="#生成迁移" aria-hidden="true">#</a> 生成迁移</h3><p>当创建好结构定义后，执行以下命令会在<code>prisma/migrations</code> 目录生成迁移文件，同时在数据库中创建表。</p><ul><li>这时数据表也已经创建了</li><li>数据库中会有表 <code>_prisma_migrations</code> 记录了迁移文件</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>npx prisma migrate dev\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>✅ 以下命令执行动作为：</p><ul><li>根据定义生成迁移文件</li><li>执行新的迁移文件修改数据表</li><li>生成 <strong>Prisma Client</strong></li></ul><h3 id="重置数据库" tabindex="-1"><a class="header-anchor" href="#重置数据库" aria-hidden="true">#</a> 重置数据库</h3><p>我们也可以执行以下命令重置数据库</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> prisma migrate reset\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>以下命令执行动作为：</p><ul><li>删除数据库</li><li>创建数据库</li><li>执行所有迁移文件</li><li>运行 seed 数据填充</li></ul><h2 id="查询构造器" tabindex="-1"><a class="header-anchor" href="#查询构造器" aria-hidden="true">#</a> 查询构造器</h2><p>当执行 prisma migrate dev 后，系统会生成针对于每个表的查询构建器 <code>PrismaClient</code>。</p>',16),x=(0,e._)("li",null,"查询构造器提供众多方法完成对数据的增删改查",-1),q=(0,e.Uk)("你可以查看文档 "),_={href:"https://prisma.yoga/concepts/components/prisma-client",target:"_blank",rel:"noopener noreferrer"},U=(0,e.Uk)("prisma-client (opens new window)"),S=(0,e.Uk)("了解详细使用"),P=(0,e.uE)('<p>下面在中创建文件<code>test.ts</code>，用于测试查询构造器，内容如下</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> PrismaClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@prisma/client&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> prisma <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrismaClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> prisma<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>需要安装以下命令完成测试</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> -g nodemon ts-node\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>然后执行命令查看结果</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>nodemon test.ts\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="数据填充" tabindex="-1"><a class="header-anchor" href="#数据填充" aria-hidden="true">#</a> 数据填充</h2>',7),A={href:"https://prisma.yoga/guides/database/seed-database",target:"_blank",rel:"noopener noreferrer"},j=(0,e.Uk)("数据填充 (opens new window)"),C=(0,e.Uk)("一般用于在开发时添加测试数据，我们会使用 prisma 的 "),E={href:"https://prisma.yoga/concepts/components/prisma-client",target:"_blank",rel:"noopener noreferrer"},I=(0,e.Uk)("prisma-client (opens new window)"),M=(0,e.Uk)("查询构造器进入数据添加。"),D=(0,e._)("h3",{id:"环境配置",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#环境配置","aria-hidden":"true"},"#"),(0,e.Uk)(" 环境配置")],-1),T=(0,e.Uk)("同时为了生成随机数据需要安装 "),R={href:"http://mockjs.com/",target:"_blank",rel:"noopener noreferrer"},B=(0,e.Uk)("mockjs (opens new window)"),L=(0,e.Uk)("。"),W=(0,e.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> mockjs\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>首先在 package.json 中定义命令，后面可以调用 <code>npx prisma db seed</code> 命令实现填充</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;nest&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;prisma&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;seed&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ts-node prisma/seed.ts&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>然后你需要创建<code>prisma/seeds</code>目录 ，该目录用于定义数据填充文件。</p><h3 id="代码逻辑" tabindex="-1"><a class="header-anchor" href="#代码逻辑" aria-hidden="true">#</a> 代码逻辑</h3><p>创建帮助函数 <code>prisma/helper.ts</code>，并实现 create 方法用于批量执行填充动作。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span>\n  count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> prisma <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrismaClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">await</span> <span class="token function">callback</span><span class="token punctuation">(</span>prisma<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>接着定义<code>seeds/user.ts</code>文件用于定义 user 表的数据</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> PrismaClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@prisma/client&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Random <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;mockjs&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> hash <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;argon2&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> create <span class="token keyword">from</span> <span class="token string">&quot;../helper&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">create</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>prisma<span class="token operator">:</span> PrismaClient<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">await</span> prisma<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      data<span class="token operator">:</span> <span class="token punctuation">{</span>\n        email<span class="token operator">:</span> Random<span class="token punctuation">.</span><span class="token function">email</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        password<span class="token operator">:</span> <span class="token keyword">await</span> <span class="token function">hash</span><span class="token punctuation">(</span>Random<span class="token punctuation">.</span><span class="token function">sentence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>然后创建文件 prisma/seed.ts ，这个文件是执行<code>npx prisma db seed</code>命令时调用的</p><blockquote><p>因为有些表需要其他表先创建，所以定义 bootstrap 方法，使用 await 让他们按顺序执行</p></blockquote><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> UserSeed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./seeds/user&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">UserSeed</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="填充命令" tabindex="-1"><a class="header-anchor" href="#填充命令" aria-hidden="true">#</a> 填充命令</h3><p>✅ 现在执行命令就可以有填充数据了</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>npx prisma db seed\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>✅ 执行以下命令会自动执行数据填充</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>npx prisma migrate reset\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="外键约束" tabindex="-1"><a class="header-anchor" href="#外键约束" aria-hidden="true">#</a> 外键约束</h3><p>如果数据表有外键依赖时，需要保证被依赖的表先创建。这时需要使用<strong>await</strong> 函数阻塞异步执行。</p><p>首先修改 <strong>seed.ts</strong> 文件，让调用的填充文件阻塞执行</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> UserSeed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./seeds/user&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">await</span> <span class="token function">UserSeed</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>接着修改 <strong>UserSeed.ts</strong> 文件，将函数定义为 <strong>async/await</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token operator">...</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">await</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>prisma<span class="token operator">:</span>PrismaClient<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">await</span> prisma<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      data<span class="token operator">:</span> <span class="token punctuation">{</span>\n        email<span class="token operator">:</span> Random<span class="token punctuation">.</span><span class="token function">email</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        password<span class="token operator">:</span> <span class="token keyword">await</span> <span class="token function">hash</span><span class="token punctuation">(</span>Random<span class="token punctuation">.</span><span class="token function">sentence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h2><p>创建迁移文件</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> prisma migrate dev\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>重置迁移并执行数据，同时会执行数据填充</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> prisma migrate reset\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>执行数据填充</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> prisma db seed\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="定义模块" tabindex="-1"><a class="header-anchor" href="#定义模块" aria-hidden="true">#</a> 定义模块</h2><p>下面我们在项目代码中使用 prisma，首先创建 prisma 模块。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>nest g mo prisma\nnest g s prisma\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="提供者-log" tabindex="-1"><a class="header-anchor" href="#提供者-log" aria-hidden="true">#</a> 提供者/LOG</h3>',34),G=(0,e.Uk)("创建 "),O=(0,e._)("strong",null,"prisma/prisma.service.ts",-1),F=(0,e.Uk)(" 服务文件，同时将在文件中定义 "),N={href:"https://prisma.yoga/concepts/components/prisma-client/working-with-prismaclient/logging",target:"_blank",rel:"noopener noreferrer"},Q=(0,e.Uk)("日志记录 (opens new window)"),z=(0,e.Uk)("。"),H=(0,e.uE)('<blockquote><p>当为开发环境时，终端输入查询 SQL</p></blockquote><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ConfigService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/config&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> PrismaClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@prisma/client&quot;</span><span class="token punctuation">;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">PrismaService</span> <span class="token keyword">extends</span> <span class="token class-name">PrismaClient</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>configService<span class="token operator">:</span> ConfigService<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//输出查询SQL等LOG</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>\n      configService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;app.isDev&quot;</span><span class="token punctuation">)</span>\n        <span class="token operator">?</span> <span class="token punctuation">{</span> log<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;query&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;info&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;warn&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>\n        <span class="token operator">:</span> <span class="token keyword">undefined</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>然后设置模块 <strong>prisma/prisma.module.ts</strong> 注册提供者，并使用 exports 选项向外部提供 <strong>PrismaService</strong> 服务</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Global<span class="token punctuation">,</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> PrismaService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./prisma.service&quot;</span><span class="token punctuation">;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Global</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  providers<span class="token operator">:</span> <span class="token punctuation">[</span>PrismaService<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  exports<span class="token operator">:</span> <span class="token punctuation">[</span>PrismaService<span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">PrismaModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>然后在根模块 <strong>app.module.ts</strong> 中注册</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> PrismaModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./prisma/prisma.module&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> AppController <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./app.controller&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> AppService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./app.service&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> UserModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./user/user.module&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> AuthModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./auth/auth.module&quot;</span><span class="token punctuation">;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  imports<span class="token operator">:</span> <span class="token punctuation">[</span>UserModule<span class="token punctuation">,</span> AuthModule<span class="token punctuation">,</span> PrismaModule<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  controllers<span class="token operator">:</span> <span class="token punctuation">[</span>AppController<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  providers<span class="token operator">:</span> <span class="token punctuation">[</span>AppService<span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><p>现在其他模块也可以使用 <strong>PrismaService</strong> 服务了</p><blockquote><p>因为 prisma 模块已经注册全局，所以其他模块不需要 import</p></blockquote><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> PrismaService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./../prisma/prisma.service&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable<span class="token punctuation">,</span> ForbiddenException <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> CreateAuthDto <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./dto/create-auth.dto&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> argon2 <span class="token keyword">from</span> <span class="token string">&#39;argon2&#39;</span><span class="token punctuation">;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AuthService</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> prisma<span class="token operator">:</span> PrismaService<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h2><ol><li><p>当 prisma 出错异常时，你可以删除 prisma 迁移文件</p><p>你可以删除数据库所有表，和项目中的 <code>prisma/migrations</code> 目录，将 prisma 初始到最干净的状态</p></li></ol>',12),Y={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("ul",null,[(0,e._)("li",null,[t,(0,e._)("a",o,[c,(0,e.Wm)(a)]),l]),(0,e._)("li",null,[r,(0,e._)("a",i,[u,(0,e.Wm)(a)]),k])]),d,(0,e._)("blockquote",null,[(0,e._)("p",null,[m,(0,e._)("a",b,[g,(0,e.Wm)(a)]),h,(0,e._)("a",v,[y,(0,e.Wm)(a)]),w])]),f,(0,e._)("ul",null,[x,(0,e._)("li",null,[q,(0,e._)("a",_,[U,(0,e.Wm)(a)]),S])]),P,(0,e._)("p",null,[(0,e._)("a",A,[j,(0,e.Wm)(a)]),C,(0,e._)("a",E,[I,(0,e.Wm)(a)]),M]),D,(0,e._)("p",null,[T,(0,e._)("a",R,[B,(0,e.Wm)(a)]),L]),W,(0,e._)("p",null,[G,O,F,(0,e._)("a",N,[Q,(0,e.Wm)(a)]),z]),H],64)}}}}]);